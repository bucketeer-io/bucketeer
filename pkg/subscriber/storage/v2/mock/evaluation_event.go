// Code generated by MockGen. DO NOT EDIT.
// Source: evaluation_event.go
//
// Generated by this command:
//
//	mockgen -source=evaluation_event.go -package=mock -destination=./mock/evaluation_event.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	v2 "github.com/bucketeer-io/bucketeer/v2/pkg/subscriber/storage/v2"
)

// MockEvaluationEventStorageV2 is a mock of EvaluationEventStorageV2 interface.
type MockEvaluationEventStorageV2 struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluationEventStorageV2MockRecorder
}

// MockEvaluationEventStorageV2MockRecorder is the mock recorder for MockEvaluationEventStorageV2.
type MockEvaluationEventStorageV2MockRecorder struct {
	mock *MockEvaluationEventStorageV2
}

// NewMockEvaluationEventStorageV2 creates a new mock instance.
func NewMockEvaluationEventStorageV2(ctrl *gomock.Controller) *MockEvaluationEventStorageV2 {
	mock := &MockEvaluationEventStorageV2{ctrl: ctrl}
	mock.recorder = &MockEvaluationEventStorageV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluationEventStorageV2) EXPECT() *MockEvaluationEventStorageV2MockRecorder {
	return m.recorder
}

// CreateEvaluationEvents mocks base method.
func (m *MockEvaluationEventStorageV2) CreateEvaluationEvents(ctx context.Context, events []v2.EvaluationEventParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluationEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvaluationEvents indicates an expected call of CreateEvaluationEvents.
func (mr *MockEvaluationEventStorageV2MockRecorder) CreateEvaluationEvents(ctx, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluationEvents", reflect.TypeOf((*MockEvaluationEventStorageV2)(nil).CreateEvaluationEvents), ctx, events)
}
