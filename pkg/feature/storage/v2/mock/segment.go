// Code generated by MockGen. DO NOT EDIT.
// Source: segment.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	domain "github.com/bucketeer-io/bucketeer/pkg/feature/domain"
	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	feature "github.com/bucketeer-io/bucketeer/proto/feature"
)

// MockSegmentStorage is a mock of SegmentStorage interface.
type MockSegmentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentStorageMockRecorder
}

// MockSegmentStorageMockRecorder is the mock recorder for MockSegmentStorage.
type MockSegmentStorageMockRecorder struct {
	mock *MockSegmentStorage
}

// NewMockSegmentStorage creates a new mock instance.
func NewMockSegmentStorage(ctrl *gomock.Controller) *MockSegmentStorage {
	mock := &MockSegmentStorage{ctrl: ctrl}
	mock.recorder = &MockSegmentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentStorage) EXPECT() *MockSegmentStorageMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegmentStorage) CreateSegment(ctx context.Context, segment *domain.Segment, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", ctx, segment, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentStorageMockRecorder) CreateSegment(ctx, segment, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegmentStorage)(nil).CreateSegment), ctx, segment, environmentNamespace)
}

// GetSegment mocks base method.
func (m *MockSegmentStorage) GetSegment(ctx context.Context, id, environmentNamespace string) (*domain.Segment, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegment", ctx, id, environmentNamespace)
	ret0, _ := ret[0].(*domain.Segment)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSegment indicates an expected call of GetSegment.
func (mr *MockSegmentStorageMockRecorder) GetSegment(ctx, id, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegment", reflect.TypeOf((*MockSegmentStorage)(nil).GetSegment), ctx, id, environmentNamespace)
}

// ListSegments mocks base method.
func (m *MockSegmentStorage) ListSegments(ctx context.Context, whereParts []mysql.WherePart, orders []*mysql.Order, limit, offset int, isInUseStatus *bool, environmentNamespace string) ([]*feature.Segment, int, int64, map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSegments", ctx, whereParts, orders, limit, offset, isInUseStatus, environmentNamespace)
	ret0, _ := ret[0].([]*feature.Segment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(map[string][]string)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ListSegments indicates an expected call of ListSegments.
func (mr *MockSegmentStorageMockRecorder) ListSegments(ctx, whereParts, orders, limit, offset, isInUseStatus, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSegments", reflect.TypeOf((*MockSegmentStorage)(nil).ListSegments), ctx, whereParts, orders, limit, offset, isInUseStatus, environmentNamespace)
}

// UpdateSegment mocks base method.
func (m *MockSegmentStorage) UpdateSegment(ctx context.Context, segment *domain.Segment, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegment", ctx, segment, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSegment indicates an expected call of UpdateSegment.
func (mr *MockSegmentStorageMockRecorder) UpdateSegment(ctx, segment, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegment", reflect.TypeOf((*MockSegmentStorage)(nil).UpdateSegment), ctx, segment, environmentNamespace)
}
