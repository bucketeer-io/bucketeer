// Code generated by MockGen. DO NOT EDIT.
// Source: informer.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	health "github.com/bucketeer-io/bucketeer/pkg/health"
)

// MockInformer is a mock of Informer interface.
type MockInformer struct {
	ctrl     *gomock.Controller
	recorder *MockInformerMockRecorder
}

// MockInformerMockRecorder is the mock recorder for MockInformer.
type MockInformerMockRecorder struct {
	mock *MockInformer
}

// NewMockInformer creates a new mock instance.
func NewMockInformer(ctrl *gomock.Controller) *MockInformer {
	mock := &MockInformer{ctrl: ctrl}
	mock.recorder = &MockInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInformer) EXPECT() *MockInformerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockInformer) Check(arg0 context.Context) health.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0)
	ret0, _ := ret[0].(health.Status)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockInformerMockRecorder) Check(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockInformer)(nil).Check), arg0)
}

// Run mocks base method.
func (m *MockInformer) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockInformerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInformer)(nil).Run))
}

// Stop mocks base method.
func (m *MockInformer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockInformerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInformer)(nil).Stop))
}
