// Code generated by MockGen. DO NOT EDIT.
// Source: segment_user.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "github.com/bucketeer-io/bucketeer/pkg/feature/domain"
	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	feature "github.com/bucketeer-io/bucketeer/proto/feature"
)

// MockSegmentUserStorage is a mock of SegmentUserStorage interface.
type MockSegmentUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentUserStorageMockRecorder
}

// MockSegmentUserStorageMockRecorder is the mock recorder for MockSegmentUserStorage.
type MockSegmentUserStorageMockRecorder struct {
	mock *MockSegmentUserStorage
}

// NewMockSegmentUserStorage creates a new mock instance.
func NewMockSegmentUserStorage(ctrl *gomock.Controller) *MockSegmentUserStorage {
	mock := &MockSegmentUserStorage{ctrl: ctrl}
	mock.recorder = &MockSegmentUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentUserStorage) EXPECT() *MockSegmentUserStorageMockRecorder {
	return m.recorder
}

// GetSegmentUser mocks base method.
func (m *MockSegmentUserStorage) GetSegmentUser(ctx context.Context, id, environmentNamespace string) (*domain.SegmentUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentUser", ctx, id, environmentNamespace)
	ret0, _ := ret[0].(*domain.SegmentUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentUser indicates an expected call of GetSegmentUser.
func (mr *MockSegmentUserStorageMockRecorder) GetSegmentUser(ctx, id, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentUser", reflect.TypeOf((*MockSegmentUserStorage)(nil).GetSegmentUser), ctx, id, environmentNamespace)
}

// ListSegmentUsers mocks base method.
func (m *MockSegmentUserStorage) ListSegmentUsers(ctx context.Context, whereParts []mysql.WherePart, orders []*mysql.Order, limit, offset int) ([]*feature.SegmentUser, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSegmentUsers", ctx, whereParts, orders, limit, offset)
	ret0, _ := ret[0].([]*feature.SegmentUser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSegmentUsers indicates an expected call of ListSegmentUsers.
func (mr *MockSegmentUserStorageMockRecorder) ListSegmentUsers(ctx, whereParts, orders, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSegmentUsers", reflect.TypeOf((*MockSegmentUserStorage)(nil).ListSegmentUsers), ctx, whereParts, orders, limit, offset)
}

// UpsertSegmentUsers mocks base method.
func (m *MockSegmentUserStorage) UpsertSegmentUsers(ctx context.Context, users []*feature.SegmentUser, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSegmentUsers", ctx, users, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSegmentUsers indicates an expected call of UpsertSegmentUsers.
func (mr *MockSegmentUserStorageMockRecorder) UpsertSegmentUsers(ctx, users, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSegmentUsers", reflect.TypeOf((*MockSegmentUserStorage)(nil).UpsertSegmentUsers), ctx, users, environmentNamespace)
}
