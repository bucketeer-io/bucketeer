// Copyright 2025 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.gateway;
option go_package = "github.com/bucketeer-io/bucketeer/proto/gateway";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/common/string.proto";
import "proto/user/user.proto";
import "proto/feature/evaluation.proto";
import "proto/feature/feature.proto";
import "proto/feature/service.proto";
import "proto/feature/variation.proto";
import "proto/feature/strategy.proto";
import "proto/feature/segment.proto";
import "proto/push/push.proto";
import "proto/push/service.proto";
import "proto/account/service.proto";
import "proto/account/account.proto";
import "proto/event/client/event.proto";
import "proto/coderef/code_reference.proto";
import "proto/coderef/service.proto";
import "proto/auditlog/auditlog.proto";
import "proto/auditlog/service.proto";
import "proto/autoops/auto_ops_rule.proto";
import "proto/autoops/progressive_rollout.proto";
import "proto/autoops/clause.proto";
import "proto/autoops/service.proto";
import "proto/tag/service.proto";
import "proto/tag/tag.proto";
import "proto/team/service.proto";
import "proto/team/team.proto";
import "proto/notification/service.proto";
import "proto/notification/subscription.proto";
import "proto/notification/recipient.proto";
import "proto/feature/flag_trigger.proto";
import "proto/experiment/experiment.proto";
import "proto/experiment/goal.proto";
import "proto/experiment/service.proto";
import "proto/eventcounter/service.proto";
import "proto/eventcounter/experiment_result.proto";
import "proto/eventcounter/timeseries.proto";
import "proto/eventcounter/variation_count.proto";

message PingRequest {}

message PingResponse {
  int64 time = 1;
}

message GetFeatureFlagsRequest {
  string tag = 1;
  string feature_flags_id = 2;
  int64 requested_at = 3;
  bucketeer.event.client.SourceId source_id = 4;
  string sdk_version = 5;
}

message GetFeatureFlagsResponse {
  string feature_flags_id = 1;
  repeated bucketeer.feature.Feature features = 2;
  repeated string archived_feature_flag_ids = 3;
  int64 requested_at = 4;
  bool force_update = 5;
}

message GetSegmentUsersRequest {
  repeated string segment_ids = 1;
  int64 requested_at = 2;
  bucketeer.event.client.SourceId source_id = 3;
  string sdk_version = 4;
}

message GetSegmentUsersResponse {
  repeated bucketeer.feature.SegmentUsers segment_users = 1;
  repeated string deleted_segment_ids = 2;
  int64 requested_at = 3;
  bool force_update = 4;
}

message GetEvaluationsRequest {
  message UserEvaluationCondition {
    int64 evaluated_at = 1;
    bool user_attributes_updated = 2;
  }
  string tag = 1;
  user.User user = 2;
  string user_evaluations_id = 3;
  string feature_id = 4 [deprecated = true];  // instead, use GetEvaluation API
  bucketeer.event.client.SourceId source_id = 5;
  UserEvaluationCondition user_evaluation_condition = 6;
  string sdk_version = 7;
}

message GetEvaluationsResponse {
  feature.UserEvaluations.State state = 1;
  feature.UserEvaluations evaluations = 2;
  string user_evaluations_id = 3;
}

message GetEvaluationRequest {
  string tag = 1;
  user.User user = 2;
  string feature_id = 3;
  bucketeer.event.client.SourceId source_id = 4;
  string sdk_version = 5;
}

message GetEvaluationResponse {
  feature.Evaluation evaluation = 1;
}

message RegisterEventsRequest {
  repeated bucketeer.event.client.Event events = 1;
  string sdk_version = 2;
  bucketeer.event.client.SourceId source_id = 3;
}

message RegisterEventsResponse {
  message Error {
    bool retriable = 1;
    string message = 2;
  }
  map<string, Error> errors = 1;
}

message TrackRequest {
  string apikey = 1;
  string userid = 2;
  string goalid = 3;
  string tag = 4;
  int64 timestamp = 5;
  double value = 6;
}

message TrackResponse {}

message DebugEvaluateFeaturesRequest {
  repeated bucketeer.user.User users = 1
      [(google.api.field_behavior) = REQUIRED];
  repeated string feature_ids = 3 [(google.api.field_behavior) = REQUIRED];
}

message DebugEvaluateFeaturesResponse {
  repeated feature.Evaluation evaluations = 1;
  repeated string archived_feature_ids = 2;
}

message CreateFeatureRequest {
  string id = 1;
  string name = 2;
  string description = 3;
  feature.Feature.VariationType variation_type = 4;
  repeated feature.Variation variations = 5;
  repeated string tags = 6;
  int32 on_variation_index = 7;
  int32 off_variation_index = 8;
}

message CreateFeatureResponse {
  feature.Feature feature = 1;
}

message GetFeatureRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Int32Value feature_version = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        title: "feature_version"
        description: "If not set, it will return the latest version."
      }];
}

message GetFeatureResponse {
  feature.Feature feature = 1;
}

message ListFeaturesRequest {
  int64 page_size = 1;
  string cursor = 2;
  feature.ListFeaturesRequest.OrderBy order_by = 3;
  feature.ListFeaturesRequest.OrderDirection order_direction = 4;
}

message ListFeaturesResponse {
  repeated feature.Feature features = 1;
}

message UpdateFeatureRequest {
  string comment = 1;
  string environment_id = 2;
  string id = 3;
  google.protobuf.StringValue name = 4;
  google.protobuf.StringValue description = 5;
  common.StringListValue tags = 6;
  google.protobuf.BoolValue enabled = 7;
  google.protobuf.BoolValue archived = 8;
  feature.Strategy default_strategy = 9;
  google.protobuf.StringValue off_variation = 10;
  bool reset_sampling_seed = 11;
  repeated feature.VariationChange variation_changes = 12;
  repeated feature.RuleChange rule_changes = 13;
  repeated feature.PrerequisiteChange prerequisite_changes = 14;
  repeated feature.TargetChange target_changes = 15;
  repeated feature.TagChange tag_changes = 16;
}

message UpdateFeatureResponse {
  feature.Feature feature = 1;
}

message ListPushesRequest {
  int64 page_size = 1;
  string cursor = 2;
  push.ListPushesRequest.OrderBy order_by = 3;
  push.ListPushesRequest.OrderDirection order_direction = 4;
  string search_keyword = 5;
}

message ListPushesResponse {
  repeated push.Push pushes = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message CreatePushRequest {
  repeated string tags = 1;
  string name = 2;
  bytes fcm_service_account = 3;
}

message CreatePushResponse {
  push.Push push = 1;
}

message GetPushRequest {
  string id = 1;
}

message GetPushResponse {
  push.Push push = 1;
}

message UpdatePushRequest {
  string id = 1;
  repeated string tags = 2;
  google.protobuf.StringValue name = 3;
  google.protobuf.BoolValue deleted = 4 [(grpc.gateway.protoc_gen_openapiv2
                                              .options.openapiv2_field) = {
    title: "deleted"
    description: "if true, the push notification will be deleted and other fields will be ignored."
  }];
}

message UpdatePushResponse {
  push.Push push = 1;
}

message CreateAccountV2Request {
  string email = 1;
  string name = 2;
  string avatar_image_url = 3;
  string organization_id = 4;
  account.AccountV2.Role.Organization organization_role = 5;
  repeated account.AccountV2.EnvironmentRole environment_roles = 6;
  string first_name = 7;
  string last_name = 8;
  string language = 9;
}

message CreateAccountV2Response {
  account.AccountV2 account = 1;
}

message UpdateAccountV2Request {
  string email = 1;
  string organization_id = 2;
  google.protobuf.StringValue name = 3;
  google.protobuf.StringValue avatar_image_url = 4;
  account.UpdateAccountV2Request.OrganizationRoleValue organization_role = 5;
  repeated account.AccountV2.EnvironmentRole environment_roles = 6;
  google.protobuf.StringValue first_name = 7;
  google.protobuf.StringValue last_name = 8;
  google.protobuf.StringValue language = 9;
  google.protobuf.Int64Value last_seen = 10;
  account.UpdateAccountV2Request.AccountV2Avatar avatar = 11;
  google.protobuf.BoolValue disabled = 12 [(grpc.gateway.protoc_gen_openapiv2
                                                .options.openapiv2_field) = {
    title: "disabled"
    description: "if disabled is true, the account will be disabled. If false, the account will be enabled."
  }];
  google.protobuf.BoolValue deleted = 13 [(grpc.gateway.protoc_gen_openapiv2
                                               .options.openapiv2_field) = {
    title: "deleted"
    description: "if true, the account will be deleted and other fields will be ignored."
  }];
}

message UpdateAccountV2Response {
  account.AccountV2 account = 1;
}

message GetAccountV2Request {
  string email = 1;
  string organization_id = 2;
}

message GetAccountV2Response {
  account.AccountV2 account = 1;
}

message GetAccountV2ByEnvironmentIDRequest {
  string email = 1;
  string environment_id = 2;
}

message GetAccountV2ByEnvironmentIDResponse {
  account.AccountV2 account = 1;
}

message GetMeRequest {
  string organization_id = 1;
}

message GetMeResponse {
  account.ConsoleAccount account = 1;
}

message ListAccountsV2Request {
  int64 page_size = 1;
  string cursor = 2;
  string organization_id = 3;
  account.ListAccountsV2Request.OrderBy order_by = 4;
  account.ListAccountsV2Request.OrderDirection order_direction = 5;
  string search_keyword = 6;
  google.protobuf.BoolValue disabled = 7;
  google.protobuf.Int32Value organization_role = 8;
  google.protobuf.StringValue environment_id = 9;
  google.protobuf.Int32Value environment_role = 10;
  repeated string teams = 11;
}

message ListAccountsV2Response {
  repeated account.AccountV2 accounts = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message GetCodeReferenceRequest {
  string id = 1;
}

message GetCodeReferenceResponse {
  bucketeer.coderef.CodeReference code_reference = 1;
}

message ListCodeReferencesRequest {
  int64 page_size = 1;
  string cursor = 2;
  bucketeer.coderef.ListCodeReferencesRequest.OrderBy order_by = 3;
  bucketeer.coderef.ListCodeReferencesRequest.OrderDirection order_direction =
      4;
  string search_keyword = 5;
  string feature_id = 6;
}

message ListCodeReferencesResponse {
  repeated bucketeer.coderef.CodeReference code_references = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message CreateCodeReferenceRequest {
  string feature_id = 1;
  string environment_id = 2;
  string file_path = 3;
  int32 line_number = 4;
  string code_snippet = 5;
  string content_hash = 6;
  repeated string aliases = 7;
  string repository_name = 8;
  string repository_owner = 9;
  bucketeer.coderef.CodeReference.RepositoryType repository_type = 10;
  string repository_branch = 11;
  string commit_hash = 12;
  string file_extension = 13;
}

message CreateCodeReferenceResponse {
  bucketeer.coderef.CodeReference code_reference = 1;
}

message UpdateCodeReferenceRequest {
  string id = 1;
  string file_path = 2;
  int32 line_number = 3;
  string code_snippet = 4;
  string content_hash = 5;
  repeated string aliases = 6;
  string repository_branch = 7;
  string commit_hash = 8;
  string file_extension = 9;
}

message UpdateCodeReferenceResponse {
  bucketeer.coderef.CodeReference code_reference = 1;
}

message DeleteCodeReferenceRequest {
  string id = 1;
}

message DeleteCodeReferenceResponse {}

message CreateSegmentRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  string description = 2;
}

message CreateSegmentResponse {
  feature.Segment segment = 1;
}

message GetSegmentRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetSegmentResponse {
  feature.Segment segment = 1;
}

message ListSegmentsRequest {
  int64 page_size = 1;
  string cursor = 2;
  feature.ListSegmentsRequest.OrderBy order_by = 3;
  feature.ListSegmentsRequest.OrderDirection order_direction = 4;
  string search_keyword = 5;
  google.protobuf.Int32Value status = 6;
  google.protobuf.BoolValue is_in_use_status = 7;
}

message ListSegmentsResponse {
  repeated feature.Segment segments = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message DeleteSegmentRequest {
  string id = 1;
}

message DeleteSegmentResponse {}

message UpdateSegmentRequest {
  string id = 1;
  google.protobuf.StringValue name = 2;
  google.protobuf.StringValue description = 3;
}

message UpdateSegmentResponse {
  feature.Segment segment = 1;
}

message BulkUploadSegmentUsersRequest {
  reserved 1;
  string segment_id = 2;
  bytes data = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "segment user ids separated by comma or new line"
      }];
  feature.SegmentUser.State state = 4;
}

message BulkUploadSegmentUsersResponse {}

message GetAuditLogRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetAuditLogResponse {
  auditlog.AuditLog audit_log = 1;
}

message ListAuditLogsRequest {
  int64 page_size = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        title: "page_size"
        description: "Page size for pagination, maximum allowed value is 200"
      }];
  string cursor = 2;
  auditlog.ListAuditLogsRequest.OrderBy order_by = 3;
  auditlog.ListAuditLogsRequest.OrderDirection order_direction = 4;
  string search_keyword = 5;
  int64 from = 6;
  int64 to = 7;
  google.protobuf.Int32Value entity_type = 8;
}

message ListAuditLogsResponse {
  repeated auditlog.AuditLog audit_logs = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message ListFeatureHistoryRequest {
  string feature_id = 1 [(google.api.field_behavior) = REQUIRED];
  int64 page_size = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        title: "page_size"
        description: "Page size for pagination, maximum allowed value is 200"
      }];
  string cursor = 3;
  auditlog.ListFeatureHistoryRequest.OrderBy order_by = 4;
  auditlog.ListFeatureHistoryRequest.OrderDirection order_direction = 5;
  string search_keyword = 6;
  int64 from = 7;
  int64 to = 8;
  string environment_id = 9;
}

message ListFeatureHistoryResponse {
  repeated auditlog.AuditLog audit_logs = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message GetAutoOpsRuleRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetAutoOpsRuleResponse {
  autoops.AutoOpsRule auto_ops_rule = 1;
}

message CreateAutoOpsRuleRequest {
  string feature_id = 1 [(google.api.field_behavior) = REQUIRED];
  autoops.OpsType ops_type = 2 [(google.api.field_behavior) = REQUIRED];
  repeated autoops.OpsEventRateClause ops_event_rate_clauses = 3;
  repeated autoops.DatetimeClause datetime_clauses = 4;
}

message CreateAutoOpsRuleResponse {
  autoops.AutoOpsRule auto_ops_rule = 1;
}

message ListAutoOpsRulesRequest {
  int64 page_size = 1;
  string cursor = 2;
  repeated string feature_ids = 3;
}

message ListAutoOpsRulesResponse {
  repeated autoops.AutoOpsRule auto_ops_rules = 1;
  string cursor = 2;
}

message StopAutoOpsRuleRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message StopAutoOpsRuleResponse {}

message DeleteAutoOpsRuleRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteAutoOpsRuleResponse {}

message UpdateAutoOpsRuleRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  repeated autoops.OpsEventRateClauseChange ops_event_rate_clause_changes = 2;
  repeated autoops.DatetimeClauseChange datetime_clause_changes = 11;
}

message UpdateAutoOpsRuleResponse {}

message ExecuteAutoOpsRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  string clause_id = 6 [(google.api.field_behavior) = REQUIRED];
}

message ExecuteAutoOpsResponse {
  bool already_triggered = 1;
}

message CreateProgressiveRolloutRequest {
  string feature_id = 1 [(google.api.field_behavior) = REQUIRED];
  optional autoops.ProgressiveRolloutManualScheduleClause
      progressive_rollout_manual_schedule_clause = 2;
  optional autoops.ProgressiveRolloutTemplateScheduleClause
      progressive_rollout_template_schedule_clause = 3;
}

message CreateProgressiveRolloutResponse {
  autoops.ProgressiveRollout progressive_rollout = 1;
}

message GetProgressiveRolloutRequest {
  string id = 1;
}

message GetProgressiveRolloutResponse {
  autoops.ProgressiveRollout progressive_rollout = 1;
}

message StopProgressiveRolloutRequest {
  string id = 1;
  autoops.ProgressiveRollout.StoppedBy stopped_by = 2;
}

message StopProgressiveRolloutResponse {}

message DeleteProgressiveRolloutRequest {
  string id = 1;
}

message DeleteProgressiveRolloutResponse {}

message ListProgressiveRolloutsRequest {
  int64 page_size = 1;
  string cursor = 2;
  repeated string feature_ids = 3;
  autoops.ListProgressiveRolloutsRequest.OrderBy order_by = 4;
  autoops.ListProgressiveRolloutsRequest.OrderDirection order_direction = 5;
  optional autoops.ProgressiveRollout.Status status = 6;
  optional autoops.ProgressiveRollout.Type type = 7;
}

message ListProgressiveRolloutsResponse {
  repeated autoops.ProgressiveRollout progressive_rollouts = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message ExecuteProgressiveRolloutRequest {
  string id = 1;
  string schedule_id = 2;
}

message ExecuteProgressiveRolloutResponse {}

message CreateTagRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message CreateTagResponse {
  tag.Tag tag = 1;
}

message DeleteTagRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteTagResponse {}

message ListTagsRequest {
  int64 page_size = 1;
  string cursor = 2;
  tag.ListTagsRequest.OrderBy order_by = 3;
  tag.ListTagsRequest.OrderDirection order_direction = 4;
  string search_keyword = 5;
  string organization_id = 6;
}

message ListTagsResponse {
  repeated tag.Tag tags = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message CreateTeamRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  string description = 2;
  string organization_id = 3 [(google.api.field_behavior) = REQUIRED];
}

message CreateTeamResponse {
  team.Team team = 1;
}

message DeleteTeamRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  string organization_id = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteTeamResponse {}

message ListTeamsRequest {
  int64 page_size = 1;
  string cursor = 2;
  team.ListTeamsRequest.OrderBy order_by = 3;
  team.ListTeamsRequest.OrderDirection order_direction = 4;
  string organization_id = 5 [(google.api.field_behavior) = REQUIRED];
  string search_keyword = 6;
}

message ListTeamsResponse {
  repeated team.Team teams = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message GetSubscriptionRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetSubscriptionResponse {
  notification.Subscription subscription = 1;
}

message ListSubscriptionsRequest {
  int64 page_size = 1;
  string cursor = 2;
  repeated notification.Subscription.SourceType source_types = 3;
  notification.ListSubscriptionsRequest.OrderBy order_by = 4;
  notification.ListSubscriptionsRequest.OrderDirection order_direction = 5;
  string search_keyword = 6;
  google.protobuf.BoolValue disabled = 7;
  string organization_id = 8 [(google.api.field_behavior) = REQUIRED];
  repeated string environment_ids = 9;
}

message ListSubscriptionsResponse {
  repeated notification.Subscription subscriptions = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message CreateSubscriptionRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  repeated notification.Subscription.SourceType source_types = 2
      [(google.api.field_behavior) = REQUIRED];
  notification.Recipient recipient = 3 [(google.api.field_behavior) = REQUIRED];
  repeated string feature_flag_tags = 4;
}

message CreateSubscriptionResponse {
  notification.Subscription subscription = 1;
}

message DeleteSubscriptionRequest {
  string id = 1;
}

message DeleteSubscriptionResponse {}

message UpdateSubscriptionRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  repeated notification.Subscription.SourceType source_types = 2;
  google.protobuf.StringValue name = 3;
  google.protobuf.BoolValue disabled = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        title: "disabled"
        description: "if true, the subscription is disabled, otherwise enabled."
      }];
  repeated string feature_flag_tags = 5;
}

message UpdateSubscriptionResponse {}

message CreateFlagTriggerRequest {
  string feature_id = 1 [(google.api.field_behavior) = REQUIRED];
  feature.FlagTrigger.Type type = 2 [(google.api.field_behavior) = REQUIRED];
  feature.FlagTrigger.Action action = 3
      [(google.api.field_behavior) = REQUIRED];
  string description = 4;
}

message CreateFlagTriggerResponse {
  feature.FlagTrigger flag_trigger = 1;
  string url = 2;
}

message DeleteFlagTriggerRequest {
  string id = 1;
}

message DeleteFlagTriggerResponse {}

message UpdateFlagTriggerRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.StringValue description = 2;
  bool reset = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "If true, reset the trigger hook URL."
      }];
  google.protobuf.BoolValue disabled = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "If true, disable the trigger."
      }];
}

message UpdateFlagTriggerResponse {
  string url = 1 [(grpc.gateway.protoc_gen_openapiv2.options
                       .openapiv2_field) = {
    description: "If reset is true, new generated trigger hook URL will be returned."
  }];
}

message GetFlagTriggerRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetFlagTriggerResponse {
  feature.FlagTrigger flag_trigger = 1;
  string url = 2;
}

message ListFlagTriggersRequest {
  string feature_id = 1;
  string cursor = 2;
  int32 page_size = 3;
  feature.ListFlagTriggersRequest.OrderBy order_by = 4;
  feature.ListFlagTriggersRequest.OrderDirection order_direction = 5;
}

message ListFlagTriggersResponse {
  repeated feature.ListFlagTriggersResponse.FlagTriggerWithUrl flag_triggers =
      1;
  string cursor = 2;
  int64 total_count = 3;
}

message GetGoalRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetGoalResponse {
  experiment.Goal goal = 1;
}

message ListGoalsRequest {
  int64 page_size = 1;
  string cursor = 2;
  experiment.ListGoalsRequest.OrderBy order_by = 3;
  experiment.ListGoalsRequest.OrderDirection order_direction = 4;
  string search_keyword = 5;
  google.protobuf.BoolValue is_in_use_status = 6;
  google.protobuf.BoolValue archived = 7;
  experiment.Goal.ConnectionType connection_type = 8;
}

message ListGoalsResponse {
  repeated experiment.Goal goals = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message CreateGoalRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  string description = 3;
  experiment.Goal.ConnectionType connection_type = 4;
}

message CreateGoalResponse {
  experiment.Goal goal = 1;
}

message DeleteGoalRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteGoalResponse {}

message UpdateGoalRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.StringValue name = 2;
  google.protobuf.StringValue description = 3;
  google.protobuf.BoolValue archived = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "if true, the goal will be archived"
      }];
}

message UpdateGoalResponse {
  experiment.Goal goal = 1;
}

message GetExperimentRequest {
  string id = 1;
}

message GetExperimentResponse {
  experiment.Experiment experiment = 1;
}

message ListExperimentsRequest {
  string feature_id = 1;
  google.protobuf.Int32Value feature_version = 2;
  int64 start_at = 3;
  int64 stop_at = 4;
  int64 page_size = 5;
  string cursor = 6;
  string maintainer = 7;
  experiment.ListExperimentsRequest.OrderBy order_by = 8;
  experiment.ListExperimentsRequest.OrderDirection order_direction = 9;
  string search_keyword = 10;
  google.protobuf.BoolValue archived = 11;
  repeated experiment.Experiment.Status statuses = 12;
}

message ListExperimentsResponse {
  repeated experiment.Experiment experiments = 1;
  string cursor = 2;
  int64 total_count = 3;
  experiment.ListExperimentsResponse.Summary summary = 4;
}

message CreateExperimentRequest {
  string feature_id = 1 [(google.api.field_behavior) = REQUIRED];
  int64 start_at = 2 [(google.api.field_behavior) = REQUIRED];
  int64 stop_at = 3 [(google.api.field_behavior) = REQUIRED];
  repeated string goal_ids = 4 [(google.api.field_behavior) = REQUIRED];
  string name = 5 [(google.api.field_behavior) = REQUIRED];
  string description = 6;
  string base_variation_id = 7 [(google.api.field_behavior) = REQUIRED];
}

message CreateExperimentResponse {
  experiment.Experiment experiment = 1;
}

message UpdateExperimentRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.StringValue name = 2;
  google.protobuf.StringValue description = 3;
  google.protobuf.Int64Value start_at = 4;
  google.protobuf.Int64Value stop_at = 5;
  google.protobuf.BoolValue archived = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "if true, the experiment will be archived"
      }];
  experiment.UpdateExperimentRequest.UpdatedStatus status = 7;
}

message UpdateExperimentResponse {
  experiment.Experiment experiment = 1;
}

message GetExperimentEvaluationCountRequest {
  int64 start_at = 1 [(google.api.field_behavior) = REQUIRED];
  int64 end_at = 2 [(google.api.field_behavior) = REQUIRED];
  string feature_id = 3 [(google.api.field_behavior) = REQUIRED];
  int32 feature_version = 4 [(google.api.field_behavior) = REQUIRED];
  repeated string variation_ids = 5;
}

message GetExperimentEvaluationCountResponse {
  string feature_id = 1;
  int32 feature_version = 2;
  repeated eventcounter.VariationCount variation_counts = 3;
}

message GetEvaluationTimeseriesCountRequest {
  string feature_id = 1 [(google.api.field_behavior) = REQUIRED];
  eventcounter.GetEvaluationTimeseriesCountRequest.TimeRange time_range = 2
      [(google.api.field_behavior) = REQUIRED];
}

message GetEvaluationTimeseriesCountResponse {
  repeated eventcounter.VariationTimeseries user_counts = 1;
  repeated eventcounter.VariationTimeseries event_counts = 2;
}

message GetExperimentResultRequest {
  string experiment_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetExperimentResultResponse {
  eventcounter.ExperimentResult experiment_result = 1;
}

message ListExperimentResultsRequest {
  string feature_id = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Int32Value feature_version = 2;
}

message ListExperimentResultsResponse {
  map<string, eventcounter.ExperimentResult> results = 1;
}

message GetExperimentGoalCountRequest {
  int64 start_at = 1 [(google.api.field_behavior) = REQUIRED];
  int64 end_at = 2 [(google.api.field_behavior) = REQUIRED];
  string goal_id = 3 [(google.api.field_behavior) = REQUIRED];
  string feature_id = 4 [(google.api.field_behavior) = REQUIRED];
  int32 feature_version = 5 [(google.api.field_behavior) = REQUIRED];
  repeated string variation_ids = 6;
}

message GetExperimentGoalCountResponse {
  string goal_id = 1;
  repeated eventcounter.VariationCount variation_counts = 2;
}

message GetOpsEvaluationUserCountRequest {
  string ops_rule_id = 1 [(google.api.field_behavior) = REQUIRED];
  string clause_id = 2 [(google.api.field_behavior) = REQUIRED];
  string feature_id = 3 [(google.api.field_behavior) = REQUIRED];
  int32 feature_version = 4 [(google.api.field_behavior) = REQUIRED];
  string variation_id = 5 [(google.api.field_behavior) = REQUIRED];
}

message GetOpsEvaluationUserCountResponse {
  string ops_rule_id = 1;
  string clause_id = 2;
  int64 count = 3;
}

message GetOpsGoalUserCountRequest {
  string ops_rule_id = 1 [(google.api.field_behavior) = REQUIRED];
  string clause_id = 2 [(google.api.field_behavior) = REQUIRED];
  string feature_id = 3 [(google.api.field_behavior) = REQUIRED];
  int32 feature_version = 4 [(google.api.field_behavior) = REQUIRED];
  string variation_id = 5 [(google.api.field_behavior) = REQUIRED];
}

message GetOpsGoalUserCountResponse {
  string ops_rule_id = 1;
  string clause_id = 2;
  int64 count = 3;
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: { title: "Bucketeer Gateway Service" version: "1.0" }
  schemes: HTTPS
  host: "ENDPOINT"
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "ApiKeyAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "authorization"
        description: "The API Key generated on the Admin Console."
      }
    }
  }
  security: {
    security_requirement: {
      key: "ApiKeyAuth"
      value: {}
    }
  }
  responses: {
    key: "400"
    value: {
      description: "Returned for bad requests that may have failed validation."
      schema: { json_schema: { ref: ".google.rpc.Status" } }
      examples: {
        key: "application/json"
        value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
      }
    }
  }
  responses: {
    key: "401"
    value: {
      description: "Request could not be authenticated (authentication required)."
      schema: { json_schema: { ref: ".google.rpc.Status" } }
      examples: {
        key: "application/json"
        value: '{ "code": 16, "message": "not authenticated", "details": [] }'
      }
    }
  }
  responses: {
    key: "403"
    value: {
      description: "Request does not have permission to access the resource."
      schema: { json_schema: { ref: ".google.rpc.Status" } }
      examples: {
        key: "application/json"
        value: '{ "code": 7, "message": "not authorized", "details": [] }'
      }
    }
  }
};

service Gateway {
  rpc GetEvaluations(GetEvaluationsRequest) returns (GetEvaluationsResponse) {
    option (google.api.http) = {
      post: "/get_evaluations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Evaluations",
      description: "Gets all the evaluations for a specific user. To call this API, you need a `CLIENT` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.get_evaluations"
    };
  }
  rpc GetEvaluation(GetEvaluationRequest) returns (GetEvaluationResponse) {
    option (google.api.http) = {
      post: "/get_evaluation"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Evaluation",
      description: "Gets a single evaluation for a specific user. To call this API, you need a `CLIENT` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.get_evaluation"
    };
  }
  rpc GetFeatureFlags(GetFeatureFlagsRequest)
      returns (GetFeatureFlagsResponse) {
    option (google.api.http) = {
      post: "/get_feature_flags"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Feature Flags",
      description: "Gets all the feature flag in an environment. To call this API, you need a `SERVER` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.get_feature_flags"
    };
  }
  rpc GetSegmentUsers(GetSegmentUsersRequest)
      returns (GetSegmentUsersResponse) {
    option (google.api.http) = {
      post: "/get_segment_users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Segment Users",
      description: "Gets all the segment users in an environment. To call this API, you need a `SERVER` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.get_segment_users"
    };
  }
  rpc RegisterEvents(RegisterEventsRequest) returns (RegisterEventsResponse) {
    option (google.api.http) = {
      post: "/register_events"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Register Events",
      description: "This API is for reporting Goal events. To call this API, you need a `CLIENT` or `SERVER` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.register_events"
    };
  }
  rpc Track(TrackRequest) returns (TrackResponse) {
    option (google.api.http) = {
      get: "/track"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Track",
      description: "This API is an integration for Google Tab Manager to report Goal events. To call this API, you need a `CLIENT` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.track"
    };
  }
  rpc DebugEvaluateFeatures(DebugEvaluateFeaturesRequest)
      returns (DebugEvaluateFeaturesResponse) {
    option (google.api.http) = {
      post: "/v1/debug_evaluate_features"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Debug Feature Evaluations",
      description: "This API is used to debug one or more end-user evaluations. To call this API, you need a `READ` API Key role.",
      tags: "Feature Flags",
      operation_id: "api.gateway.v1.features.debug_evaluate_features"
    };
  }
  rpc CreateFeature(CreateFeatureRequest) returns (CreateFeatureResponse) {
    option (google.api.http) = {
      post: "/v1/feature"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create a new Feature Flag. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Feature Flags",
      operation_id: "api.gateway.v1.features.create"
    };
  }
  rpc GetFeature(GetFeatureRequest) returns (GetFeatureResponse) {
    option (google.api.http) = {
      get: "/v1/feature"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get",
      description: "Get a Feature Flag. To call this API, you need a `READ` API Key role.",
      tags: "Feature Flags",
      operation_id: "api.gateway.v1.features.get"
    };
  }
  rpc ListFeatures(ListFeaturesRequest) returns (ListFeaturesResponse) {
    option (google.api.http) = {
      get: "/v1/features"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "List Feature Flags. To call this API, you need a `READ` API Key role.",
      tags: "Feature Flags",
      operation_id: "api.gateway.v1.features.list"
    };
  }
  rpc UpdateFeature(UpdateFeatureRequest) returns (UpdateFeatureResponse) {
    option (google.api.http) = {
      patch: "/v1/feature"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update",
      description: "Update a Feature Flag. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Feature Flags",
      operation_id: "api.gateway.v1.features.update"
    };
  }
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/ping"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Ping",
      description: "Ping the server to check its availability.",
      tags: "Utility",
      operation_id: "api.gateway.ping",
      security: {},
    };
  };
  rpc ListPushes(ListPushesRequest) returns (ListPushesResponse) {
    option (google.api.http) = {
      get: "/v1/pushes"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "List pushes. To call this API, you need a `READ` API Key role.",
      tags: "Pushes",
      operation_id: "api.gateway.v1.pushes.list"
    };
  }
  rpc CreatePush(CreatePushRequest) returns (CreatePushResponse) {
    option (google.api.http) = {
      post: "/v1/push"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create a new Push notification through Google Firebase Cloud Messaging (FCM). To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Pushes",
      operation_id: "api.gateway.v1.pushes.create"
    };
  }
  rpc GetPush(GetPushRequest) returns (GetPushResponse) {
    option (google.api.http) = {
      get: "/v1/push"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get",
      description: "Get a Push notification. To call this API, you need a `READ` API Key role.",
      tags: "Pushes",
      operation_id: "api.gateway.v1.pushes.get"
    };
  }
  rpc UpdatePush(UpdatePushRequest) returns (UpdatePushResponse) {
    option (google.api.http) = {
      patch: "/v1/push"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update",
      description: "Update a Push notification. To call this API, you a `WRITE` or `ADMIN` API Key role.",
      tags: "Pushes",
      operation_id: "api.gateway.v1.pushes.update"
    };
  }
  rpc CreateAccountV2(CreateAccountV2Request)
      returns (CreateAccountV2Response) {
    option (google.api.http) = {
      post: "/v1/account"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create a new Account. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Account",
      operation_id: "api.gateway.v1.account.create"
    };
  }
  rpc UpdateAccountV2(UpdateAccountV2Request)
      returns (UpdateAccountV2Response) {
    option (google.api.http) = {
      patch: "/v1/account"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update",
      description: "Update an Account. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Account",
      operation_id: "api.gateway.v1.account.update"
    };
  }
  rpc GetAccountV2(GetAccountV2Request) returns (GetAccountV2Response) {
    option (google.api.http) = {
      get: "/v1/account"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get by Organization ID",
      description: "Get an Account. To call this API, you need a `READ` API Key role.",
      tags: "Account",
      operation_id: "api.gateway.v1.account.get"
    };
  }
  rpc GetAccountV2ByEnvironmentID(GetAccountV2ByEnvironmentIDRequest)
      returns (GetAccountV2ByEnvironmentIDResponse) {
    option (google.api.http) = {
      get: "/v1/account/get_account_by_environment"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get by Environment ID",
      description: "Get an Account by Environment ID. To call this API, you need a `READ` API Key role.",
      tags: "Account",
      operation_id: "api.gateway.v1.account.get_by_environment_id"
    };
  }
  rpc GetMe(GetMeRequest) returns (GetMeResponse) {
    option (google.api.http) = {
      get: "/v1/account/get_me"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Service Account",
      description: "Get the current Account. To call this API, you need a `READ` API Key role.",
      tags: "Account",
      operation_id: "api.gateway.v1.account.get_me"
    };
  }
  rpc ListAccountsV2(ListAccountsV2Request) returns (ListAccountsV2Response) {
    option (google.api.http) = {
      get: "/v1/accounts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "Get list Accounts. To call this API, you need a `READ` API Key role.",
      tags: "Account",
      operation_id: "api.gateway.v1.account.list"
    };
  }
  rpc GetCodeReference(GetCodeReferenceRequest)
      returns (GetCodeReferenceResponse) {
    option (google.api.http) = {
      get: "/v1/code_reference"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get",
      description: "Get a code reference. To call this API, you need a `READ` API Key role.",
      tags: "Code References",
      operation_id: "api.gateway.v1.code_references.get"
    };
  }
  rpc ListCodeReferences(ListCodeReferencesRequest)
      returns (ListCodeReferencesResponse) {
    option (google.api.http) = {
      get: "/v1/code_references"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "List code references. To call this API, you need a `READ` API Key role.",
      tags: "Code References",
      operation_id: "api.gateway.v1.code_references.list"
    };
  }
  rpc CreateCodeReference(CreateCodeReferenceRequest)
      returns (CreateCodeReferenceResponse) {
    option (google.api.http) = {
      post: "/v1/code_reference"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create a new code reference. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Code References",
      operation_id: "api.gateway.v1.code_references.create"
    };
  }
  rpc UpdateCodeReference(UpdateCodeReferenceRequest)
      returns (UpdateCodeReferenceResponse) {
    option (google.api.http) = {
      patch: "/v1/code_reference"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update",
      description: "Update a code reference. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Code References",
      operation_id: "api.gateway.v1.code_references.update"
    };
  }
  rpc DeleteCodeReference(DeleteCodeReferenceRequest)
      returns (DeleteCodeReferenceResponse) {
    option (google.api.http) = {
      delete: "/v1/code_reference"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete",
      description: "Delete a code reference. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Code References",
      operation_id: "api.gateway.v1.code_references.delete"
    };
  }
  rpc CreateSegment(CreateSegmentRequest) returns (CreateSegmentResponse) {
    option (google.api.http) = {
      post: "/v1/segment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create a new Segment. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Segments",
      operation_id: "api.gateway.v1.segments.create"
    };
  }
  rpc GetSegment(GetSegmentRequest) returns (GetSegmentResponse) {
    option (google.api.http) = {
      get: "/v1/segment"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get",
      description: "Get a Segment. To call this API, you need a `READ` API Key role.",
      tags: "Segments",
      operation_id: "api.gateway.v1.segments.get"
    };
  }
  rpc ListSegments(ListSegmentsRequest) returns (ListSegmentsResponse) {
    option (google.api.http) = {
      get: "/v1/segments"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "List Segments. To call this API, you need a `READ` API Key role.",
      tags: "Segments",
      operation_id: "api.gateway.v1.segments.list"
    };
  }
  rpc DeleteSegment(DeleteSegmentRequest) returns (DeleteSegmentResponse) {
    option (google.api.http) = {
      delete: "/v1/segment"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete",
      description: "Delete a Segment. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Segments",
      operation_id: "api.gateway.v1.segments.delete"
    };
  }
  rpc UpdateSegment(UpdateSegmentRequest) returns (UpdateSegmentResponse) {
    option (google.api.http) = {
      patch: "/v1/segment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update",
      description: "Update a Segment. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Segments",
      operation_id: "api.gateway.v1.segments.update"
    };
  }
  rpc BulkUploadSegmentUsers(BulkUploadSegmentUsersRequest)
      returns (BulkUploadSegmentUsersResponse) {
    option (google.api.http) = {
      post: "/v1/segment/bulk_upload_users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Bulk Upload Segment Users",
      description: "Bulk upload users to a Segment. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Segments",
      operation_id: "api.gateway.v1.segments.bulk_upload_users"
    };
  }
  rpc GetAuditLog(GetAuditLogRequest) returns (GetAuditLogResponse) {
    option (google.api.http) = {
      get: "/v1/audit_log"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Audit Log",
      description: "Get an Audit Log by ID. To call this API, you need a `READ` API Key role.",
      tags: "Audit Logs",
      operation_id: "api.gateway.v1.audit_logs.get"
    };
  }
  rpc ListAuditLogs(ListAuditLogsRequest) returns (ListAuditLogsResponse) {
    option (google.api.http) = {
      get: "/v1/audit_logs"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Audit Logs",
      description: "List Audit Logs. To call this API, you need a `READ` API Key role.",
      tags: "Audit Logs",
      operation_id: "api.gateway.v1.audit_logs.list"
    };
  }
  rpc ListFeatureHistory(ListFeatureHistoryRequest)
      returns (ListFeatureHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/feature_history"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Feature History",
      description: "List Feature History. To call this API, you need a `READ` API Key role.",
      tags: "Audit Logs",
      operation_id: "api.gateway.v1.feature_history.list"
    };
  }
  rpc GetAutoOpsRule(GetAutoOpsRuleRequest) returns (GetAutoOpsRuleResponse) {
    option (google.api.http) = {
      get: "/v1/auto_ops_rule"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Auto Ops Rule",
      description: "Get an Auto Ops Rule by ID. To call this API, you need a `READ` API Key role.",
      tags: "Auto Ops Rules",
      operation_id: "api.gateway.v1.auto_ops_rules.get"
    };
  }
  rpc CreateAutoOpsRule(CreateAutoOpsRuleRequest)
      returns (CreateAutoOpsRuleResponse) {
    option (google.api.http) = {
      post: "/v1/auto_ops_rule"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Auto Ops Rule",
      description: "Create a new Auto Ops Rule. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Auto Ops Rules",
      operation_id: "api.gateway.v1.auto_ops_rules.create"
    };
  }
  rpc ListAutoOpsRules(ListAutoOpsRulesRequest)
      returns (ListAutoOpsRulesResponse) {
    option (google.api.http) = {
      get: "/v1/auto_ops_rules"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Auto Ops Rules",
      description: "List Auto Ops Rules. To call this API, you need a `READ` API Key role.",
      tags: "Auto Ops Rules",
      operation_id: "api.gateway.v1.auto_ops_rules.list"
    };
  }
  rpc StopAutoOpsRule(StopAutoOpsRuleRequest)
      returns (StopAutoOpsRuleResponse) {
    option (google.api.http) = {
      post: "/v1/auto_ops_rule/stop"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Stop Auto Ops Rule",
      description: "Stop an Auto Ops Rule. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Auto Ops Rules",
      operation_id: "api.gateway.v1.auto_ops_rules.stop"
    };
  }
  rpc DeleteAutoOpsRule(DeleteAutoOpsRuleRequest)
      returns (DeleteAutoOpsRuleResponse) {
    option (google.api.http) = {
      delete: "/v1/auto_ops_rule"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Auto Ops Rule",
      description: "Delete an Auto Ops Rule. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Auto Ops Rules",
      operation_id: "api.gateway.v1.auto_ops_rules.delete"
    };
  }
  rpc UpdateAutoOpsRule(UpdateAutoOpsRuleRequest)
      returns (UpdateAutoOpsRuleResponse) {
    option (google.api.http) = {
      patch: "/v1/auto_ops_rule"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Auto Ops Rule",
      description: "Update an Auto Ops Rule. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Auto Ops Rules",
      operation_id: "api.gateway.v1.auto_ops_rules.update"
    };
  }
  rpc ExecuteAutoOps(ExecuteAutoOpsRequest) returns (ExecuteAutoOpsResponse) {
    option (google.api.http) = {
      post: "/v1/auto_ops_rule/execute"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Execute Auto Ops Rule",
      description: "Execute an Auto Ops Rule. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Auto Ops Rules",
      operation_id: "api.gateway.v1.auto_ops_rules.execute"
    };
  }
  rpc CreateProgressiveRollout(CreateProgressiveRolloutRequest)
      returns (CreateProgressiveRolloutResponse) {
    option (google.api.http) = {
      post: "/v1/progressive_rollout"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Progressive Rollout",
      description: "Create a new Progressive Rollout. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Progressive Rollouts",
      operation_id: "api.gateway.v1.progressive_rollouts.create"
    };
  }
  rpc GetProgressiveRollout(GetProgressiveRolloutRequest)
      returns (GetProgressiveRolloutResponse) {
    option (google.api.http) = {
      get: "/v1/progressive_rollout"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Progressive Rollout",
      description: "Get a Progressive Rollout by ID. To call this API, you need a `READ` API Key role.",
      tags: "Progressive Rollouts",
      operation_id: "api.gateway.v1.progressive_rollouts.get"
    };
  }
  rpc StopProgressiveRollout(StopProgressiveRolloutRequest)
      returns (StopProgressiveRolloutResponse) {
    option (google.api.http) = {
      patch: "/v1/progressive_rollout/stop"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Stop Progressive Rollout",
      description: "Stop a Progressive Rollout. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Progressive Rollouts",
      operation_id: "api.gateway.v1.progressive_rollouts.stop"
    };
  }
  rpc DeleteProgressiveRollout(DeleteProgressiveRolloutRequest)
      returns (DeleteProgressiveRolloutResponse) {
    option (google.api.http) = {
      delete: "/v1/progressive_rollout"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Progressive Rollout",
      description: "Delete a Progressive Rollout. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Progressive Rollouts",
      operation_id: "api.gateway.v1.progressive_rollouts.delete"
    };
  }
  rpc ListProgressiveRollouts(ListProgressiveRolloutsRequest)
      returns (ListProgressiveRolloutsResponse) {
    option (google.api.http) = {
      get: "/v1/progressive_rollouts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Progressive Rollouts",
      description: "List Progressive Rollouts. To call this API, you need a `READ` API Key role.",
      tags: "Progressive Rollouts",
      operation_id: "api.gateway.v1.progressive_rollouts.list"
    };
  }
  rpc ExecuteProgressiveRollout(ExecuteProgressiveRolloutRequest)
      returns (ExecuteProgressiveRolloutResponse) {
    option (google.api.http) = {
      post: "/v1/progressive_rollout/execute"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Execute Progressive Rollout",
      description: "Execute a Progressive Rollout. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Progressive Rollouts",
      operation_id: "api.gateway.v1.progressive_rollouts.execute"
    };
  }
  rpc CreateTag(CreateTagRequest) returns (CreateTagResponse) {
    option (google.api.http) = {
      post: "/v1/tag"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Tag",
      description: "Create a new Tag. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Tags",
      operation_id: "api.gateway.v1.tags.create"
    };
  }
  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse) {
    option (google.api.http) = {
      delete: "/v1/tag"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Tag",
      description: "Delete a Tag. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Tags",
      operation_id: "api.gateway.v1.tags.delete"
    };
  }
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {
    option (google.api.http) = {
      get: "/v1/tags"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Tags",
      description: "List Tags. To call this API, you need a `READ` API Key role.",
      tags: "Tags",
      operation_id: "api.gateway.v1.tags.list"
    };
  }
  rpc CreateTeam(CreateTeamRequest) returns (CreateTeamResponse) {
    option (google.api.http) = {
      post: "/v1/team"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Team",
      description: "Create a new Team. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Teams",
      operation_id: "api.gateway.v1.teams.create"
    };
  }
  rpc DeleteTeam(DeleteTeamRequest) returns (DeleteTeamResponse) {
    option (google.api.http) = {
      delete: "/v1/team"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Team",
      description: "Delete a Team. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Teams",
      operation_id: "api.gateway.v1.teams.delete"
    };
  }
  rpc ListTeams(ListTeamsRequest) returns (ListTeamsResponse) {
    option (google.api.http) = {
      get: "/v1/teams"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Teams",
      description: "List Teams. To call this API, you need a `READ` API Key role.",
      tags: "Teams",
      operation_id: "api.gateway.v1.teams.list"
    };
  }
  rpc GetSubscription(GetSubscriptionRequest)
      returns (GetSubscriptionResponse) {
    option (google.api.http) = {
      get: "/v1/subscription"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Subscription",
      description: "Get a Subscription by ID. To call this API, you need a `READ` API Key role.",
      tags: "Subscriptions",
      operation_id: "api.gateway.v1.subscriptions.get"
    };
  }
  rpc ListSubscriptions(ListSubscriptionsRequest)
      returns (ListSubscriptionsResponse) {
    option (google.api.http) = {
      get: "/v1/subscriptions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Subscriptions",
      description: "List Subscriptions. To call this API, you need a `READ` API Key role.",
      tags: "Subscriptions",
      operation_id: "api.gateway.v1.subscriptions.list"
    };
  }
  rpc CreateSubscription(CreateSubscriptionRequest)
      returns (CreateSubscriptionResponse) {
    option (google.api.http) = {
      post: "/v1/subscription"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Subscription",
      description: "Create a new Subscription. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Subscriptions",
      operation_id: "api.gateway.v1.subscriptions.create"
    };
  }
  rpc DeleteSubscription(DeleteSubscriptionRequest)
      returns (DeleteSubscriptionResponse) {
    option (google.api.http) = {
      delete: "/v1/subscription"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Subscription",
      description: "Delete a Subscription. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Subscriptions",
      operation_id: "api.gateway.v1.subscriptions.delete"
    };
  }
  rpc UpdateSubscription(UpdateSubscriptionRequest)
      returns (UpdateSubscriptionResponse) {
    option (google.api.http) = {
      patch: "/v1/subscription"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Subscription",
      description: "Update a Subscription. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Subscriptions",
      operation_id: "api.gateway.v1.subscriptions.update"
    };
  }
  rpc CreateFlagTrigger(CreateFlagTriggerRequest)
      returns (CreateFlagTriggerResponse) {
    option (google.api.http) = {
      post: "/v1/flag_trigger"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Flag Trigger",
      description: "Create a new Flag Trigger. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Flag Triggers",
      operation_id: "api.gateway.v1.flag_triggers.create"
    };
  }
  rpc DeleteFlagTrigger(DeleteFlagTriggerRequest)
      returns (DeleteFlagTriggerResponse) {
    option (google.api.http) = {
      delete: "/v1/flag_trigger"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Flag Trigger",
      description: "Delete a Flag Trigger. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Flag Triggers",
      operation_id: "api.gateway.v1.flag_triggers.delete"
    };
  }
  rpc UpdateFlagTrigger(UpdateFlagTriggerRequest)
      returns (UpdateFlagTriggerResponse) {
    option (google.api.http) = {
      patch: "/v1/flag_trigger"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Flag Trigger",
      description: "Update a Flag Trigger. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Flag Triggers",
      operation_id: "api.gateway.v1.flag_triggers.update"
    };
  }
  rpc GetFlagTrigger(GetFlagTriggerRequest) returns (GetFlagTriggerResponse) {
    option (google.api.http) = {
      get: "/v1/flag_trigger"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Flag Trigger",
      description: "Get a Flag Trigger by ID. To call this API, you need a `READ` API Key role.",
      tags: "Flag Triggers",
      operation_id: "api.gateway.v1.flag_triggers.get"
    };
  }
  rpc ListFlagTriggers(ListFlagTriggersRequest)
      returns (ListFlagTriggersResponse) {
    option (google.api.http) = {
      get: "/v1/flag_triggers"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Flag Triggers",
      description: "List Flag Triggers. To call this API, you need a `READ` API Key role.",
      tags: "Flag Triggers",
      operation_id: "api.gateway.v1.flag_triggers.list"
    };
  }
  rpc GetExperiment(GetExperimentRequest) returns (GetExperimentResponse) {
    option (google.api.http) = {
      get: "/v1/experiment"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Experiment",
      description: "Get an Experiment by ID. To call this API, you need a `READ` API Key role.",
      tags: "Experiments",
      operation_id: "api.gateway.v1.experiments.get"
    };
  }
  rpc ListExperiments(ListExperimentsRequest)
      returns (ListExperimentsResponse) {
    option (google.api.http) = {
      get: "/v1/experiments"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Experiments",
      description: "List Experiments. To call this API, you need a `READ` API Key role.",
      tags: "Experiments",
      operation_id: "api.gateway.v1.experiments.list"
    };
  }
  rpc CreateExperiment(CreateExperimentRequest)
      returns (CreateExperimentResponse) {
    option (google.api.http) = {
      post: "/v1/experiment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Experiment",
      description: "Create a new Experiment. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Experiments",
      operation_id: "api.gateway.v1.experiments.create"
    };
  }
  rpc UpdateExperiment(UpdateExperimentRequest)
      returns (UpdateExperimentResponse) {
    option (google.api.http) = {
      patch: "/v1/experiment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Experiment",
      description: "Update an Experiment. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Experiments",
      operation_id: "api.gateway.v1.experiments.update"
    };
  }
  rpc GetGoal(GetGoalRequest) returns (GetGoalResponse) {
    option (google.api.http) = {
      get: "/v1/goal"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Goal",
      description: "Get a Goal by ID. To call this API, you need a `READ` API Key role.",
      tags: "Goals",
      operation_id: "api.gateway.v1.goals.get"
    };
  }
  rpc ListGoals(ListGoalsRequest) returns (ListGoalsResponse) {
    option (google.api.http) = {
      get: "/v1/goals"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Goals",
      description: "List Goals. To call this API, you need a `READ` API Key role.",
      tags: "Goals",
      operation_id: "api.gateway.v1.goals.list"
    };
  }
  rpc CreateGoal(CreateGoalRequest) returns (CreateGoalResponse) {
    option (google.api.http) = {
      post: "/v1/goal"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Goal",
      description: "Create a new Goal. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Goals",
      operation_id: "api.gateway.v1.goals.create"
    };
  }
  rpc DeleteGoal(DeleteGoalRequest) returns (DeleteGoalResponse) {
    option (google.api.http) = {
      delete: "/v1/goal"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Goal",
      description: "Delete a Goal. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Goals",
      operation_id: "api.gateway.v1.goals.delete"
    };
  }
  rpc UpdateGoal(UpdateGoalRequest) returns (UpdateGoalResponse) {
    option (google.api.http) = {
      patch: "/v1/goal"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Goal",
      description: "Update a Goal. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Goals",
      operation_id: "api.gateway.v1.goals.update"
    };
  }

  rpc GetExperimentEvaluationCount(GetExperimentEvaluationCountRequest)
      returns (GetExperimentEvaluationCountResponse) {
    option (google.api.http) = {
      get: "/v1/event_counter/experiment_evaluation_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Experiment Evaluation Count",
      description: "Get the evaluation count for an Experiment. To call this API, you need a `READ` API Key role.",
      tags: "Experiments",
      operation_id: "api.gateway.v1.event_counter.evaluation_count.get"
    };
  }
  rpc GetEvaluationTimeseriesCount(GetEvaluationTimeseriesCountRequest)
      returns (GetEvaluationTimeseriesCountResponse) {
    option (google.api.http) = {
      get: "/v1/event_counter/evaluation_timeseries_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Evaluation Timeseries Count",
      description: "Get the evaluation timeseries count for an Experiment. To call this API, you need a `READ` API Key role.",
      tags: "Experiments",
      operation_id: "api.gateway.v1.event_counter.evaluation_timeseries_count.get"
    };
  }
  rpc GetExperimentResult(GetExperimentResultRequest)
      returns (GetExperimentResultResponse) {
    option (google.api.http) = {
      get: "/v1/event_counter/experiment_result"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Experiment Result",
      description: "Get the result for an Experiment. To call this API, you need a `READ` API Key role.",
      tags: "Experiments",
      operation_id: "api.gateway.v1.event_counter.experiment_result.get"
    };
  }
  rpc ListExperimentResults(ListExperimentResultsRequest)
      returns (ListExperimentResultsResponse) {
    option (google.api.http) = {
      get: "/v1/event_counter/experiment_results"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Experiment Results",
      description: "List the results for Experiments. To call this API, you need a `READ` API Key role.",
      tags: "Experiments",
      operation_id: "api.gateway.v1.event_counter.experiment_result.list"
    };
  }
  rpc GetExperimentGoalCount(GetExperimentGoalCountRequest)
      returns (GetExperimentGoalCountResponse) {
    option (google.api.http) = {
      get: "/v1/event_counter/experiment_goal_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Experiment Goal Count",
      description: "Get the goal count for an Experiment. To call this API, you need a `READ` API Key role.",
      tags: "Experiments",
      operation_id: "api.gateway.v1.event_counter.goal_count.get"
    };
  }
  rpc GetOpsEvaluationUserCount(GetOpsEvaluationUserCountRequest)
      returns (GetOpsEvaluationUserCountResponse) {
    option (google.api.http) = {
      get: "/v1/event_counter/ops_evaluation_user_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Ops Evaluation User Count",
      description: "Get the user count for an Ops Evaluation. To call this API, you need a `READ` API Key role.",
      tags: "Experiments",
      operation_id: "api.gateway.v1.event_counter.ops_evaluation_user_count.get"
    };
  }
  rpc GetOpsGoalUserCount(GetOpsGoalUserCountRequest)
      returns (GetOpsGoalUserCountResponse) {
    option (google.api.http) = {
      get: "/v1/event_counter/ops_goal_user_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Ops Goal User Count",
      description: "Get the user count for an Ops Goal. To call this API, you need a `READ` API Key role.",
      tags: "Event Counter",
      operation_id: "api.gateway.v1.event_counter.get_ops_goal_user_count"
    };
  }
}
