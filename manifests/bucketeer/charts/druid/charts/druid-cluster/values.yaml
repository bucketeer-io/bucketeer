namespace:
spec:
  imagePullSecrets:
  image: ghcr.io/bucketeer-io/druid:0.5.0
  nodeSelector: {}
  jvmOptions: |-
    -server
    -XX:MaxDirectMemorySize=10240g
    -Duser.timezone=UTC
    -Dfile.encoding=UTF-8
    -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
    -Dorg.jboss.logging.provider=slf4j
    -Dnet.spy.log.LoggerImpl=net.spy.memcached.compat.log.SLF4JLogger
    -Dlog4j.shutdownCallbackRegistry=org.apache.druid.common.config.Log4jShutdown
    -Dlog4j.shutdownHookEnabled=true
    -XX:+UseG1GC
    -XX:MaxGCPauseMillis=200
    -XX:+ExitOnOutOfMemoryError
  log4jConfig: |-
    <?xml version="1.0" encoding="UTF-8" ?>
    <Configuration status="WARN">
        <Appenders>
            <Console name="Console" target="SYSTEM_OUT">
                <PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/>
            </Console>
        </Appenders>
        <Loggers>
            <Root level="info">
                <AppenderRef ref="Console"/>
            </Root>
        </Loggers>
    </Configuration>
  commonRuntimeProperties: |
    druid.indexing.doubleStorage=double

    # Extensions
    druid.extensions.loadList=["druid-basic-security","druid-datasketches","druid-distinctcount","druid-google-extensions","druid-kafka-indexing-service","druid-stats","mysql-metadata-storage"]

    # Service discovery
    druid.router.defaultBrokerServiceName=druid/broker
    druid.selectors.indexing.serviceName=druid/overlord
    druid.selectors.coordinator.serviceName=druid/coordinator

    druid.sql.enable=true

    # Authenticator
    druid.auth.authenticatorChain=["BasicMetadataAuthenticator"]
    druid.auth.authenticator.BasicMetadataAuthenticator.type=basic
    druid.auth.authenticator.BasicMetadataAuthenticator.initialAdminPassword=password
    druid.auth.authenticator.BasicMetadataAuthenticator.initialInternalClientPassword=password
    druid.auth.authenticator.BasicMetadataAuthenticator.credentialsValidator.type=metadata
    druid.auth.authenticator.BasicMetadataAuthenticator.skipOnFailure=false
    druid.auth.authenticator.BasicMetadataAuthenticator.authorizerName=BasicMetadataAuthorizer
    # Escalator
    druid.escalator.type=basic
    druid.escalator.internalClientUsername=username
    druid.escalator.internalClientPassword=password
    druid.escalator.authorizerName=BasicMetadataAuthorizer
    # Authorizer
    druid.auth.authorizers=["BasicMetadataAuthorizer"]
    druid.auth.authorizer.BasicMetadataAuthorizer.type=basic

    # Monitoring
    druid.monitoring.monitors=[]
    druid.emitter.http.recipientBaseUrl=http://druid-exporter.monitoring.svc.cluster.local:8080/druid
    druid.emitter=http
  deepStorage:
    spec:
      properties: |-
        druid.storage.type=google
        druid.google.bucket=example-druid-deep-storage
    type: default
  metadataStore:
    spec:
      properties: |-
        druid.metadata.storage.type=mysql
        druid.metadata.storage.connector.connectURI=jdbc:mysql://druid-mysql.example.com/druid
        druid.metadata.storage.connector.user=user
        druid.metadata.storage.connector.password=password
        druid.metadata.storage.connector.createTables=true
    type: default
  zookeeper:
    spec:
      properties: |-
        druid.zk.service.host=druid-zookeeper-client.druid.svc.cluster.local
        druid.zk.paths.base=/druid
    type: default
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /var/secrets/google/token
  volumeMounts:
    - name: google-cloud-key
      mountPath: /var/secrets/google
  volumes:
    - name: google-cloud-key
      secret:
        secretName: druid-gcp-sa-key

  nodes:
    brokers:
      runtimeProperties: |
        druid.service=druid/broker
        # HTTP server threads
        druid.broker.http.numConnections=5
        druid.server.http.numThreads=10
        # Processing threads and buffers
        druid.processing.buffer.sizeBytes=1000
        druid.processing.numMergeBuffers=1
        druid.processing.numThreads=1

        # Monitoring
        druid.monitoring.monitors=["org.apache.druid.server.metrics.QueryCountStatsMonitor"]
      extraJvmOptions: |-
        -Xmx1G
        -Xms1G
      resources: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  nodeSpecUniqueStr: druid-cluster-brokers
      podDisruptionBudgetSpec:
        maxUnavailable: 1
      hpAutoscaler:
        minReplicas: 1
        maxReplicas: 1
        metrics:
          - type: Resource
            resource:
              name: cpu
              targetAverageUtilization: 50

    coordinators:
      runtimeProperties: |
        druid.service=druid/coordinator
        # HTTP server threads
        druid.coordinator.startDelay=PT30S
        druid.coordinator.period=PT30S
        # Configure this coordinator to also run as Overlord
        druid.coordinator.asOverlord.enable=false
        # druid.coordinator.asOverlord.overlordService=druid/overlord
        druid.indexer.queue.startDelay=PT30S
        druid.indexer.runner.type=local
      extraJvmOptions: |-
        -Xmx1G
        -Xms1G
      resources: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  nodeSpecUniqueStr: druid-cluster-coordinators
      podDisruptionBudgetSpec:
        maxUnavailable: 1
      hpAutoscaler:
        minReplicas: 2
        maxReplicas: 2
        metrics:
          - type: Resource
            resource:
              name: cpu
              targetAverageUtilization: 60

    overlords:
      nodeConfigMountPath: /opt/druid/conf/druid/cluster/master/overlord
      runtimeProperties: |-
        druid.service=druid/overlord
        druid.indexer.queue.startDelay=PT30S
        druid.indexer.runner.type=remote
        druid.indexer.storage.type=metadata

        # Monitoring
        druid.monitoring.monitors=["org.apache.druid.server.metrics.TaskCountStatsMonitor"]
      extraJvmOptions: |-
        -Xmx4G
        -Xms4G
      resources: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  nodeSpecUniqueStr: druid-cluster-overlords
      podDisruptionBudgetSpec:
        maxUnavailable: 1
      hpAutoscaler:
        maxReplicas: 2
        minReplicas: 2
        metrics:
          - type: Resource
            resource:
              name: cpu
              targetAverageUtilization: 60
          - type: Resource
            resource:
              name: memory
              targetAverageUtilization: 60

    historicals:
      runtimeProperties: |
        druid.service=druid/historical
        druid.server.http.numThreads=5

        # Memory tuning and resource limits for groupBy v2
        druid.processing.buffer.sizeBytes=1000
        druid.query.groupBy.maxOnDiskStorage=100000

        druid.processing.numMergeBuffers=1
        druid.processing.numThreads=1
        # Segment storage
        druid.segmentCache.locations=[{\"path\":\"/druid/data/segments\",\"maxSize\":10737418240}]
        druid.server.maxSize=10737418240

        # Monitoring
        druid.monitoring.monitors=["org.apache.druid.server.metrics.HistoricalMetricsMonitor"]
      extraJvmOptions: |-
        -Xmx1G
        -Xms1G
      volumeClaimTemplates: {}
      volumeMounts:
        - mountPath: /druid/data
          name: data-volume
      resources: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  nodeSpecUniqueStr: druid-cluster-historicals
      podDisruptionBudgetSpec:
        maxUnavailable: 1
      hpAutoscaler:
        maxReplicas: 1
        minReplicas: 1
        metrics:
          - type: Resource
            resource:
              name: cpu
              targetAverageUtilization: 60
          - type: Resource
            resource:
              name: memory
              targetAverageUtilization: 60

    middlemanagers:
      runtimeProperties: |
        druid.service=druid/middleManager
        druid.worker.capacity=3
        druid.server.http.numThreads=10
        druid.processing.buffer.sizebytes=536870912
        # Resources for peons
        druid.indexer.runner.javaOpts=-server -Xms1G -Xmx1G -XX:MaxDirectMemorySize=10g -Duser.timezone=UTC -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/druid/data/tmp -XX:+UnlockDiagnosticVMOptions -XX:+PrintSafepointStatistics -XX:PrintSafepointStatisticsCount=1 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime -XX:+ExitOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError -XX:+UseG1GC
        druid.indexer.task.baseTaskDir=/druid/data/baseTaskDir
        # Peon properties
        druid.indexer.fork.property.druid.processing.numThreads=1
        druid.indexer.fork.property.druid.processing.numMergeBuffers=2
        druid.indexer.fork.property.druid.processing.buffer.sizeBytes=536870912
      extraJvmOptions: |-
        -Xmx4G
        -Xms4G
      volumeClaimTemplates:
        - metadata:
            name: data-volume
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
            storageClassName: standard
      resources: {}
      podDisruptionBudgetSpec:
        maxUnavailable: 1
      hpAutoscaler:
        maxReplicas: 1
        minReplicas: 1
        metrics:
          - type: Resource
            resource:
              name: cpu
              targetAverageUtilization: 60
          - type: Resource
            resource:
              name: memory
              targetAverageUtilization: 60

    routers:
      nodeConfigMountPath: /opt/druid/conf/druid/cluster/query/router
      runtimeProperties: |
        druid.service=druid/router
        druid.plaintextPort=8888
        # HTTP proxy
        druid.router.http.numConnections=50
        druid.router.http.readTimeout=PT5M
        druid.router.http.numMaxThreads=100
        druid.server.http.numThreads=100
        # Service discovery
        druid.router.defaultBrokerServiceName=druid/broker
        druid.router.coordinatorServiceName=druid/coordinator
        # Management proxy to coordinator / overlord: required for unified web console.
        druid.router.managementProxy.enabled=true
      extraJvmOptions: |-
        -Xmx512m
        -Xms512m
      resources: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  nodeSpecUniqueStr: druid-cluster-routers
      podDisruptionBudgetSpec:
        maxUnavailable: 1
      hpAutoscaler:
        maxReplicas: 1
        minReplicas: 1
        metrics:
          - type: Resource
            resource:
              name: cpu
              targetAverageUtilization: 60
          - type: Resource
            resource:
              name: memory
              targetAverageUtilization: 60
