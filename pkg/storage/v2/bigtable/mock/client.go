// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	bigtable "github.com/bucketeer-io/bucketeer/pkg/storage/v2/bigtable"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ReadRow mocks base method.
func (m *MockReader) ReadRow(ctx context.Context, request *bigtable.ReadRowRequest) (bigtable.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRow", ctx, request)
	ret0, _ := ret[0].(bigtable.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRow indicates an expected call of ReadRow.
func (mr *MockReaderMockRecorder) ReadRow(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRow", reflect.TypeOf((*MockReader)(nil).ReadRow), ctx, request)
}

// ReadRows mocks base method.
func (m *MockReader) ReadRows(ctx context.Context, request *bigtable.ReadRequest) (bigtable.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRows", ctx, request)
	ret0, _ := ret[0].(bigtable.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRows indicates an expected call of ReadRows.
func (mr *MockReaderMockRecorder) ReadRows(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRows", reflect.TypeOf((*MockReader)(nil).ReadRows), ctx, request)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// WriteRow mocks base method.
func (m *MockWriter) WriteRow(ctx context.Context, request *bigtable.WriteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRow", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRow indicates an expected call of WriteRow.
func (mr *MockWriterMockRecorder) WriteRow(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRow", reflect.TypeOf((*MockWriter)(nil).WriteRow), ctx, request)
}

// WriteRows mocks base method.
func (m *MockWriter) WriteRows(ctx context.Context, request *bigtable.WriteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRows", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRows indicates an expected call of WriteRows.
func (mr *MockWriterMockRecorder) WriteRows(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRows", reflect.TypeOf((*MockWriter)(nil).WriteRows), ctx, request)
}

// MockReadWriter is a mock of ReadWriter interface.
type MockReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriterMockRecorder
}

// MockReadWriterMockRecorder is the mock recorder for MockReadWriter.
type MockReadWriterMockRecorder struct {
	mock *MockReadWriter
}

// NewMockReadWriter creates a new mock instance.
func NewMockReadWriter(ctrl *gomock.Controller) *MockReadWriter {
	mock := &MockReadWriter{ctrl: ctrl}
	mock.recorder = &MockReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriter) EXPECT() *MockReadWriterMockRecorder {
	return m.recorder
}

// ReadRow mocks base method.
func (m *MockReadWriter) ReadRow(ctx context.Context, request *bigtable.ReadRowRequest) (bigtable.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRow", ctx, request)
	ret0, _ := ret[0].(bigtable.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRow indicates an expected call of ReadRow.
func (mr *MockReadWriterMockRecorder) ReadRow(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRow", reflect.TypeOf((*MockReadWriter)(nil).ReadRow), ctx, request)
}

// ReadRows mocks base method.
func (m *MockReadWriter) ReadRows(ctx context.Context, request *bigtable.ReadRequest) (bigtable.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRows", ctx, request)
	ret0, _ := ret[0].(bigtable.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRows indicates an expected call of ReadRows.
func (mr *MockReadWriterMockRecorder) ReadRows(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRows", reflect.TypeOf((*MockReadWriter)(nil).ReadRows), ctx, request)
}

// WriteRow mocks base method.
func (m *MockReadWriter) WriteRow(ctx context.Context, request *bigtable.WriteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRow", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRow indicates an expected call of WriteRow.
func (mr *MockReadWriterMockRecorder) WriteRow(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRow", reflect.TypeOf((*MockReadWriter)(nil).WriteRow), ctx, request)
}

// WriteRows mocks base method.
func (m *MockReadWriter) WriteRows(ctx context.Context, request *bigtable.WriteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRows", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRows indicates an expected call of WriteRows.
func (mr *MockReadWriterMockRecorder) WriteRows(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRows", reflect.TypeOf((*MockReadWriter)(nil).WriteRows), ctx, request)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ReadRow mocks base method.
func (m *MockClient) ReadRow(ctx context.Context, request *bigtable.ReadRowRequest) (bigtable.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRow", ctx, request)
	ret0, _ := ret[0].(bigtable.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRow indicates an expected call of ReadRow.
func (mr *MockClientMockRecorder) ReadRow(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRow", reflect.TypeOf((*MockClient)(nil).ReadRow), ctx, request)
}

// ReadRows mocks base method.
func (m *MockClient) ReadRows(ctx context.Context, request *bigtable.ReadRequest) (bigtable.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRows", ctx, request)
	ret0, _ := ret[0].(bigtable.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRows indicates an expected call of ReadRows.
func (mr *MockClientMockRecorder) ReadRows(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRows", reflect.TypeOf((*MockClient)(nil).ReadRows), ctx, request)
}

// WriteRow mocks base method.
func (m *MockClient) WriteRow(ctx context.Context, request *bigtable.WriteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRow", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRow indicates an expected call of WriteRow.
func (mr *MockClientMockRecorder) WriteRow(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRow", reflect.TypeOf((*MockClient)(nil).WriteRow), ctx, request)
}

// WriteRows mocks base method.
func (m *MockClient) WriteRows(ctx context.Context, request *bigtable.WriteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRows", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRows indicates an expected call of WriteRows.
func (mr *MockClientMockRecorder) WriteRows(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRows", reflect.TypeOf((*MockClient)(nil).WriteRows), ctx, request)
}
