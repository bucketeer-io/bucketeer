// Copyright 2025 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: proto/gateway/service.proto

package gateway

import (
	context "context"
	account "github.com/bucketeer-io/bucketeer/proto/account"
	coderef "github.com/bucketeer-io/bucketeer/proto/coderef"
	common "github.com/bucketeer-io/bucketeer/proto/common"
	client "github.com/bucketeer-io/bucketeer/proto/event/client"
	feature "github.com/bucketeer-io/bucketeer/proto/feature"
	push "github.com/bucketeer-io/bucketeer/proto/push"
	user "github.com/bucketeer-io/bucketeer/proto/user"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{0}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type GetFeatureFlagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag            string          `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag"`
	FeatureFlagsId string          `protobuf:"bytes,2,opt,name=feature_flags_id,json=featureFlagsId,proto3" json:"feature_flags_id"`
	RequestedAt    int64           `protobuf:"varint,3,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at"`
	SourceId       client.SourceId `protobuf:"varint,4,opt,name=source_id,json=sourceId,proto3,enum=bucketeer.event.client.SourceId" json:"source_id"`
	SdkVersion     string          `protobuf:"bytes,5,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version"`
}

func (x *GetFeatureFlagsRequest) Reset() {
	*x = GetFeatureFlagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureFlagsRequest) ProtoMessage() {}

func (x *GetFeatureFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureFlagsRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureFlagsRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetFeatureFlagsRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *GetFeatureFlagsRequest) GetFeatureFlagsId() string {
	if x != nil {
		return x.FeatureFlagsId
	}
	return ""
}

func (x *GetFeatureFlagsRequest) GetRequestedAt() int64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

func (x *GetFeatureFlagsRequest) GetSourceId() client.SourceId {
	if x != nil {
		return x.SourceId
	}
	return client.SourceId_UNKNOWN
}

func (x *GetFeatureFlagsRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

type GetFeatureFlagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureFlagsId         string             `protobuf:"bytes,1,opt,name=feature_flags_id,json=featureFlagsId,proto3" json:"feature_flags_id"`
	Features               []*feature.Feature `protobuf:"bytes,2,rep,name=features,proto3" json:"features"`
	ArchivedFeatureFlagIds []string           `protobuf:"bytes,3,rep,name=archived_feature_flag_ids,json=archivedFeatureFlagIds,proto3" json:"archived_feature_flag_ids"`
	RequestedAt            int64              `protobuf:"varint,4,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at"`
	ForceUpdate            bool               `protobuf:"varint,5,opt,name=force_update,json=forceUpdate,proto3" json:"force_update"`
}

func (x *GetFeatureFlagsResponse) Reset() {
	*x = GetFeatureFlagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureFlagsResponse) ProtoMessage() {}

func (x *GetFeatureFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureFlagsResponse.ProtoReflect.Descriptor instead.
func (*GetFeatureFlagsResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetFeatureFlagsResponse) GetFeatureFlagsId() string {
	if x != nil {
		return x.FeatureFlagsId
	}
	return ""
}

func (x *GetFeatureFlagsResponse) GetFeatures() []*feature.Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GetFeatureFlagsResponse) GetArchivedFeatureFlagIds() []string {
	if x != nil {
		return x.ArchivedFeatureFlagIds
	}
	return nil
}

func (x *GetFeatureFlagsResponse) GetRequestedAt() int64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

func (x *GetFeatureFlagsResponse) GetForceUpdate() bool {
	if x != nil {
		return x.ForceUpdate
	}
	return false
}

type GetSegmentUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentIds  []string        `protobuf:"bytes,1,rep,name=segment_ids,json=segmentIds,proto3" json:"segment_ids"`
	RequestedAt int64           `protobuf:"varint,2,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at"`
	SourceId    client.SourceId `protobuf:"varint,3,opt,name=source_id,json=sourceId,proto3,enum=bucketeer.event.client.SourceId" json:"source_id"`
	SdkVersion  string          `protobuf:"bytes,4,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version"`
}

func (x *GetSegmentUsersRequest) Reset() {
	*x = GetSegmentUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentUsersRequest) ProtoMessage() {}

func (x *GetSegmentUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentUsersRequest.ProtoReflect.Descriptor instead.
func (*GetSegmentUsersRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetSegmentUsersRequest) GetSegmentIds() []string {
	if x != nil {
		return x.SegmentIds
	}
	return nil
}

func (x *GetSegmentUsersRequest) GetRequestedAt() int64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

func (x *GetSegmentUsersRequest) GetSourceId() client.SourceId {
	if x != nil {
		return x.SourceId
	}
	return client.SourceId_UNKNOWN
}

func (x *GetSegmentUsersRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

type GetSegmentUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentUsers      []*feature.SegmentUsers `protobuf:"bytes,1,rep,name=segment_users,json=segmentUsers,proto3" json:"segment_users"`
	DeletedSegmentIds []string                `protobuf:"bytes,2,rep,name=deleted_segment_ids,json=deletedSegmentIds,proto3" json:"deleted_segment_ids"`
	RequestedAt       int64                   `protobuf:"varint,3,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at"`
	ForceUpdate       bool                    `protobuf:"varint,4,opt,name=force_update,json=forceUpdate,proto3" json:"force_update"`
}

func (x *GetSegmentUsersResponse) Reset() {
	*x = GetSegmentUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentUsersResponse) ProtoMessage() {}

func (x *GetSegmentUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentUsersResponse.ProtoReflect.Descriptor instead.
func (*GetSegmentUsersResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetSegmentUsersResponse) GetSegmentUsers() []*feature.SegmentUsers {
	if x != nil {
		return x.SegmentUsers
	}
	return nil
}

func (x *GetSegmentUsersResponse) GetDeletedSegmentIds() []string {
	if x != nil {
		return x.DeletedSegmentIds
	}
	return nil
}

func (x *GetSegmentUsersResponse) GetRequestedAt() int64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

func (x *GetSegmentUsersResponse) GetForceUpdate() bool {
	if x != nil {
		return x.ForceUpdate
	}
	return false
}

type GetEvaluationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag               string     `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag"`
	User              *user.User `protobuf:"bytes,2,opt,name=user,proto3" json:"user"`
	UserEvaluationsId string     `protobuf:"bytes,3,opt,name=user_evaluations_id,json=userEvaluationsId,proto3" json:"user_evaluations_id"`
	// Deprecated: Do not use.
	FeatureId               string                                         `protobuf:"bytes,4,opt,name=feature_id,json=featureId,proto3" json:"feature_id"` // instead, use GetEvaluation API
	SourceId                client.SourceId                                `protobuf:"varint,5,opt,name=source_id,json=sourceId,proto3,enum=bucketeer.event.client.SourceId" json:"source_id"`
	UserEvaluationCondition *GetEvaluationsRequest_UserEvaluationCondition `protobuf:"bytes,6,opt,name=user_evaluation_condition,json=userEvaluationCondition,proto3" json:"user_evaluation_condition"`
	SdkVersion              string                                         `protobuf:"bytes,7,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version"`
}

func (x *GetEvaluationsRequest) Reset() {
	*x = GetEvaluationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationsRequest) ProtoMessage() {}

func (x *GetEvaluationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationsRequest.ProtoReflect.Descriptor instead.
func (*GetEvaluationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetEvaluationsRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *GetEvaluationsRequest) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetEvaluationsRequest) GetUserEvaluationsId() string {
	if x != nil {
		return x.UserEvaluationsId
	}
	return ""
}

// Deprecated: Do not use.
func (x *GetEvaluationsRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetEvaluationsRequest) GetSourceId() client.SourceId {
	if x != nil {
		return x.SourceId
	}
	return client.SourceId_UNKNOWN
}

func (x *GetEvaluationsRequest) GetUserEvaluationCondition() *GetEvaluationsRequest_UserEvaluationCondition {
	if x != nil {
		return x.UserEvaluationCondition
	}
	return nil
}

func (x *GetEvaluationsRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

type GetEvaluationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             feature.UserEvaluations_State `protobuf:"varint,1,opt,name=state,proto3,enum=bucketeer.feature.UserEvaluations_State" json:"state"`
	Evaluations       *feature.UserEvaluations      `protobuf:"bytes,2,opt,name=evaluations,proto3" json:"evaluations"`
	UserEvaluationsId string                        `protobuf:"bytes,3,opt,name=user_evaluations_id,json=userEvaluationsId,proto3" json:"user_evaluations_id"`
}

func (x *GetEvaluationsResponse) Reset() {
	*x = GetEvaluationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationsResponse) ProtoMessage() {}

func (x *GetEvaluationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationsResponse.ProtoReflect.Descriptor instead.
func (*GetEvaluationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetEvaluationsResponse) GetState() feature.UserEvaluations_State {
	if x != nil {
		return x.State
	}
	return feature.UserEvaluations_QUEUED
}

func (x *GetEvaluationsResponse) GetEvaluations() *feature.UserEvaluations {
	if x != nil {
		return x.Evaluations
	}
	return nil
}

func (x *GetEvaluationsResponse) GetUserEvaluationsId() string {
	if x != nil {
		return x.UserEvaluationsId
	}
	return ""
}

type GetEvaluationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag        string          `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag"`
	User       *user.User      `protobuf:"bytes,2,opt,name=user,proto3" json:"user"`
	FeatureId  string          `protobuf:"bytes,3,opt,name=feature_id,json=featureId,proto3" json:"feature_id"`
	SourceId   client.SourceId `protobuf:"varint,4,opt,name=source_id,json=sourceId,proto3,enum=bucketeer.event.client.SourceId" json:"source_id"`
	SdkVersion string          `protobuf:"bytes,5,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version"`
}

func (x *GetEvaluationRequest) Reset() {
	*x = GetEvaluationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationRequest) ProtoMessage() {}

func (x *GetEvaluationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationRequest.ProtoReflect.Descriptor instead.
func (*GetEvaluationRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetEvaluationRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *GetEvaluationRequest) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetEvaluationRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetEvaluationRequest) GetSourceId() client.SourceId {
	if x != nil {
		return x.SourceId
	}
	return client.SourceId_UNKNOWN
}

func (x *GetEvaluationRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

type GetEvaluationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evaluation *feature.Evaluation `protobuf:"bytes,1,opt,name=evaluation,proto3" json:"evaluation"`
}

func (x *GetEvaluationResponse) Reset() {
	*x = GetEvaluationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationResponse) ProtoMessage() {}

func (x *GetEvaluationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationResponse.ProtoReflect.Descriptor instead.
func (*GetEvaluationResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetEvaluationResponse) GetEvaluation() *feature.Evaluation {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

type RegisterEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events     []*client.Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events"`
	SdkVersion string          `protobuf:"bytes,2,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version"`
	SourceId   client.SourceId `protobuf:"varint,3,opt,name=source_id,json=sourceId,proto3,enum=bucketeer.event.client.SourceId" json:"source_id"`
}

func (x *RegisterEventsRequest) Reset() {
	*x = RegisterEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterEventsRequest) ProtoMessage() {}

func (x *RegisterEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterEventsRequest.ProtoReflect.Descriptor instead.
func (*RegisterEventsRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{10}
}

func (x *RegisterEventsRequest) GetEvents() []*client.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *RegisterEventsRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *RegisterEventsRequest) GetSourceId() client.SourceId {
	if x != nil {
		return x.SourceId
	}
	return client.SourceId_UNKNOWN
}

type RegisterEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors map[string]*RegisterEventsResponse_Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RegisterEventsResponse) Reset() {
	*x = RegisterEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterEventsResponse) ProtoMessage() {}

func (x *RegisterEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterEventsResponse.ProtoReflect.Descriptor instead.
func (*RegisterEventsResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{11}
}

func (x *RegisterEventsResponse) GetErrors() map[string]*RegisterEventsResponse_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type TrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apikey    string  `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey"`
	Userid    string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid"`
	Goalid    string  `protobuf:"bytes,3,opt,name=goalid,proto3" json:"goalid"`
	Tag       string  `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag"`
	Timestamp int64   `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp"`
	Value     float64 `protobuf:"fixed64,6,opt,name=value,proto3" json:"value"`
}

func (x *TrackRequest) Reset() {
	*x = TrackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRequest) ProtoMessage() {}

func (x *TrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRequest.ProtoReflect.Descriptor instead.
func (*TrackRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{12}
}

func (x *TrackRequest) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

func (x *TrackRequest) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *TrackRequest) GetGoalid() string {
	if x != nil {
		return x.Goalid
	}
	return ""
}

func (x *TrackRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TrackRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TrackRequest) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type TrackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrackResponse) Reset() {
	*x = TrackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackResponse) ProtoMessage() {}

func (x *TrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackResponse.ProtoReflect.Descriptor instead.
func (*TrackResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{13}
}

type DebugEvaluateFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users      []*user.User `protobuf:"bytes,1,rep,name=users,proto3" json:"users"`
	FeatureIds []string     `protobuf:"bytes,3,rep,name=feature_ids,json=featureIds,proto3" json:"feature_ids"`
}

func (x *DebugEvaluateFeaturesRequest) Reset() {
	*x = DebugEvaluateFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugEvaluateFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugEvaluateFeaturesRequest) ProtoMessage() {}

func (x *DebugEvaluateFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugEvaluateFeaturesRequest.ProtoReflect.Descriptor instead.
func (*DebugEvaluateFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{14}
}

func (x *DebugEvaluateFeaturesRequest) GetUsers() []*user.User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *DebugEvaluateFeaturesRequest) GetFeatureIds() []string {
	if x != nil {
		return x.FeatureIds
	}
	return nil
}

type DebugEvaluateFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evaluations        []*feature.Evaluation `protobuf:"bytes,1,rep,name=evaluations,proto3" json:"evaluations"`
	ArchivedFeatureIds []string              `protobuf:"bytes,2,rep,name=archived_feature_ids,json=archivedFeatureIds,proto3" json:"archived_feature_ids"`
}

func (x *DebugEvaluateFeaturesResponse) Reset() {
	*x = DebugEvaluateFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugEvaluateFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugEvaluateFeaturesResponse) ProtoMessage() {}

func (x *DebugEvaluateFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugEvaluateFeaturesResponse.ProtoReflect.Descriptor instead.
func (*DebugEvaluateFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{15}
}

func (x *DebugEvaluateFeaturesResponse) GetEvaluations() []*feature.Evaluation {
	if x != nil {
		return x.Evaluations
	}
	return nil
}

func (x *DebugEvaluateFeaturesResponse) GetArchivedFeatureIds() []string {
	if x != nil {
		return x.ArchivedFeatureIds
	}
	return nil
}

type CreateFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name              string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Description       string                        `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
	VariationType     feature.Feature_VariationType `protobuf:"varint,4,opt,name=variation_type,json=variationType,proto3,enum=bucketeer.feature.Feature_VariationType" json:"variation_type"`
	Variations        []*feature.Variation          `protobuf:"bytes,5,rep,name=variations,proto3" json:"variations"`
	Tags              []string                      `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags"`
	OnVariationIndex  int32                         `protobuf:"varint,7,opt,name=on_variation_index,json=onVariationIndex,proto3" json:"on_variation_index"`
	OffVariationIndex int32                         `protobuf:"varint,8,opt,name=off_variation_index,json=offVariationIndex,proto3" json:"off_variation_index"`
}

func (x *CreateFeatureRequest) Reset() {
	*x = CreateFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFeatureRequest) ProtoMessage() {}

func (x *CreateFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFeatureRequest.ProtoReflect.Descriptor instead.
func (*CreateFeatureRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{16}
}

func (x *CreateFeatureRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateFeatureRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFeatureRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateFeatureRequest) GetVariationType() feature.Feature_VariationType {
	if x != nil {
		return x.VariationType
	}
	return feature.Feature_STRING
}

func (x *CreateFeatureRequest) GetVariations() []*feature.Variation {
	if x != nil {
		return x.Variations
	}
	return nil
}

func (x *CreateFeatureRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateFeatureRequest) GetOnVariationIndex() int32 {
	if x != nil {
		return x.OnVariationIndex
	}
	return 0
}

func (x *CreateFeatureRequest) GetOffVariationIndex() int32 {
	if x != nil {
		return x.OffVariationIndex
	}
	return 0
}

type CreateFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature *feature.Feature `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature"`
}

func (x *CreateFeatureResponse) Reset() {
	*x = CreateFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFeatureResponse) ProtoMessage() {}

func (x *CreateFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFeatureResponse.ProtoReflect.Descriptor instead.
func (*CreateFeatureResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{17}
}

func (x *CreateFeatureResponse) GetFeature() *feature.Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

type GetFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FeatureVersion *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version"`
}

func (x *GetFeatureRequest) Reset() {
	*x = GetFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureRequest) ProtoMessage() {}

func (x *GetFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetFeatureRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetFeatureRequest) GetFeatureVersion() *wrapperspb.Int32Value {
	if x != nil {
		return x.FeatureVersion
	}
	return nil
}

type GetFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature *feature.Feature `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature"`
}

func (x *GetFeatureResponse) Reset() {
	*x = GetFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureResponse) ProtoMessage() {}

func (x *GetFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureResponse.ProtoReflect.Descriptor instead.
func (*GetFeatureResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetFeatureResponse) GetFeature() *feature.Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

type ListFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize       int64                                      `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Cursor         string                                     `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor"`
	OrderBy        feature.ListFeaturesRequest_OrderBy        `protobuf:"varint,3,opt,name=order_by,json=orderBy,proto3,enum=bucketeer.feature.ListFeaturesRequest_OrderBy" json:"order_by"`
	OrderDirection feature.ListFeaturesRequest_OrderDirection `protobuf:"varint,4,opt,name=order_direction,json=orderDirection,proto3,enum=bucketeer.feature.ListFeaturesRequest_OrderDirection" json:"order_direction"`
}

func (x *ListFeaturesRequest) Reset() {
	*x = ListFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeaturesRequest) ProtoMessage() {}

func (x *ListFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeaturesRequest.ProtoReflect.Descriptor instead.
func (*ListFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListFeaturesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFeaturesRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListFeaturesRequest) GetOrderBy() feature.ListFeaturesRequest_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return feature.ListFeaturesRequest_DEFAULT
}

func (x *ListFeaturesRequest) GetOrderDirection() feature.ListFeaturesRequest_OrderDirection {
	if x != nil {
		return x.OrderDirection
	}
	return feature.ListFeaturesRequest_ASC
}

type ListFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features []*feature.Feature `protobuf:"bytes,1,rep,name=features,proto3" json:"features"`
}

func (x *ListFeaturesResponse) Reset() {
	*x = ListFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeaturesResponse) ProtoMessage() {}

func (x *ListFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeaturesResponse.ProtoReflect.Descriptor instead.
func (*ListFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListFeaturesResponse) GetFeatures() []*feature.Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

type UpdateFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment       string                  `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment"`
	EnvironmentId string                  `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
	Id            string                  `protobuf:"bytes,3,opt,name=id,proto3" json:"id"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	Description   *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=description,proto3" json:"description"`
	Tags          *common.StringListValue `protobuf:"bytes,6,opt,name=tags,proto3" json:"tags"`
	Enabled       *wrapperspb.BoolValue   `protobuf:"bytes,7,opt,name=enabled,proto3" json:"enabled"`
	Archived      *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=archived,proto3" json:"archived"`
	// Legacy full-replacement fields (deprecated)
	//
	// Deprecated: Do not use.
	Variations *feature.VariationListValue `protobuf:"bytes,9,opt,name=variations,proto3" json:"variations"`
	// Deprecated: Do not use.
	Prerequisites *feature.PrerequisiteListValue `protobuf:"bytes,10,opt,name=prerequisites,proto3" json:"prerequisites"`
	// Deprecated: Do not use.
	Targets *feature.TargetListValue `protobuf:"bytes,11,opt,name=targets,proto3" json:"targets"`
	// Deprecated: Do not use.
	Rules             *feature.RuleListValue  `protobuf:"bytes,12,opt,name=rules,proto3" json:"rules"`
	DefaultStrategy   *feature.Strategy       `protobuf:"bytes,13,opt,name=default_strategy,json=defaultStrategy,proto3" json:"default_strategy"`
	OffVariation      *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=off_variation,json=offVariation,proto3" json:"off_variation"`
	ResetSamplingSeed bool                    `protobuf:"varint,15,opt,name=reset_sampling_seed,json=resetSamplingSeed,proto3" json:"reset_sampling_seed"`
	// New granular change fields (supporting multiple operations per field)
	VariationChanges    []*feature.VariationChange    `protobuf:"bytes,16,rep,name=variation_changes,json=variationChanges,proto3" json:"variation_changes"`
	RuleChanges         []*feature.RuleChange         `protobuf:"bytes,17,rep,name=rule_changes,json=ruleChanges,proto3" json:"rule_changes"`
	PrerequisiteChanges []*feature.PrerequisiteChange `protobuf:"bytes,18,rep,name=prerequisite_changes,json=prerequisiteChanges,proto3" json:"prerequisite_changes"`
	TargetChanges       []*feature.TargetChange       `protobuf:"bytes,19,rep,name=target_changes,json=targetChanges,proto3" json:"target_changes"`
	TagChanges          []*feature.TagChange          `protobuf:"bytes,20,rep,name=tag_changes,json=tagChanges,proto3" json:"tag_changes"`
}

func (x *UpdateFeatureRequest) Reset() {
	*x = UpdateFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeatureRequest) ProtoMessage() {}

func (x *UpdateFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeatureRequest.ProtoReflect.Descriptor instead.
func (*UpdateFeatureRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateFeatureRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpdateFeatureRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *UpdateFeatureRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateFeatureRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateFeatureRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateFeatureRequest) GetTags() *common.StringListValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateFeatureRequest) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *UpdateFeatureRequest) GetArchived() *wrapperspb.BoolValue {
	if x != nil {
		return x.Archived
	}
	return nil
}

// Deprecated: Do not use.
func (x *UpdateFeatureRequest) GetVariations() *feature.VariationListValue {
	if x != nil {
		return x.Variations
	}
	return nil
}

// Deprecated: Do not use.
func (x *UpdateFeatureRequest) GetPrerequisites() *feature.PrerequisiteListValue {
	if x != nil {
		return x.Prerequisites
	}
	return nil
}

// Deprecated: Do not use.
func (x *UpdateFeatureRequest) GetTargets() *feature.TargetListValue {
	if x != nil {
		return x.Targets
	}
	return nil
}

// Deprecated: Do not use.
func (x *UpdateFeatureRequest) GetRules() *feature.RuleListValue {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *UpdateFeatureRequest) GetDefaultStrategy() *feature.Strategy {
	if x != nil {
		return x.DefaultStrategy
	}
	return nil
}

func (x *UpdateFeatureRequest) GetOffVariation() *wrapperspb.StringValue {
	if x != nil {
		return x.OffVariation
	}
	return nil
}

func (x *UpdateFeatureRequest) GetResetSamplingSeed() bool {
	if x != nil {
		return x.ResetSamplingSeed
	}
	return false
}

func (x *UpdateFeatureRequest) GetVariationChanges() []*feature.VariationChange {
	if x != nil {
		return x.VariationChanges
	}
	return nil
}

func (x *UpdateFeatureRequest) GetRuleChanges() []*feature.RuleChange {
	if x != nil {
		return x.RuleChanges
	}
	return nil
}

func (x *UpdateFeatureRequest) GetPrerequisiteChanges() []*feature.PrerequisiteChange {
	if x != nil {
		return x.PrerequisiteChanges
	}
	return nil
}

func (x *UpdateFeatureRequest) GetTargetChanges() []*feature.TargetChange {
	if x != nil {
		return x.TargetChanges
	}
	return nil
}

func (x *UpdateFeatureRequest) GetTagChanges() []*feature.TagChange {
	if x != nil {
		return x.TagChanges
	}
	return nil
}

type UpdateFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature *feature.Feature `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature"`
}

func (x *UpdateFeatureResponse) Reset() {
	*x = UpdateFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeatureResponse) ProtoMessage() {}

func (x *UpdateFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeatureResponse.ProtoReflect.Descriptor instead.
func (*UpdateFeatureResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateFeatureResponse) GetFeature() *feature.Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

type ListPushesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize       int64                                 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Cursor         string                                `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor"`
	OrderBy        push.ListPushesRequest_OrderBy        `protobuf:"varint,3,opt,name=order_by,json=orderBy,proto3,enum=bucketeer.push.ListPushesRequest_OrderBy" json:"order_by"`
	OrderDirection push.ListPushesRequest_OrderDirection `protobuf:"varint,4,opt,name=order_direction,json=orderDirection,proto3,enum=bucketeer.push.ListPushesRequest_OrderDirection" json:"order_direction"`
	SearchKeyword  string                                `protobuf:"bytes,5,opt,name=search_keyword,json=searchKeyword,proto3" json:"search_keyword"`
}

func (x *ListPushesRequest) Reset() {
	*x = ListPushesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPushesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPushesRequest) ProtoMessage() {}

func (x *ListPushesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPushesRequest.ProtoReflect.Descriptor instead.
func (*ListPushesRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListPushesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPushesRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListPushesRequest) GetOrderBy() push.ListPushesRequest_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return push.ListPushesRequest_DEFAULT
}

func (x *ListPushesRequest) GetOrderDirection() push.ListPushesRequest_OrderDirection {
	if x != nil {
		return x.OrderDirection
	}
	return push.ListPushesRequest_ASC
}

func (x *ListPushesRequest) GetSearchKeyword() string {
	if x != nil {
		return x.SearchKeyword
	}
	return ""
}

type ListPushesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pushes     []*push.Push `protobuf:"bytes,1,rep,name=pushes,proto3" json:"pushes"`
	Cursor     string       `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor"`
	TotalCount int64        `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
}

func (x *ListPushesResponse) Reset() {
	*x = ListPushesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPushesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPushesResponse) ProtoMessage() {}

func (x *ListPushesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPushesResponse.ProtoReflect.Descriptor instead.
func (*ListPushesResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{25}
}

func (x *ListPushesResponse) GetPushes() []*push.Push {
	if x != nil {
		return x.Pushes
	}
	return nil
}

func (x *ListPushesResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListPushesResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CreatePushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags              []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags"`
	Name              string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	FcmServiceAccount []byte   `protobuf:"bytes,3,opt,name=fcm_service_account,json=fcmServiceAccount,proto3" json:"fcm_service_account"`
}

func (x *CreatePushRequest) Reset() {
	*x = CreatePushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePushRequest) ProtoMessage() {}

func (x *CreatePushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePushRequest.ProtoReflect.Descriptor instead.
func (*CreatePushRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{26}
}

func (x *CreatePushRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreatePushRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePushRequest) GetFcmServiceAccount() []byte {
	if x != nil {
		return x.FcmServiceAccount
	}
	return nil
}

type CreatePushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Push *push.Push `protobuf:"bytes,1,opt,name=push,proto3" json:"push"`
}

func (x *CreatePushResponse) Reset() {
	*x = CreatePushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePushResponse) ProtoMessage() {}

func (x *CreatePushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePushResponse.ProtoReflect.Descriptor instead.
func (*CreatePushResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{27}
}

func (x *CreatePushResponse) GetPush() *push.Push {
	if x != nil {
		return x.Push
	}
	return nil
}

type GetPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *GetPushRequest) Reset() {
	*x = GetPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPushRequest) ProtoMessage() {}

func (x *GetPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPushRequest.ProtoReflect.Descriptor instead.
func (*GetPushRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{28}
}

func (x *GetPushRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Push *push.Push `protobuf:"bytes,1,opt,name=push,proto3" json:"push"`
}

func (x *GetPushResponse) Reset() {
	*x = GetPushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPushResponse) ProtoMessage() {}

func (x *GetPushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPushResponse.ProtoReflect.Descriptor instead.
func (*GetPushResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{29}
}

func (x *GetPushResponse) GetPush() *push.Push {
	if x != nil {
		return x.Push
	}
	return nil
}

type UpdatePushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Tags    []string                `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags"`
	Name    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Deleted *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=deleted,proto3" json:"deleted"`
}

func (x *UpdatePushRequest) Reset() {
	*x = UpdatePushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePushRequest) ProtoMessage() {}

func (x *UpdatePushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePushRequest.ProtoReflect.Descriptor instead.
func (*UpdatePushRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{30}
}

func (x *UpdatePushRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePushRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdatePushRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdatePushRequest) GetDeleted() *wrapperspb.BoolValue {
	if x != nil {
		return x.Deleted
	}
	return nil
}

type UpdatePushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Push *push.Push `protobuf:"bytes,1,opt,name=push,proto3" json:"push"`
}

func (x *UpdatePushResponse) Reset() {
	*x = UpdatePushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePushResponse) ProtoMessage() {}

func (x *UpdatePushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePushResponse.ProtoReflect.Descriptor instead.
func (*UpdatePushResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{31}
}

func (x *UpdatePushResponse) GetPush() *push.Push {
	if x != nil {
		return x.Push
	}
	return nil
}

type CreateAccountV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string                               `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
	Name             string                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	AvatarImageUrl   string                               `protobuf:"bytes,3,opt,name=avatar_image_url,json=avatarImageUrl,proto3" json:"avatar_image_url"`
	OrganizationId   string                               `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id"`
	OrganizationRole account.AccountV2_Role_Organization  `protobuf:"varint,5,opt,name=organization_role,json=organizationRole,proto3,enum=bucketeer.account.AccountV2_Role_Organization" json:"organization_role"`
	EnvironmentRoles []*account.AccountV2_EnvironmentRole `protobuf:"bytes,6,rep,name=environment_roles,json=environmentRoles,proto3" json:"environment_roles"`
	FirstName        string                               `protobuf:"bytes,7,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName         string                               `protobuf:"bytes,8,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	Language         string                               `protobuf:"bytes,9,opt,name=language,proto3" json:"language"`
}

func (x *CreateAccountV2Request) Reset() {
	*x = CreateAccountV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountV2Request) ProtoMessage() {}

func (x *CreateAccountV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountV2Request.ProtoReflect.Descriptor instead.
func (*CreateAccountV2Request) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{32}
}

func (x *CreateAccountV2Request) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateAccountV2Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAccountV2Request) GetAvatarImageUrl() string {
	if x != nil {
		return x.AvatarImageUrl
	}
	return ""
}

func (x *CreateAccountV2Request) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateAccountV2Request) GetOrganizationRole() account.AccountV2_Role_Organization {
	if x != nil {
		return x.OrganizationRole
	}
	return account.AccountV2_Role_Organization_UNASSIGNED
}

func (x *CreateAccountV2Request) GetEnvironmentRoles() []*account.AccountV2_EnvironmentRole {
	if x != nil {
		return x.EnvironmentRoles
	}
	return nil
}

func (x *CreateAccountV2Request) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CreateAccountV2Request) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CreateAccountV2Request) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type CreateAccountV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *account.AccountV2 `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
}

func (x *CreateAccountV2Response) Reset() {
	*x = CreateAccountV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountV2Response) ProtoMessage() {}

func (x *CreateAccountV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountV2Response.ProtoReflect.Descriptor instead.
func (*CreateAccountV2Response) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{33}
}

func (x *CreateAccountV2Response) GetAccount() *account.AccountV2 {
	if x != nil {
		return x.Account
	}
	return nil
}

type UpdateAccountV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string                                                `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
	OrganizationId   string                                                `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id"`
	Name             *wrapperspb.StringValue                               `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	AvatarImageUrl   *wrapperspb.StringValue                               `protobuf:"bytes,4,opt,name=avatar_image_url,json=avatarImageUrl,proto3" json:"avatar_image_url"`
	OrganizationRole *account.UpdateAccountV2Request_OrganizationRoleValue `protobuf:"bytes,5,opt,name=organization_role,json=organizationRole,proto3" json:"organization_role"`
	EnvironmentRoles []*account.AccountV2_EnvironmentRole                  `protobuf:"bytes,6,rep,name=environment_roles,json=environmentRoles,proto3" json:"environment_roles"`
	FirstName        *wrapperspb.StringValue                               `protobuf:"bytes,7,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName         *wrapperspb.StringValue                               `protobuf:"bytes,8,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	Language         *wrapperspb.StringValue                               `protobuf:"bytes,9,opt,name=language,proto3" json:"language"`
	LastSeen         *wrapperspb.Int64Value                                `protobuf:"bytes,10,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen"`
	Avatar           *account.UpdateAccountV2Request_AccountV2Avatar       `protobuf:"bytes,11,opt,name=avatar,proto3" json:"avatar"`
	Disabled         *wrapperspb.BoolValue                                 `protobuf:"bytes,12,opt,name=disabled,proto3" json:"disabled"`
	Deleted          *wrapperspb.BoolValue                                 `protobuf:"bytes,13,opt,name=deleted,proto3" json:"deleted"`
}

func (x *UpdateAccountV2Request) Reset() {
	*x = UpdateAccountV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountV2Request) ProtoMessage() {}

func (x *UpdateAccountV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountV2Request.ProtoReflect.Descriptor instead.
func (*UpdateAccountV2Request) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateAccountV2Request) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateAccountV2Request) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateAccountV2Request) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateAccountV2Request) GetAvatarImageUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.AvatarImageUrl
	}
	return nil
}

func (x *UpdateAccountV2Request) GetOrganizationRole() *account.UpdateAccountV2Request_OrganizationRoleValue {
	if x != nil {
		return x.OrganizationRole
	}
	return nil
}

func (x *UpdateAccountV2Request) GetEnvironmentRoles() []*account.AccountV2_EnvironmentRole {
	if x != nil {
		return x.EnvironmentRoles
	}
	return nil
}

func (x *UpdateAccountV2Request) GetFirstName() *wrapperspb.StringValue {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *UpdateAccountV2Request) GetLastName() *wrapperspb.StringValue {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *UpdateAccountV2Request) GetLanguage() *wrapperspb.StringValue {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UpdateAccountV2Request) GetLastSeen() *wrapperspb.Int64Value {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *UpdateAccountV2Request) GetAvatar() *account.UpdateAccountV2Request_AccountV2Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *UpdateAccountV2Request) GetDisabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *UpdateAccountV2Request) GetDeleted() *wrapperspb.BoolValue {
	if x != nil {
		return x.Deleted
	}
	return nil
}

type UpdateAccountV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *account.AccountV2 `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
}

func (x *UpdateAccountV2Response) Reset() {
	*x = UpdateAccountV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountV2Response) ProtoMessage() {}

func (x *UpdateAccountV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountV2Response.ProtoReflect.Descriptor instead.
func (*UpdateAccountV2Response) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateAccountV2Response) GetAccount() *account.AccountV2 {
	if x != nil {
		return x.Account
	}
	return nil
}

type GetAccountV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email          string `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id"`
}

func (x *GetAccountV2Request) Reset() {
	*x = GetAccountV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountV2Request) ProtoMessage() {}

func (x *GetAccountV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountV2Request.ProtoReflect.Descriptor instead.
func (*GetAccountV2Request) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{36}
}

func (x *GetAccountV2Request) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetAccountV2Request) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type GetAccountV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *account.AccountV2 `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
}

func (x *GetAccountV2Response) Reset() {
	*x = GetAccountV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountV2Response) ProtoMessage() {}

func (x *GetAccountV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountV2Response.ProtoReflect.Descriptor instead.
func (*GetAccountV2Response) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{37}
}

func (x *GetAccountV2Response) GetAccount() *account.AccountV2 {
	if x != nil {
		return x.Account
	}
	return nil
}

type GetAccountV2ByEnvironmentIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email         string `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
	EnvironmentId string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
}

func (x *GetAccountV2ByEnvironmentIDRequest) Reset() {
	*x = GetAccountV2ByEnvironmentIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountV2ByEnvironmentIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountV2ByEnvironmentIDRequest) ProtoMessage() {}

func (x *GetAccountV2ByEnvironmentIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountV2ByEnvironmentIDRequest.ProtoReflect.Descriptor instead.
func (*GetAccountV2ByEnvironmentIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{38}
}

func (x *GetAccountV2ByEnvironmentIDRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetAccountV2ByEnvironmentIDRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type GetAccountV2ByEnvironmentIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *account.AccountV2 `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
}

func (x *GetAccountV2ByEnvironmentIDResponse) Reset() {
	*x = GetAccountV2ByEnvironmentIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountV2ByEnvironmentIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountV2ByEnvironmentIDResponse) ProtoMessage() {}

func (x *GetAccountV2ByEnvironmentIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountV2ByEnvironmentIDResponse.ProtoReflect.Descriptor instead.
func (*GetAccountV2ByEnvironmentIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{39}
}

func (x *GetAccountV2ByEnvironmentIDResponse) GetAccount() *account.AccountV2 {
	if x != nil {
		return x.Account
	}
	return nil
}

type GetMeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id"`
}

func (x *GetMeRequest) Reset() {
	*x = GetMeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeRequest) ProtoMessage() {}

func (x *GetMeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeRequest.ProtoReflect.Descriptor instead.
func (*GetMeRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{40}
}

func (x *GetMeRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type GetMeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *account.ConsoleAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
}

func (x *GetMeResponse) Reset() {
	*x = GetMeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeResponse) ProtoMessage() {}

func (x *GetMeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeResponse.ProtoReflect.Descriptor instead.
func (*GetMeResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{41}
}

func (x *GetMeResponse) GetAccount() *account.ConsoleAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

type ListAccountsV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize         int64                                        `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Cursor           string                                       `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor"`
	OrganizationId   string                                       `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id"`
	OrderBy          account.ListAccountsV2Request_OrderBy        `protobuf:"varint,4,opt,name=order_by,json=orderBy,proto3,enum=bucketeer.account.ListAccountsV2Request_OrderBy" json:"order_by"`
	OrderDirection   account.ListAccountsV2Request_OrderDirection `protobuf:"varint,5,opt,name=order_direction,json=orderDirection,proto3,enum=bucketeer.account.ListAccountsV2Request_OrderDirection" json:"order_direction"`
	SearchKeyword    string                                       `protobuf:"bytes,6,opt,name=search_keyword,json=searchKeyword,proto3" json:"search_keyword"`
	Disabled         *wrapperspb.BoolValue                        `protobuf:"bytes,7,opt,name=disabled,proto3" json:"disabled"`
	OrganizationRole *wrapperspb.Int32Value                       `protobuf:"bytes,8,opt,name=organization_role,json=organizationRole,proto3" json:"organization_role"`
	EnvironmentId    *wrapperspb.StringValue                      `protobuf:"bytes,9,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
	EnvironmentRole  *wrapperspb.Int32Value                       `protobuf:"bytes,10,opt,name=environment_role,json=environmentRole,proto3" json:"environment_role"`
}

func (x *ListAccountsV2Request) Reset() {
	*x = ListAccountsV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsV2Request) ProtoMessage() {}

func (x *ListAccountsV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsV2Request.ProtoReflect.Descriptor instead.
func (*ListAccountsV2Request) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{42}
}

func (x *ListAccountsV2Request) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAccountsV2Request) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListAccountsV2Request) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListAccountsV2Request) GetOrderBy() account.ListAccountsV2Request_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return account.ListAccountsV2Request_DEFAULT
}

func (x *ListAccountsV2Request) GetOrderDirection() account.ListAccountsV2Request_OrderDirection {
	if x != nil {
		return x.OrderDirection
	}
	return account.ListAccountsV2Request_ASC
}

func (x *ListAccountsV2Request) GetSearchKeyword() string {
	if x != nil {
		return x.SearchKeyword
	}
	return ""
}

func (x *ListAccountsV2Request) GetDisabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *ListAccountsV2Request) GetOrganizationRole() *wrapperspb.Int32Value {
	if x != nil {
		return x.OrganizationRole
	}
	return nil
}

func (x *ListAccountsV2Request) GetEnvironmentId() *wrapperspb.StringValue {
	if x != nil {
		return x.EnvironmentId
	}
	return nil
}

func (x *ListAccountsV2Request) GetEnvironmentRole() *wrapperspb.Int32Value {
	if x != nil {
		return x.EnvironmentRole
	}
	return nil
}

type ListAccountsV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts   []*account.AccountV2 `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts"`
	Cursor     string               `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor"`
	TotalCount int64                `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
}

func (x *ListAccountsV2Response) Reset() {
	*x = ListAccountsV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsV2Response) ProtoMessage() {}

func (x *ListAccountsV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsV2Response.ProtoReflect.Descriptor instead.
func (*ListAccountsV2Response) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{43}
}

func (x *ListAccountsV2Response) GetAccounts() []*account.AccountV2 {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *ListAccountsV2Response) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListAccountsV2Response) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetCodeReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *GetCodeReferenceRequest) Reset() {
	*x = GetCodeReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeReferenceRequest) ProtoMessage() {}

func (x *GetCodeReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetCodeReferenceRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{44}
}

func (x *GetCodeReferenceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCodeReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeReference *coderef.CodeReference `protobuf:"bytes,1,opt,name=code_reference,json=codeReference,proto3" json:"code_reference"`
}

func (x *GetCodeReferenceResponse) Reset() {
	*x = GetCodeReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeReferenceResponse) ProtoMessage() {}

func (x *GetCodeReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetCodeReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{45}
}

func (x *GetCodeReferenceResponse) GetCodeReference() *coderef.CodeReference {
	if x != nil {
		return x.CodeReference
	}
	return nil
}

type ListCodeReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize       int64                                            `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Cursor         string                                           `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor"`
	OrderBy        coderef.ListCodeReferencesRequest_OrderBy        `protobuf:"varint,3,opt,name=order_by,json=orderBy,proto3,enum=bucketeer.coderef.ListCodeReferencesRequest_OrderBy" json:"order_by"`
	OrderDirection coderef.ListCodeReferencesRequest_OrderDirection `protobuf:"varint,4,opt,name=order_direction,json=orderDirection,proto3,enum=bucketeer.coderef.ListCodeReferencesRequest_OrderDirection" json:"order_direction"`
	SearchKeyword  string                                           `protobuf:"bytes,5,opt,name=search_keyword,json=searchKeyword,proto3" json:"search_keyword"`
	FeatureId      string                                           `protobuf:"bytes,6,opt,name=feature_id,json=featureId,proto3" json:"feature_id"`
}

func (x *ListCodeReferencesRequest) Reset() {
	*x = ListCodeReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeReferencesRequest) ProtoMessage() {}

func (x *ListCodeReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeReferencesRequest.ProtoReflect.Descriptor instead.
func (*ListCodeReferencesRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{46}
}

func (x *ListCodeReferencesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCodeReferencesRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListCodeReferencesRequest) GetOrderBy() coderef.ListCodeReferencesRequest_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return coderef.ListCodeReferencesRequest_DEFAULT
}

func (x *ListCodeReferencesRequest) GetOrderDirection() coderef.ListCodeReferencesRequest_OrderDirection {
	if x != nil {
		return x.OrderDirection
	}
	return coderef.ListCodeReferencesRequest_ASC
}

func (x *ListCodeReferencesRequest) GetSearchKeyword() string {
	if x != nil {
		return x.SearchKeyword
	}
	return ""
}

func (x *ListCodeReferencesRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

type ListCodeReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeReferences []*coderef.CodeReference `protobuf:"bytes,1,rep,name=code_references,json=codeReferences,proto3" json:"code_references"`
	Cursor         string                   `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor"`
	TotalCount     int64                    `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
}

func (x *ListCodeReferencesResponse) Reset() {
	*x = ListCodeReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeReferencesResponse) ProtoMessage() {}

func (x *ListCodeReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeReferencesResponse.ProtoReflect.Descriptor instead.
func (*ListCodeReferencesResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{47}
}

func (x *ListCodeReferencesResponse) GetCodeReferences() []*coderef.CodeReference {
	if x != nil {
		return x.CodeReferences
	}
	return nil
}

func (x *ListCodeReferencesResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListCodeReferencesResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CreateCodeReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId        string                               `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id"`
	EnvironmentId    string                               `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
	FilePath         string                               `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path"`
	LineNumber       int32                                `protobuf:"varint,4,opt,name=line_number,json=lineNumber,proto3" json:"line_number"`
	CodeSnippet      string                               `protobuf:"bytes,5,opt,name=code_snippet,json=codeSnippet,proto3" json:"code_snippet"`
	ContentHash      string                               `protobuf:"bytes,6,opt,name=content_hash,json=contentHash,proto3" json:"content_hash"`
	Aliases          []string                             `protobuf:"bytes,7,rep,name=aliases,proto3" json:"aliases"`
	RepositoryName   string                               `protobuf:"bytes,8,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name"`
	RepositoryOwner  string                               `protobuf:"bytes,9,opt,name=repository_owner,json=repositoryOwner,proto3" json:"repository_owner"`
	RepositoryType   coderef.CodeReference_RepositoryType `protobuf:"varint,10,opt,name=repository_type,json=repositoryType,proto3,enum=bucketeer.coderef.CodeReference_RepositoryType" json:"repository_type"`
	RepositoryBranch string                               `protobuf:"bytes,11,opt,name=repository_branch,json=repositoryBranch,proto3" json:"repository_branch"`
	CommitHash       string                               `protobuf:"bytes,12,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash"`
	FileExtension    string                               `protobuf:"bytes,13,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension"`
}

func (x *CreateCodeReferenceRequest) Reset() {
	*x = CreateCodeReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCodeReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCodeReferenceRequest) ProtoMessage() {}

func (x *CreateCodeReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCodeReferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateCodeReferenceRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{48}
}

func (x *CreateCodeReferenceRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *CreateCodeReferenceRequest) GetCodeSnippet() string {
	if x != nil {
		return x.CodeSnippet
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *CreateCodeReferenceRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetRepositoryOwner() string {
	if x != nil {
		return x.RepositoryOwner
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetRepositoryType() coderef.CodeReference_RepositoryType {
	if x != nil {
		return x.RepositoryType
	}
	return coderef.CodeReference_REPOSITORY_TYPE_UNSPECIFIED
}

func (x *CreateCodeReferenceRequest) GetRepositoryBranch() string {
	if x != nil {
		return x.RepositoryBranch
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

type CreateCodeReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeReference *coderef.CodeReference `protobuf:"bytes,1,opt,name=code_reference,json=codeReference,proto3" json:"code_reference"`
}

func (x *CreateCodeReferenceResponse) Reset() {
	*x = CreateCodeReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCodeReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCodeReferenceResponse) ProtoMessage() {}

func (x *CreateCodeReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCodeReferenceResponse.ProtoReflect.Descriptor instead.
func (*CreateCodeReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{49}
}

func (x *CreateCodeReferenceResponse) GetCodeReference() *coderef.CodeReference {
	if x != nil {
		return x.CodeReference
	}
	return nil
}

type UpdateCodeReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FilePath         string   `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path"`
	LineNumber       int32    `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number"`
	CodeSnippet      string   `protobuf:"bytes,4,opt,name=code_snippet,json=codeSnippet,proto3" json:"code_snippet"`
	ContentHash      string   `protobuf:"bytes,5,opt,name=content_hash,json=contentHash,proto3" json:"content_hash"`
	Aliases          []string `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases"`
	RepositoryBranch string   `protobuf:"bytes,7,opt,name=repository_branch,json=repositoryBranch,proto3" json:"repository_branch"`
	CommitHash       string   `protobuf:"bytes,8,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash"`
	FileExtension    string   `protobuf:"bytes,9,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension"`
}

func (x *UpdateCodeReferenceRequest) Reset() {
	*x = UpdateCodeReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCodeReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCodeReferenceRequest) ProtoMessage() {}

func (x *UpdateCodeReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCodeReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateCodeReferenceRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateCodeReferenceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *UpdateCodeReferenceRequest) GetCodeSnippet() string {
	if x != nil {
		return x.CodeSnippet
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *UpdateCodeReferenceRequest) GetRepositoryBranch() string {
	if x != nil {
		return x.RepositoryBranch
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

type UpdateCodeReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeReference *coderef.CodeReference `protobuf:"bytes,1,opt,name=code_reference,json=codeReference,proto3" json:"code_reference"`
}

func (x *UpdateCodeReferenceResponse) Reset() {
	*x = UpdateCodeReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCodeReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCodeReferenceResponse) ProtoMessage() {}

func (x *UpdateCodeReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCodeReferenceResponse.ProtoReflect.Descriptor instead.
func (*UpdateCodeReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateCodeReferenceResponse) GetCodeReference() *coderef.CodeReference {
	if x != nil {
		return x.CodeReference
	}
	return nil
}

type DeleteCodeReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteCodeReferenceRequest) Reset() {
	*x = DeleteCodeReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCodeReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCodeReferenceRequest) ProtoMessage() {}

func (x *DeleteCodeReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCodeReferenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteCodeReferenceRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteCodeReferenceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCodeReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCodeReferenceResponse) Reset() {
	*x = DeleteCodeReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCodeReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCodeReferenceResponse) ProtoMessage() {}

func (x *DeleteCodeReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCodeReferenceResponse.ProtoReflect.Descriptor instead.
func (*DeleteCodeReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{53}
}

type GetEvaluationsRequest_UserEvaluationCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvaluatedAt           int64 `protobuf:"varint,1,opt,name=evaluated_at,json=evaluatedAt,proto3" json:"evaluated_at"`
	UserAttributesUpdated bool  `protobuf:"varint,2,opt,name=user_attributes_updated,json=userAttributesUpdated,proto3" json:"user_attributes_updated"`
}

func (x *GetEvaluationsRequest_UserEvaluationCondition) Reset() {
	*x = GetEvaluationsRequest_UserEvaluationCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationsRequest_UserEvaluationCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationsRequest_UserEvaluationCondition) ProtoMessage() {}

func (x *GetEvaluationsRequest_UserEvaluationCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationsRequest_UserEvaluationCondition.ProtoReflect.Descriptor instead.
func (*GetEvaluationsRequest_UserEvaluationCondition) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetEvaluationsRequest_UserEvaluationCondition) GetEvaluatedAt() int64 {
	if x != nil {
		return x.EvaluatedAt
	}
	return 0
}

func (x *GetEvaluationsRequest_UserEvaluationCondition) GetUserAttributesUpdated() bool {
	if x != nil {
		return x.UserAttributesUpdated
	}
	return false
}

type RegisterEventsResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retriable bool   `protobuf:"varint,1,opt,name=retriable,proto3" json:"retriable"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
}

func (x *RegisterEventsResponse_Error) Reset() {
	*x = RegisterEventsResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterEventsResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterEventsResponse_Error) ProtoMessage() {}

func (x *RegisterEventsResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterEventsResponse_Error.ProtoReflect.Descriptor instead.
func (*RegisterEventsResponse_Error) Descriptor() ([]byte, []int) {
	return file_proto_gateway_service_proto_rawDescGZIP(), []int{11, 0}
}

func (x *RegisterEventsResponse_Error) GetRetriable() bool {
	if x != nil {
		return x.Retriable
	}
	return false
}

func (x *RegisterEventsResponse_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_proto_gateway_service_proto protoreflect.FileDescriptor

var file_proto_gateway_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x75, 0x73, 0x68,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xfa, 0x03, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x7c, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x74, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64,
	0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x1a, 0x3f, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x6a, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9c,
	0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0f, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75,
	0x0a, 0x1c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x66,
	0x66, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6f, 0x66, 0x66, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4d, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44, 0x92, 0x41, 0x41,
	0x2a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0x2e, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x69,
	0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf5, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x5e, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x86, 0x0a, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x11, 0x18, 0x01, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x61, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x11, 0x18, 0x01, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x18, 0x01, 0x92, 0x41, 0x0c, 0x32,
	0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x18, 0x01, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6f, 0x66,
	0x66, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x58, 0x0a,
	0x14, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x4d,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x90, 0x02,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x75, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x59,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x73,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x7b, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x06, 0x70, 0x75,
	0x73, 0x68, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6b, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x63,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x66, 0x63, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x2a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x32, 0x50, 0x69, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x75, 0x73, 0x68, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x2e, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x3e, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x75, 0x73,
	0x68, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x22, 0xa5, 0x03, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x59, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x08, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x6c, 0x0a, 0x11, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x32, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x12, 0x51, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x32, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x68, 0x92, 0x41, 0x65, 0x2a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x32, 0x59, 0x69, 0x66, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c,
	0x20, 0x62, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2e, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x92, 0x41, 0x51, 0x2a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x32, 0x46, 0x69, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62,
	0x65, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x51, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x32, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x42, 0x79, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x5d, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x42,
	0x79, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xda, 0x04, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x60, 0x0a, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0xcd, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x64, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa3, 0x04, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0xbf, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe0, 0x3a, 0x0a, 0x07, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0xb0, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xa9, 0x01, 0x0a, 0x16,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x53, 0x44, 0x4b, 0x73, 0x12, 0x0f, 0x47, 0x65, 0x74, 0x20, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x61, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65,
	0x64, 0x20, 0x61, 0x20, 0x60, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x60, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1b, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xaa, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xa7, 0x01, 0x0a, 0x16, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x53, 0x44, 0x4b, 0x73, 0x12, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x61, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20,
	0x61, 0x20, 0x60, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b,
	0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb8, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xcd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0xac, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x53, 0x44, 0x4b, 0x73, 0x12, 0x11, 0x47, 0x65, 0x74,
	0x20, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x60,
	0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x6f, 0x20,
	0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79,
	0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e,
	0x2a, 0x1d, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0xb9, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xad, 0x01, 0x0a, 0x16,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x53, 0x44, 0x4b, 0x73, 0x12, 0x11, 0x47, 0x65, 0x74, 0x20, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x61, 0x47, 0x65, 0x74, 0x73, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e,
	0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x60, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1d, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xb5, 0x02, 0x0a, 0x0e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xcd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0xae, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x53, 0x44, 0x4b, 0x73, 0x12, 0x0f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x66,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x47, 0x6f, 0x61, 0x6c, 0x20, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65,
	0x64, 0x20, 0x61, 0x20, 0x60, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x60, 0x20, 0x6f, 0x72, 0x20,
	0x60, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1b, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x8f, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xc2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x92, 0x41, 0xb0, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x53, 0x44, 0x4b, 0x73, 0x12, 0x05, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x1a, 0x7c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x54, 0x61, 0x62, 0x20,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x47, 0x6f, 0x61, 0x6c, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x54,
	0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c,
	0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x2a, 0x11, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0xf1, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x2f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xf4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xca, 0x01, 0x0a,
	0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x20, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6d, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	0x20, 0x65, 0x6e, 0x64, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65,
	0x64, 0x20, 0x61, 0x20, 0x60, 0x52, 0x45, 0x41, 0x44, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b,
	0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x90, 0x02, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x91, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x1a, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
	0x20, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x20, 0x54,
	0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c,
	0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x60, 0x20, 0x6f, 0x72, 0x20, 0x60, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x60, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xea, 0x01, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x92, 0x41,
	0x78, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x03, 0x47, 0x65, 0x74, 0x1a, 0x45, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61,
	0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75,
	0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x52, 0x45, 0x41, 0x44, 0x60, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1b, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x12, 0xf3, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x92, 0x41, 0x7a, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x45, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x2e, 0x20,
	0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49,
	0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x52, 0x45,
	0x41, 0x44, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x2a, 0x1c, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x8c, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x27, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x32, 0x0b, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x8d,
	0x01, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x46, 0x6c, 0x61, 0x67, 0x2e,
	0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x60, 0x20, 0x6f, 0x72, 0x20, 0x60, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x60,
	0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xa8,
	0x01, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07,
	0x12, 0x05, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x92, 0x41, 0x4f, 0x0a, 0x07, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x2a, 0x50, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x20, 0x69, 0x74, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x2a, 0x10, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x62, 0x00, 0x12, 0xda, 0x01, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x73, 0x92, 0x41, 0x6a, 0x0a, 0x06, 0x50, 0x75,
	0x73, 0x68, 0x65, 0x73, 0x12, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x3e, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x70, 0x75, 0x73, 0x68, 0x65, 0x73, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e,
	0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x52, 0x45, 0x41, 0x44, 0x60, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1a, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x65,
	0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xaf, 0x02, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x75, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xbc, 0x01, 0x0a, 0x06, 0x50, 0x75,
	0x73, 0x68, 0x65, 0x73, 0x12, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x8b, 0x01, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x50, 0x75, 0x73, 0x68,
	0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x46, 0x69, 0x72,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x28, 0x46, 0x43, 0x4d, 0x29, 0x2e, 0x20, 0x54, 0x6f, 0x20,
	0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79,
	0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x60, 0x20, 0x6f, 0x72, 0x20, 0x60, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x60, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1c, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x65,
	0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xda, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x73, 0x68, 0x12, 0x21, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x92, 0x41,
	0x74, 0x0a, 0x06, 0x50, 0x75, 0x73, 0x68, 0x65, 0x73, 0x12, 0x03, 0x47, 0x65, 0x74, 0x1a, 0x4a,
	0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x50, 0x75, 0x73, 0x68, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e,
	0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x52, 0x45, 0x41, 0x44, 0x60, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x19, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x65,
	0x73, 0x2e, 0x67, 0x65, 0x74, 0x12, 0xf7, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x32, 0x08, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x75, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x84, 0x01, 0x0a, 0x06, 0x50, 0x75, 0x73,
	0x68, 0x65, 0x73, 0x12, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x54, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x50, 0x75, 0x73, 0x68, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x61,
	0x20, 0x60, 0x57, 0x52, 0x49, 0x54, 0x45, 0x60, 0x20, 0x6f, 0x72, 0x20, 0x60, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x2a, 0x1c, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x65, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x8a, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x32, 0x12, 0x29, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x85, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x53, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x20,
	0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49,
	0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x60, 0x20, 0x6f, 0x72, 0x20, 0x60, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x60, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1d, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x87, 0x02, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32,
	0x12, 0x29, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x32, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x82, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e,
	0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c,
	0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20,
	0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x57, 0x52, 0x49, 0x54, 0x45, 0x60, 0x20, 0x6f,
	0x72, 0x20, 0x60, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65,
	0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1d, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xf9, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x26, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x92, 0x41,
	0x80, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x47, 0x65, 0x74,
	0x20, 0x62, 0x79, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x49, 0x44, 0x1a, 0x41, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20,
	0x61, 0x20, 0x60, 0x52, 0x45, 0x41, 0x44, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x67,
	0x65, 0x74, 0x12, 0xe4, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x32, 0x42, 0x79, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x35, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x32, 0x42, 0x79, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x32, 0x42, 0x79, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xd5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x92, 0x41, 0xa3, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x15, 0x47, 0x65, 0x74, 0x20, 0x62, 0x79, 0x20, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x1a, 0x53, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x62, 0x79, 0x20, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c,
	0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20,
	0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x52, 0x45, 0x41, 0x44, 0x60, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x2c, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0xf4, 0x01, 0x0a, 0x05, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x12, 0x1f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12,
	0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x5f, 0x6d, 0x65, 0x92, 0x41, 0x89, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x4a, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x20,
	0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49,
	0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x52, 0x45,
	0x41, 0x44, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x2a, 0x1d, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65,
	0x12, 0xf1, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x56, 0x32, 0x12, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x56, 0x32,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x92,
	0x41, 0x72, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x44, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64,
	0x20, 0x61, 0x20, 0x60, 0x52, 0x45, 0x41, 0x44, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65,
	0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x1b, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x8f, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x92,
	0x41, 0x83, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x03, 0x47, 0x65, 0x74, 0x1a, 0x47, 0x47, 0x65, 0x74, 0x20, 0x61,
	0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x52,
	0x45, 0x41, 0x44, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x2a, 0x22, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x12, 0x98, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x92, 0x41, 0x85, 0x01, 0x0a, 0x0f, 0x43, 0x6f,
	0x64, 0x65, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x47, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61,
	0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75,
	0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61, 0x20, 0x60, 0x52, 0x45, 0x41, 0x44, 0x60, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x23, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0xb4, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x9c, 0x01, 0x0a, 0x0f, 0x43, 0x6f,
	0x64, 0x65, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x5a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x61,
	0x20, 0x60, 0x57, 0x52, 0x49, 0x54, 0x45, 0x60, 0x20, 0x6f, 0x72, 0x20, 0x60, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x2a, 0x25, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xb0, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x32, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x98, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x56, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65,
	0x64, 0x20, 0x61, 0x20, 0x60, 0x57, 0x52, 0x49, 0x54, 0x45, 0x60, 0x20, 0x6f, 0x72, 0x20, 0x60,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x25, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xad, 0x02, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xb6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x92,
	0x41, 0x98, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x56, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65,
	0x64, 0x20, 0x61, 0x20, 0x60, 0x57, 0x52, 0x49, 0x54, 0x45, 0x60, 0x20, 0x6f, 0x72, 0x20, 0x60,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x60, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x2e, 0x2a, 0x25, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x84, 0x06, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x92,
	0x41, 0xcf, 0x05, 0x12, 0x20, 0x0a, 0x19, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x20, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x32, 0x03, 0x31, 0x2e, 0x30, 0x1a, 0x08, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x2a,
	0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0xb4, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0xac,
	0x01, 0x0a, 0x3a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x62, 0x61, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0x16, 0x0a,
	0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x56, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x42, 0x7b, 0x20, 0x22, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x3a, 0x20, 0x33, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2c, 0x20, 0x22, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x5d, 0x20, 0x7d, 0x52, 0xb2, 0x01,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0xaa, 0x01, 0x0a, 0x3d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x28, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x29, 0x2e, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x51, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x12, 0x3d, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x31,
	0x36, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6e,
	0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x2c, 0x20, 0x22, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x5d,
	0x20, 0x7d, 0x52, 0xa9, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0xa1, 0x01, 0x0a, 0x38, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x4d, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x12, 0x39, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x37,
	0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6e, 0x6f,
	0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x2c, 0x20, 0x22,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x5d, 0x20, 0x7d, 0x5a, 0x50,
	0x0a, 0x4e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x40,
	0x08, 0x02, 0x12, 0x2b, 0x54, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x1a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02,
	0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_gateway_service_proto_rawDescOnce sync.Once
	file_proto_gateway_service_proto_rawDescData = file_proto_gateway_service_proto_rawDesc
)

func file_proto_gateway_service_proto_rawDescGZIP() []byte {
	file_proto_gateway_service_proto_rawDescOnce.Do(func() {
		file_proto_gateway_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_gateway_service_proto_rawDescData)
	})
	return file_proto_gateway_service_proto_rawDescData
}

var file_proto_gateway_service_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_proto_gateway_service_proto_goTypes = []interface{}{
	(*PingRequest)(nil),                                          // 0: bucketeer.gateway.PingRequest
	(*PingResponse)(nil),                                         // 1: bucketeer.gateway.PingResponse
	(*GetFeatureFlagsRequest)(nil),                               // 2: bucketeer.gateway.GetFeatureFlagsRequest
	(*GetFeatureFlagsResponse)(nil),                              // 3: bucketeer.gateway.GetFeatureFlagsResponse
	(*GetSegmentUsersRequest)(nil),                               // 4: bucketeer.gateway.GetSegmentUsersRequest
	(*GetSegmentUsersResponse)(nil),                              // 5: bucketeer.gateway.GetSegmentUsersResponse
	(*GetEvaluationsRequest)(nil),                                // 6: bucketeer.gateway.GetEvaluationsRequest
	(*GetEvaluationsResponse)(nil),                               // 7: bucketeer.gateway.GetEvaluationsResponse
	(*GetEvaluationRequest)(nil),                                 // 8: bucketeer.gateway.GetEvaluationRequest
	(*GetEvaluationResponse)(nil),                                // 9: bucketeer.gateway.GetEvaluationResponse
	(*RegisterEventsRequest)(nil),                                // 10: bucketeer.gateway.RegisterEventsRequest
	(*RegisterEventsResponse)(nil),                               // 11: bucketeer.gateway.RegisterEventsResponse
	(*TrackRequest)(nil),                                         // 12: bucketeer.gateway.TrackRequest
	(*TrackResponse)(nil),                                        // 13: bucketeer.gateway.TrackResponse
	(*DebugEvaluateFeaturesRequest)(nil),                         // 14: bucketeer.gateway.DebugEvaluateFeaturesRequest
	(*DebugEvaluateFeaturesResponse)(nil),                        // 15: bucketeer.gateway.DebugEvaluateFeaturesResponse
	(*CreateFeatureRequest)(nil),                                 // 16: bucketeer.gateway.CreateFeatureRequest
	(*CreateFeatureResponse)(nil),                                // 17: bucketeer.gateway.CreateFeatureResponse
	(*GetFeatureRequest)(nil),                                    // 18: bucketeer.gateway.GetFeatureRequest
	(*GetFeatureResponse)(nil),                                   // 19: bucketeer.gateway.GetFeatureResponse
	(*ListFeaturesRequest)(nil),                                  // 20: bucketeer.gateway.ListFeaturesRequest
	(*ListFeaturesResponse)(nil),                                 // 21: bucketeer.gateway.ListFeaturesResponse
	(*UpdateFeatureRequest)(nil),                                 // 22: bucketeer.gateway.UpdateFeatureRequest
	(*UpdateFeatureResponse)(nil),                                // 23: bucketeer.gateway.UpdateFeatureResponse
	(*ListPushesRequest)(nil),                                    // 24: bucketeer.gateway.ListPushesRequest
	(*ListPushesResponse)(nil),                                   // 25: bucketeer.gateway.ListPushesResponse
	(*CreatePushRequest)(nil),                                    // 26: bucketeer.gateway.CreatePushRequest
	(*CreatePushResponse)(nil),                                   // 27: bucketeer.gateway.CreatePushResponse
	(*GetPushRequest)(nil),                                       // 28: bucketeer.gateway.GetPushRequest
	(*GetPushResponse)(nil),                                      // 29: bucketeer.gateway.GetPushResponse
	(*UpdatePushRequest)(nil),                                    // 30: bucketeer.gateway.UpdatePushRequest
	(*UpdatePushResponse)(nil),                                   // 31: bucketeer.gateway.UpdatePushResponse
	(*CreateAccountV2Request)(nil),                               // 32: bucketeer.gateway.CreateAccountV2Request
	(*CreateAccountV2Response)(nil),                              // 33: bucketeer.gateway.CreateAccountV2Response
	(*UpdateAccountV2Request)(nil),                               // 34: bucketeer.gateway.UpdateAccountV2Request
	(*UpdateAccountV2Response)(nil),                              // 35: bucketeer.gateway.UpdateAccountV2Response
	(*GetAccountV2Request)(nil),                                  // 36: bucketeer.gateway.GetAccountV2Request
	(*GetAccountV2Response)(nil),                                 // 37: bucketeer.gateway.GetAccountV2Response
	(*GetAccountV2ByEnvironmentIDRequest)(nil),                   // 38: bucketeer.gateway.GetAccountV2ByEnvironmentIDRequest
	(*GetAccountV2ByEnvironmentIDResponse)(nil),                  // 39: bucketeer.gateway.GetAccountV2ByEnvironmentIDResponse
	(*GetMeRequest)(nil),                                         // 40: bucketeer.gateway.GetMeRequest
	(*GetMeResponse)(nil),                                        // 41: bucketeer.gateway.GetMeResponse
	(*ListAccountsV2Request)(nil),                                // 42: bucketeer.gateway.ListAccountsV2Request
	(*ListAccountsV2Response)(nil),                               // 43: bucketeer.gateway.ListAccountsV2Response
	(*GetCodeReferenceRequest)(nil),                              // 44: bucketeer.gateway.GetCodeReferenceRequest
	(*GetCodeReferenceResponse)(nil),                             // 45: bucketeer.gateway.GetCodeReferenceResponse
	(*ListCodeReferencesRequest)(nil),                            // 46: bucketeer.gateway.ListCodeReferencesRequest
	(*ListCodeReferencesResponse)(nil),                           // 47: bucketeer.gateway.ListCodeReferencesResponse
	(*CreateCodeReferenceRequest)(nil),                           // 48: bucketeer.gateway.CreateCodeReferenceRequest
	(*CreateCodeReferenceResponse)(nil),                          // 49: bucketeer.gateway.CreateCodeReferenceResponse
	(*UpdateCodeReferenceRequest)(nil),                           // 50: bucketeer.gateway.UpdateCodeReferenceRequest
	(*UpdateCodeReferenceResponse)(nil),                          // 51: bucketeer.gateway.UpdateCodeReferenceResponse
	(*DeleteCodeReferenceRequest)(nil),                           // 52: bucketeer.gateway.DeleteCodeReferenceRequest
	(*DeleteCodeReferenceResponse)(nil),                          // 53: bucketeer.gateway.DeleteCodeReferenceResponse
	(*GetEvaluationsRequest_UserEvaluationCondition)(nil),        // 54: bucketeer.gateway.GetEvaluationsRequest.UserEvaluationCondition
	(*RegisterEventsResponse_Error)(nil),                         // 55: bucketeer.gateway.RegisterEventsResponse.Error
	nil,                                                          // 56: bucketeer.gateway.RegisterEventsResponse.ErrorsEntry
	(client.SourceId)(0),                                         // 57: bucketeer.event.client.SourceId
	(*feature.Feature)(nil),                                      // 58: bucketeer.feature.Feature
	(*feature.SegmentUsers)(nil),                                 // 59: bucketeer.feature.SegmentUsers
	(*user.User)(nil),                                            // 60: bucketeer.user.User
	(feature.UserEvaluations_State)(0),                           // 61: bucketeer.feature.UserEvaluations.State
	(*feature.UserEvaluations)(nil),                              // 62: bucketeer.feature.UserEvaluations
	(*feature.Evaluation)(nil),                                   // 63: bucketeer.feature.Evaluation
	(*client.Event)(nil),                                         // 64: bucketeer.event.client.Event
	(feature.Feature_VariationType)(0),                           // 65: bucketeer.feature.Feature.VariationType
	(*feature.Variation)(nil),                                    // 66: bucketeer.feature.Variation
	(*wrapperspb.Int32Value)(nil),                                // 67: google.protobuf.Int32Value
	(feature.ListFeaturesRequest_OrderBy)(0),                     // 68: bucketeer.feature.ListFeaturesRequest.OrderBy
	(feature.ListFeaturesRequest_OrderDirection)(0),              // 69: bucketeer.feature.ListFeaturesRequest.OrderDirection
	(*wrapperspb.StringValue)(nil),                               // 70: google.protobuf.StringValue
	(*common.StringListValue)(nil),                               // 71: bucketeer.common.StringListValue
	(*wrapperspb.BoolValue)(nil),                                 // 72: google.protobuf.BoolValue
	(*feature.VariationListValue)(nil),                           // 73: bucketeer.feature.VariationListValue
	(*feature.PrerequisiteListValue)(nil),                        // 74: bucketeer.feature.PrerequisiteListValue
	(*feature.TargetListValue)(nil),                              // 75: bucketeer.feature.TargetListValue
	(*feature.RuleListValue)(nil),                                // 76: bucketeer.feature.RuleListValue
	(*feature.Strategy)(nil),                                     // 77: bucketeer.feature.Strategy
	(*feature.VariationChange)(nil),                              // 78: bucketeer.feature.VariationChange
	(*feature.RuleChange)(nil),                                   // 79: bucketeer.feature.RuleChange
	(*feature.PrerequisiteChange)(nil),                           // 80: bucketeer.feature.PrerequisiteChange
	(*feature.TargetChange)(nil),                                 // 81: bucketeer.feature.TargetChange
	(*feature.TagChange)(nil),                                    // 82: bucketeer.feature.TagChange
	(push.ListPushesRequest_OrderBy)(0),                          // 83: bucketeer.push.ListPushesRequest.OrderBy
	(push.ListPushesRequest_OrderDirection)(0),                   // 84: bucketeer.push.ListPushesRequest.OrderDirection
	(*push.Push)(nil),                                            // 85: bucketeer.push.Push
	(account.AccountV2_Role_Organization)(0),                     // 86: bucketeer.account.AccountV2.Role.Organization
	(*account.AccountV2_EnvironmentRole)(nil),                    // 87: bucketeer.account.AccountV2.EnvironmentRole
	(*account.AccountV2)(nil),                                    // 88: bucketeer.account.AccountV2
	(*account.UpdateAccountV2Request_OrganizationRoleValue)(nil), // 89: bucketeer.account.UpdateAccountV2Request.OrganizationRoleValue
	(*wrapperspb.Int64Value)(nil),                                // 90: google.protobuf.Int64Value
	(*account.UpdateAccountV2Request_AccountV2Avatar)(nil),       // 91: bucketeer.account.UpdateAccountV2Request.AccountV2Avatar
	(*account.ConsoleAccount)(nil),                               // 92: bucketeer.account.ConsoleAccount
	(account.ListAccountsV2Request_OrderBy)(0),                   // 93: bucketeer.account.ListAccountsV2Request.OrderBy
	(account.ListAccountsV2Request_OrderDirection)(0),            // 94: bucketeer.account.ListAccountsV2Request.OrderDirection
	(*coderef.CodeReference)(nil),                                // 95: bucketeer.coderef.CodeReference
	(coderef.ListCodeReferencesRequest_OrderBy)(0),               // 96: bucketeer.coderef.ListCodeReferencesRequest.OrderBy
	(coderef.ListCodeReferencesRequest_OrderDirection)(0),        // 97: bucketeer.coderef.ListCodeReferencesRequest.OrderDirection
	(coderef.CodeReference_RepositoryType)(0),                    // 98: bucketeer.coderef.CodeReference.RepositoryType
}
var file_proto_gateway_service_proto_depIdxs = []int32{
	57,  // 0: bucketeer.gateway.GetFeatureFlagsRequest.source_id:type_name -> bucketeer.event.client.SourceId
	58,  // 1: bucketeer.gateway.GetFeatureFlagsResponse.features:type_name -> bucketeer.feature.Feature
	57,  // 2: bucketeer.gateway.GetSegmentUsersRequest.source_id:type_name -> bucketeer.event.client.SourceId
	59,  // 3: bucketeer.gateway.GetSegmentUsersResponse.segment_users:type_name -> bucketeer.feature.SegmentUsers
	60,  // 4: bucketeer.gateway.GetEvaluationsRequest.user:type_name -> bucketeer.user.User
	57,  // 5: bucketeer.gateway.GetEvaluationsRequest.source_id:type_name -> bucketeer.event.client.SourceId
	54,  // 6: bucketeer.gateway.GetEvaluationsRequest.user_evaluation_condition:type_name -> bucketeer.gateway.GetEvaluationsRequest.UserEvaluationCondition
	61,  // 7: bucketeer.gateway.GetEvaluationsResponse.state:type_name -> bucketeer.feature.UserEvaluations.State
	62,  // 8: bucketeer.gateway.GetEvaluationsResponse.evaluations:type_name -> bucketeer.feature.UserEvaluations
	60,  // 9: bucketeer.gateway.GetEvaluationRequest.user:type_name -> bucketeer.user.User
	57,  // 10: bucketeer.gateway.GetEvaluationRequest.source_id:type_name -> bucketeer.event.client.SourceId
	63,  // 11: bucketeer.gateway.GetEvaluationResponse.evaluation:type_name -> bucketeer.feature.Evaluation
	64,  // 12: bucketeer.gateway.RegisterEventsRequest.events:type_name -> bucketeer.event.client.Event
	57,  // 13: bucketeer.gateway.RegisterEventsRequest.source_id:type_name -> bucketeer.event.client.SourceId
	56,  // 14: bucketeer.gateway.RegisterEventsResponse.errors:type_name -> bucketeer.gateway.RegisterEventsResponse.ErrorsEntry
	60,  // 15: bucketeer.gateway.DebugEvaluateFeaturesRequest.users:type_name -> bucketeer.user.User
	63,  // 16: bucketeer.gateway.DebugEvaluateFeaturesResponse.evaluations:type_name -> bucketeer.feature.Evaluation
	65,  // 17: bucketeer.gateway.CreateFeatureRequest.variation_type:type_name -> bucketeer.feature.Feature.VariationType
	66,  // 18: bucketeer.gateway.CreateFeatureRequest.variations:type_name -> bucketeer.feature.Variation
	58,  // 19: bucketeer.gateway.CreateFeatureResponse.feature:type_name -> bucketeer.feature.Feature
	67,  // 20: bucketeer.gateway.GetFeatureRequest.feature_version:type_name -> google.protobuf.Int32Value
	58,  // 21: bucketeer.gateway.GetFeatureResponse.feature:type_name -> bucketeer.feature.Feature
	68,  // 22: bucketeer.gateway.ListFeaturesRequest.order_by:type_name -> bucketeer.feature.ListFeaturesRequest.OrderBy
	69,  // 23: bucketeer.gateway.ListFeaturesRequest.order_direction:type_name -> bucketeer.feature.ListFeaturesRequest.OrderDirection
	58,  // 24: bucketeer.gateway.ListFeaturesResponse.features:type_name -> bucketeer.feature.Feature
	70,  // 25: bucketeer.gateway.UpdateFeatureRequest.name:type_name -> google.protobuf.StringValue
	70,  // 26: bucketeer.gateway.UpdateFeatureRequest.description:type_name -> google.protobuf.StringValue
	71,  // 27: bucketeer.gateway.UpdateFeatureRequest.tags:type_name -> bucketeer.common.StringListValue
	72,  // 28: bucketeer.gateway.UpdateFeatureRequest.enabled:type_name -> google.protobuf.BoolValue
	72,  // 29: bucketeer.gateway.UpdateFeatureRequest.archived:type_name -> google.protobuf.BoolValue
	73,  // 30: bucketeer.gateway.UpdateFeatureRequest.variations:type_name -> bucketeer.feature.VariationListValue
	74,  // 31: bucketeer.gateway.UpdateFeatureRequest.prerequisites:type_name -> bucketeer.feature.PrerequisiteListValue
	75,  // 32: bucketeer.gateway.UpdateFeatureRequest.targets:type_name -> bucketeer.feature.TargetListValue
	76,  // 33: bucketeer.gateway.UpdateFeatureRequest.rules:type_name -> bucketeer.feature.RuleListValue
	77,  // 34: bucketeer.gateway.UpdateFeatureRequest.default_strategy:type_name -> bucketeer.feature.Strategy
	70,  // 35: bucketeer.gateway.UpdateFeatureRequest.off_variation:type_name -> google.protobuf.StringValue
	78,  // 36: bucketeer.gateway.UpdateFeatureRequest.variation_changes:type_name -> bucketeer.feature.VariationChange
	79,  // 37: bucketeer.gateway.UpdateFeatureRequest.rule_changes:type_name -> bucketeer.feature.RuleChange
	80,  // 38: bucketeer.gateway.UpdateFeatureRequest.prerequisite_changes:type_name -> bucketeer.feature.PrerequisiteChange
	81,  // 39: bucketeer.gateway.UpdateFeatureRequest.target_changes:type_name -> bucketeer.feature.TargetChange
	82,  // 40: bucketeer.gateway.UpdateFeatureRequest.tag_changes:type_name -> bucketeer.feature.TagChange
	58,  // 41: bucketeer.gateway.UpdateFeatureResponse.feature:type_name -> bucketeer.feature.Feature
	83,  // 42: bucketeer.gateway.ListPushesRequest.order_by:type_name -> bucketeer.push.ListPushesRequest.OrderBy
	84,  // 43: bucketeer.gateway.ListPushesRequest.order_direction:type_name -> bucketeer.push.ListPushesRequest.OrderDirection
	85,  // 44: bucketeer.gateway.ListPushesResponse.pushes:type_name -> bucketeer.push.Push
	85,  // 45: bucketeer.gateway.CreatePushResponse.push:type_name -> bucketeer.push.Push
	85,  // 46: bucketeer.gateway.GetPushResponse.push:type_name -> bucketeer.push.Push
	70,  // 47: bucketeer.gateway.UpdatePushRequest.name:type_name -> google.protobuf.StringValue
	72,  // 48: bucketeer.gateway.UpdatePushRequest.deleted:type_name -> google.protobuf.BoolValue
	85,  // 49: bucketeer.gateway.UpdatePushResponse.push:type_name -> bucketeer.push.Push
	86,  // 50: bucketeer.gateway.CreateAccountV2Request.organization_role:type_name -> bucketeer.account.AccountV2.Role.Organization
	87,  // 51: bucketeer.gateway.CreateAccountV2Request.environment_roles:type_name -> bucketeer.account.AccountV2.EnvironmentRole
	88,  // 52: bucketeer.gateway.CreateAccountV2Response.account:type_name -> bucketeer.account.AccountV2
	70,  // 53: bucketeer.gateway.UpdateAccountV2Request.name:type_name -> google.protobuf.StringValue
	70,  // 54: bucketeer.gateway.UpdateAccountV2Request.avatar_image_url:type_name -> google.protobuf.StringValue
	89,  // 55: bucketeer.gateway.UpdateAccountV2Request.organization_role:type_name -> bucketeer.account.UpdateAccountV2Request.OrganizationRoleValue
	87,  // 56: bucketeer.gateway.UpdateAccountV2Request.environment_roles:type_name -> bucketeer.account.AccountV2.EnvironmentRole
	70,  // 57: bucketeer.gateway.UpdateAccountV2Request.first_name:type_name -> google.protobuf.StringValue
	70,  // 58: bucketeer.gateway.UpdateAccountV2Request.last_name:type_name -> google.protobuf.StringValue
	70,  // 59: bucketeer.gateway.UpdateAccountV2Request.language:type_name -> google.protobuf.StringValue
	90,  // 60: bucketeer.gateway.UpdateAccountV2Request.last_seen:type_name -> google.protobuf.Int64Value
	91,  // 61: bucketeer.gateway.UpdateAccountV2Request.avatar:type_name -> bucketeer.account.UpdateAccountV2Request.AccountV2Avatar
	72,  // 62: bucketeer.gateway.UpdateAccountV2Request.disabled:type_name -> google.protobuf.BoolValue
	72,  // 63: bucketeer.gateway.UpdateAccountV2Request.deleted:type_name -> google.protobuf.BoolValue
	88,  // 64: bucketeer.gateway.UpdateAccountV2Response.account:type_name -> bucketeer.account.AccountV2
	88,  // 65: bucketeer.gateway.GetAccountV2Response.account:type_name -> bucketeer.account.AccountV2
	88,  // 66: bucketeer.gateway.GetAccountV2ByEnvironmentIDResponse.account:type_name -> bucketeer.account.AccountV2
	92,  // 67: bucketeer.gateway.GetMeResponse.account:type_name -> bucketeer.account.ConsoleAccount
	93,  // 68: bucketeer.gateway.ListAccountsV2Request.order_by:type_name -> bucketeer.account.ListAccountsV2Request.OrderBy
	94,  // 69: bucketeer.gateway.ListAccountsV2Request.order_direction:type_name -> bucketeer.account.ListAccountsV2Request.OrderDirection
	72,  // 70: bucketeer.gateway.ListAccountsV2Request.disabled:type_name -> google.protobuf.BoolValue
	67,  // 71: bucketeer.gateway.ListAccountsV2Request.organization_role:type_name -> google.protobuf.Int32Value
	70,  // 72: bucketeer.gateway.ListAccountsV2Request.environment_id:type_name -> google.protobuf.StringValue
	67,  // 73: bucketeer.gateway.ListAccountsV2Request.environment_role:type_name -> google.protobuf.Int32Value
	88,  // 74: bucketeer.gateway.ListAccountsV2Response.accounts:type_name -> bucketeer.account.AccountV2
	95,  // 75: bucketeer.gateway.GetCodeReferenceResponse.code_reference:type_name -> bucketeer.coderef.CodeReference
	96,  // 76: bucketeer.gateway.ListCodeReferencesRequest.order_by:type_name -> bucketeer.coderef.ListCodeReferencesRequest.OrderBy
	97,  // 77: bucketeer.gateway.ListCodeReferencesRequest.order_direction:type_name -> bucketeer.coderef.ListCodeReferencesRequest.OrderDirection
	95,  // 78: bucketeer.gateway.ListCodeReferencesResponse.code_references:type_name -> bucketeer.coderef.CodeReference
	98,  // 79: bucketeer.gateway.CreateCodeReferenceRequest.repository_type:type_name -> bucketeer.coderef.CodeReference.RepositoryType
	95,  // 80: bucketeer.gateway.CreateCodeReferenceResponse.code_reference:type_name -> bucketeer.coderef.CodeReference
	95,  // 81: bucketeer.gateway.UpdateCodeReferenceResponse.code_reference:type_name -> bucketeer.coderef.CodeReference
	55,  // 82: bucketeer.gateway.RegisterEventsResponse.ErrorsEntry.value:type_name -> bucketeer.gateway.RegisterEventsResponse.Error
	6,   // 83: bucketeer.gateway.Gateway.GetEvaluations:input_type -> bucketeer.gateway.GetEvaluationsRequest
	8,   // 84: bucketeer.gateway.Gateway.GetEvaluation:input_type -> bucketeer.gateway.GetEvaluationRequest
	2,   // 85: bucketeer.gateway.Gateway.GetFeatureFlags:input_type -> bucketeer.gateway.GetFeatureFlagsRequest
	4,   // 86: bucketeer.gateway.Gateway.GetSegmentUsers:input_type -> bucketeer.gateway.GetSegmentUsersRequest
	10,  // 87: bucketeer.gateway.Gateway.RegisterEvents:input_type -> bucketeer.gateway.RegisterEventsRequest
	12,  // 88: bucketeer.gateway.Gateway.Track:input_type -> bucketeer.gateway.TrackRequest
	14,  // 89: bucketeer.gateway.Gateway.DebugEvaluateFeatures:input_type -> bucketeer.gateway.DebugEvaluateFeaturesRequest
	16,  // 90: bucketeer.gateway.Gateway.CreateFeature:input_type -> bucketeer.gateway.CreateFeatureRequest
	18,  // 91: bucketeer.gateway.Gateway.GetFeature:input_type -> bucketeer.gateway.GetFeatureRequest
	20,  // 92: bucketeer.gateway.Gateway.ListFeatures:input_type -> bucketeer.gateway.ListFeaturesRequest
	22,  // 93: bucketeer.gateway.Gateway.UpdateFeature:input_type -> bucketeer.gateway.UpdateFeatureRequest
	0,   // 94: bucketeer.gateway.Gateway.Ping:input_type -> bucketeer.gateway.PingRequest
	24,  // 95: bucketeer.gateway.Gateway.ListPushes:input_type -> bucketeer.gateway.ListPushesRequest
	26,  // 96: bucketeer.gateway.Gateway.CreatePush:input_type -> bucketeer.gateway.CreatePushRequest
	28,  // 97: bucketeer.gateway.Gateway.GetPush:input_type -> bucketeer.gateway.GetPushRequest
	30,  // 98: bucketeer.gateway.Gateway.UpdatePush:input_type -> bucketeer.gateway.UpdatePushRequest
	32,  // 99: bucketeer.gateway.Gateway.CreateAccountV2:input_type -> bucketeer.gateway.CreateAccountV2Request
	34,  // 100: bucketeer.gateway.Gateway.UpdateAccountV2:input_type -> bucketeer.gateway.UpdateAccountV2Request
	36,  // 101: bucketeer.gateway.Gateway.GetAccountV2:input_type -> bucketeer.gateway.GetAccountV2Request
	38,  // 102: bucketeer.gateway.Gateway.GetAccountV2ByEnvironmentID:input_type -> bucketeer.gateway.GetAccountV2ByEnvironmentIDRequest
	40,  // 103: bucketeer.gateway.Gateway.GetMe:input_type -> bucketeer.gateway.GetMeRequest
	42,  // 104: bucketeer.gateway.Gateway.ListAccountsV2:input_type -> bucketeer.gateway.ListAccountsV2Request
	44,  // 105: bucketeer.gateway.Gateway.GetCodeReference:input_type -> bucketeer.gateway.GetCodeReferenceRequest
	46,  // 106: bucketeer.gateway.Gateway.ListCodeReferences:input_type -> bucketeer.gateway.ListCodeReferencesRequest
	48,  // 107: bucketeer.gateway.Gateway.CreateCodeReference:input_type -> bucketeer.gateway.CreateCodeReferenceRequest
	50,  // 108: bucketeer.gateway.Gateway.UpdateCodeReference:input_type -> bucketeer.gateway.UpdateCodeReferenceRequest
	52,  // 109: bucketeer.gateway.Gateway.DeleteCodeReference:input_type -> bucketeer.gateway.DeleteCodeReferenceRequest
	7,   // 110: bucketeer.gateway.Gateway.GetEvaluations:output_type -> bucketeer.gateway.GetEvaluationsResponse
	9,   // 111: bucketeer.gateway.Gateway.GetEvaluation:output_type -> bucketeer.gateway.GetEvaluationResponse
	3,   // 112: bucketeer.gateway.Gateway.GetFeatureFlags:output_type -> bucketeer.gateway.GetFeatureFlagsResponse
	5,   // 113: bucketeer.gateway.Gateway.GetSegmentUsers:output_type -> bucketeer.gateway.GetSegmentUsersResponse
	11,  // 114: bucketeer.gateway.Gateway.RegisterEvents:output_type -> bucketeer.gateway.RegisterEventsResponse
	13,  // 115: bucketeer.gateway.Gateway.Track:output_type -> bucketeer.gateway.TrackResponse
	15,  // 116: bucketeer.gateway.Gateway.DebugEvaluateFeatures:output_type -> bucketeer.gateway.DebugEvaluateFeaturesResponse
	17,  // 117: bucketeer.gateway.Gateway.CreateFeature:output_type -> bucketeer.gateway.CreateFeatureResponse
	19,  // 118: bucketeer.gateway.Gateway.GetFeature:output_type -> bucketeer.gateway.GetFeatureResponse
	21,  // 119: bucketeer.gateway.Gateway.ListFeatures:output_type -> bucketeer.gateway.ListFeaturesResponse
	23,  // 120: bucketeer.gateway.Gateway.UpdateFeature:output_type -> bucketeer.gateway.UpdateFeatureResponse
	1,   // 121: bucketeer.gateway.Gateway.Ping:output_type -> bucketeer.gateway.PingResponse
	25,  // 122: bucketeer.gateway.Gateway.ListPushes:output_type -> bucketeer.gateway.ListPushesResponse
	27,  // 123: bucketeer.gateway.Gateway.CreatePush:output_type -> bucketeer.gateway.CreatePushResponse
	29,  // 124: bucketeer.gateway.Gateway.GetPush:output_type -> bucketeer.gateway.GetPushResponse
	31,  // 125: bucketeer.gateway.Gateway.UpdatePush:output_type -> bucketeer.gateway.UpdatePushResponse
	33,  // 126: bucketeer.gateway.Gateway.CreateAccountV2:output_type -> bucketeer.gateway.CreateAccountV2Response
	35,  // 127: bucketeer.gateway.Gateway.UpdateAccountV2:output_type -> bucketeer.gateway.UpdateAccountV2Response
	37,  // 128: bucketeer.gateway.Gateway.GetAccountV2:output_type -> bucketeer.gateway.GetAccountV2Response
	39,  // 129: bucketeer.gateway.Gateway.GetAccountV2ByEnvironmentID:output_type -> bucketeer.gateway.GetAccountV2ByEnvironmentIDResponse
	41,  // 130: bucketeer.gateway.Gateway.GetMe:output_type -> bucketeer.gateway.GetMeResponse
	43,  // 131: bucketeer.gateway.Gateway.ListAccountsV2:output_type -> bucketeer.gateway.ListAccountsV2Response
	45,  // 132: bucketeer.gateway.Gateway.GetCodeReference:output_type -> bucketeer.gateway.GetCodeReferenceResponse
	47,  // 133: bucketeer.gateway.Gateway.ListCodeReferences:output_type -> bucketeer.gateway.ListCodeReferencesResponse
	49,  // 134: bucketeer.gateway.Gateway.CreateCodeReference:output_type -> bucketeer.gateway.CreateCodeReferenceResponse
	51,  // 135: bucketeer.gateway.Gateway.UpdateCodeReference:output_type -> bucketeer.gateway.UpdateCodeReferenceResponse
	53,  // 136: bucketeer.gateway.Gateway.DeleteCodeReference:output_type -> bucketeer.gateway.DeleteCodeReferenceResponse
	110, // [110:137] is the sub-list for method output_type
	83,  // [83:110] is the sub-list for method input_type
	83,  // [83:83] is the sub-list for extension type_name
	83,  // [83:83] is the sub-list for extension extendee
	0,   // [0:83] is the sub-list for field type_name
}

func init() { file_proto_gateway_service_proto_init() }
func file_proto_gateway_service_proto_init() {
	if File_proto_gateway_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_gateway_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeatureFlagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeatureFlagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvaluationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvaluationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvaluationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvaluationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugEvaluateFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugEvaluateFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPushesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPushesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountV2ByEnvironmentIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountV2ByEnvironmentIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCodeReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCodeReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCodeReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCodeReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCodeReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCodeReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvaluationsRequest_UserEvaluationCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterEventsResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_gateway_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_gateway_service_proto_goTypes,
		DependencyIndexes: file_proto_gateway_service_proto_depIdxs,
		MessageInfos:      file_proto_gateway_service_proto_msgTypes,
	}.Build()
	File_proto_gateway_service_proto = out.File
	file_proto_gateway_service_proto_rawDesc = nil
	file_proto_gateway_service_proto_goTypes = nil
	file_proto_gateway_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClient interface {
	GetEvaluations(ctx context.Context, in *GetEvaluationsRequest, opts ...grpc.CallOption) (*GetEvaluationsResponse, error)
	GetEvaluation(ctx context.Context, in *GetEvaluationRequest, opts ...grpc.CallOption) (*GetEvaluationResponse, error)
	GetFeatureFlags(ctx context.Context, in *GetFeatureFlagsRequest, opts ...grpc.CallOption) (*GetFeatureFlagsResponse, error)
	GetSegmentUsers(ctx context.Context, in *GetSegmentUsersRequest, opts ...grpc.CallOption) (*GetSegmentUsersResponse, error)
	RegisterEvents(ctx context.Context, in *RegisterEventsRequest, opts ...grpc.CallOption) (*RegisterEventsResponse, error)
	Track(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error)
	DebugEvaluateFeatures(ctx context.Context, in *DebugEvaluateFeaturesRequest, opts ...grpc.CallOption) (*DebugEvaluateFeaturesResponse, error)
	CreateFeature(ctx context.Context, in *CreateFeatureRequest, opts ...grpc.CallOption) (*CreateFeatureResponse, error)
	GetFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error)
	ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...grpc.CallOption) (*ListFeaturesResponse, error)
	UpdateFeature(ctx context.Context, in *UpdateFeatureRequest, opts ...grpc.CallOption) (*UpdateFeatureResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ListPushes(ctx context.Context, in *ListPushesRequest, opts ...grpc.CallOption) (*ListPushesResponse, error)
	CreatePush(ctx context.Context, in *CreatePushRequest, opts ...grpc.CallOption) (*CreatePushResponse, error)
	GetPush(ctx context.Context, in *GetPushRequest, opts ...grpc.CallOption) (*GetPushResponse, error)
	UpdatePush(ctx context.Context, in *UpdatePushRequest, opts ...grpc.CallOption) (*UpdatePushResponse, error)
	CreateAccountV2(ctx context.Context, in *CreateAccountV2Request, opts ...grpc.CallOption) (*CreateAccountV2Response, error)
	UpdateAccountV2(ctx context.Context, in *UpdateAccountV2Request, opts ...grpc.CallOption) (*UpdateAccountV2Response, error)
	GetAccountV2(ctx context.Context, in *GetAccountV2Request, opts ...grpc.CallOption) (*GetAccountV2Response, error)
	GetAccountV2ByEnvironmentID(ctx context.Context, in *GetAccountV2ByEnvironmentIDRequest, opts ...grpc.CallOption) (*GetAccountV2ByEnvironmentIDResponse, error)
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error)
	ListAccountsV2(ctx context.Context, in *ListAccountsV2Request, opts ...grpc.CallOption) (*ListAccountsV2Response, error)
	GetCodeReference(ctx context.Context, in *GetCodeReferenceRequest, opts ...grpc.CallOption) (*GetCodeReferenceResponse, error)
	ListCodeReferences(ctx context.Context, in *ListCodeReferencesRequest, opts ...grpc.CallOption) (*ListCodeReferencesResponse, error)
	CreateCodeReference(ctx context.Context, in *CreateCodeReferenceRequest, opts ...grpc.CallOption) (*CreateCodeReferenceResponse, error)
	UpdateCodeReference(ctx context.Context, in *UpdateCodeReferenceRequest, opts ...grpc.CallOption) (*UpdateCodeReferenceResponse, error)
	DeleteCodeReference(ctx context.Context, in *DeleteCodeReferenceRequest, opts ...grpc.CallOption) (*DeleteCodeReferenceResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetEvaluations(ctx context.Context, in *GetEvaluationsRequest, opts ...grpc.CallOption) (*GetEvaluationsResponse, error) {
	out := new(GetEvaluationsResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/GetEvaluations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetEvaluation(ctx context.Context, in *GetEvaluationRequest, opts ...grpc.CallOption) (*GetEvaluationResponse, error) {
	out := new(GetEvaluationResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/GetEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetFeatureFlags(ctx context.Context, in *GetFeatureFlagsRequest, opts ...grpc.CallOption) (*GetFeatureFlagsResponse, error) {
	out := new(GetFeatureFlagsResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/GetFeatureFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetSegmentUsers(ctx context.Context, in *GetSegmentUsersRequest, opts ...grpc.CallOption) (*GetSegmentUsersResponse, error) {
	out := new(GetSegmentUsersResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/GetSegmentUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RegisterEvents(ctx context.Context, in *RegisterEventsRequest, opts ...grpc.CallOption) (*RegisterEventsResponse, error) {
	out := new(RegisterEventsResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/RegisterEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Track(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/Track", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DebugEvaluateFeatures(ctx context.Context, in *DebugEvaluateFeaturesRequest, opts ...grpc.CallOption) (*DebugEvaluateFeaturesResponse, error) {
	out := new(DebugEvaluateFeaturesResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/DebugEvaluateFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateFeature(ctx context.Context, in *CreateFeatureRequest, opts ...grpc.CallOption) (*CreateFeatureResponse, error) {
	out := new(CreateFeatureResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/CreateFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error) {
	out := new(GetFeatureResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...grpc.CallOption) (*ListFeaturesResponse, error) {
	out := new(ListFeaturesResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/ListFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateFeature(ctx context.Context, in *UpdateFeatureRequest, opts ...grpc.CallOption) (*UpdateFeatureResponse, error) {
	out := new(UpdateFeatureResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/UpdateFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListPushes(ctx context.Context, in *ListPushesRequest, opts ...grpc.CallOption) (*ListPushesResponse, error) {
	out := new(ListPushesResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/ListPushes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreatePush(ctx context.Context, in *CreatePushRequest, opts ...grpc.CallOption) (*CreatePushResponse, error) {
	out := new(CreatePushResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/CreatePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetPush(ctx context.Context, in *GetPushRequest, opts ...grpc.CallOption) (*GetPushResponse, error) {
	out := new(GetPushResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/GetPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdatePush(ctx context.Context, in *UpdatePushRequest, opts ...grpc.CallOption) (*UpdatePushResponse, error) {
	out := new(UpdatePushResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/UpdatePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateAccountV2(ctx context.Context, in *CreateAccountV2Request, opts ...grpc.CallOption) (*CreateAccountV2Response, error) {
	out := new(CreateAccountV2Response)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/CreateAccountV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateAccountV2(ctx context.Context, in *UpdateAccountV2Request, opts ...grpc.CallOption) (*UpdateAccountV2Response, error) {
	out := new(UpdateAccountV2Response)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/UpdateAccountV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAccountV2(ctx context.Context, in *GetAccountV2Request, opts ...grpc.CallOption) (*GetAccountV2Response, error) {
	out := new(GetAccountV2Response)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/GetAccountV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAccountV2ByEnvironmentID(ctx context.Context, in *GetAccountV2ByEnvironmentIDRequest, opts ...grpc.CallOption) (*GetAccountV2ByEnvironmentIDResponse, error) {
	out := new(GetAccountV2ByEnvironmentIDResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/GetAccountV2ByEnvironmentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error) {
	out := new(GetMeResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListAccountsV2(ctx context.Context, in *ListAccountsV2Request, opts ...grpc.CallOption) (*ListAccountsV2Response, error) {
	out := new(ListAccountsV2Response)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/ListAccountsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetCodeReference(ctx context.Context, in *GetCodeReferenceRequest, opts ...grpc.CallOption) (*GetCodeReferenceResponse, error) {
	out := new(GetCodeReferenceResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/GetCodeReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListCodeReferences(ctx context.Context, in *ListCodeReferencesRequest, opts ...grpc.CallOption) (*ListCodeReferencesResponse, error) {
	out := new(ListCodeReferencesResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/ListCodeReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateCodeReference(ctx context.Context, in *CreateCodeReferenceRequest, opts ...grpc.CallOption) (*CreateCodeReferenceResponse, error) {
	out := new(CreateCodeReferenceResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/CreateCodeReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateCodeReference(ctx context.Context, in *UpdateCodeReferenceRequest, opts ...grpc.CallOption) (*UpdateCodeReferenceResponse, error) {
	out := new(UpdateCodeReferenceResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/UpdateCodeReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteCodeReference(ctx context.Context, in *DeleteCodeReferenceRequest, opts ...grpc.CallOption) (*DeleteCodeReferenceResponse, error) {
	out := new(DeleteCodeReferenceResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.gateway.Gateway/DeleteCodeReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
type GatewayServer interface {
	GetEvaluations(context.Context, *GetEvaluationsRequest) (*GetEvaluationsResponse, error)
	GetEvaluation(context.Context, *GetEvaluationRequest) (*GetEvaluationResponse, error)
	GetFeatureFlags(context.Context, *GetFeatureFlagsRequest) (*GetFeatureFlagsResponse, error)
	GetSegmentUsers(context.Context, *GetSegmentUsersRequest) (*GetSegmentUsersResponse, error)
	RegisterEvents(context.Context, *RegisterEventsRequest) (*RegisterEventsResponse, error)
	Track(context.Context, *TrackRequest) (*TrackResponse, error)
	DebugEvaluateFeatures(context.Context, *DebugEvaluateFeaturesRequest) (*DebugEvaluateFeaturesResponse, error)
	CreateFeature(context.Context, *CreateFeatureRequest) (*CreateFeatureResponse, error)
	GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error)
	ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesResponse, error)
	UpdateFeature(context.Context, *UpdateFeatureRequest) (*UpdateFeatureResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ListPushes(context.Context, *ListPushesRequest) (*ListPushesResponse, error)
	CreatePush(context.Context, *CreatePushRequest) (*CreatePushResponse, error)
	GetPush(context.Context, *GetPushRequest) (*GetPushResponse, error)
	UpdatePush(context.Context, *UpdatePushRequest) (*UpdatePushResponse, error)
	CreateAccountV2(context.Context, *CreateAccountV2Request) (*CreateAccountV2Response, error)
	UpdateAccountV2(context.Context, *UpdateAccountV2Request) (*UpdateAccountV2Response, error)
	GetAccountV2(context.Context, *GetAccountV2Request) (*GetAccountV2Response, error)
	GetAccountV2ByEnvironmentID(context.Context, *GetAccountV2ByEnvironmentIDRequest) (*GetAccountV2ByEnvironmentIDResponse, error)
	GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error)
	ListAccountsV2(context.Context, *ListAccountsV2Request) (*ListAccountsV2Response, error)
	GetCodeReference(context.Context, *GetCodeReferenceRequest) (*GetCodeReferenceResponse, error)
	ListCodeReferences(context.Context, *ListCodeReferencesRequest) (*ListCodeReferencesResponse, error)
	CreateCodeReference(context.Context, *CreateCodeReferenceRequest) (*CreateCodeReferenceResponse, error)
	UpdateCodeReference(context.Context, *UpdateCodeReferenceRequest) (*UpdateCodeReferenceResponse, error)
	DeleteCodeReference(context.Context, *DeleteCodeReferenceRequest) (*DeleteCodeReferenceResponse, error)
}

// UnimplementedGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) GetEvaluations(context.Context, *GetEvaluationsRequest) (*GetEvaluationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluations not implemented")
}
func (*UnimplementedGatewayServer) GetEvaluation(context.Context, *GetEvaluationRequest) (*GetEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluation not implemented")
}
func (*UnimplementedGatewayServer) GetFeatureFlags(context.Context, *GetFeatureFlagsRequest) (*GetFeatureFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureFlags not implemented")
}
func (*UnimplementedGatewayServer) GetSegmentUsers(context.Context, *GetSegmentUsersRequest) (*GetSegmentUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentUsers not implemented")
}
func (*UnimplementedGatewayServer) RegisterEvents(context.Context, *RegisterEventsRequest) (*RegisterEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEvents not implemented")
}
func (*UnimplementedGatewayServer) Track(context.Context, *TrackRequest) (*TrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Track not implemented")
}
func (*UnimplementedGatewayServer) DebugEvaluateFeatures(context.Context, *DebugEvaluateFeaturesRequest) (*DebugEvaluateFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugEvaluateFeatures not implemented")
}
func (*UnimplementedGatewayServer) CreateFeature(context.Context, *CreateFeatureRequest) (*CreateFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeature not implemented")
}
func (*UnimplementedGatewayServer) GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (*UnimplementedGatewayServer) ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (*UnimplementedGatewayServer) UpdateFeature(context.Context, *UpdateFeatureRequest) (*UpdateFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeature not implemented")
}
func (*UnimplementedGatewayServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedGatewayServer) ListPushes(context.Context, *ListPushesRequest) (*ListPushesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushes not implemented")
}
func (*UnimplementedGatewayServer) CreatePush(context.Context, *CreatePushRequest) (*CreatePushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePush not implemented")
}
func (*UnimplementedGatewayServer) GetPush(context.Context, *GetPushRequest) (*GetPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPush not implemented")
}
func (*UnimplementedGatewayServer) UpdatePush(context.Context, *UpdatePushRequest) (*UpdatePushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePush not implemented")
}
func (*UnimplementedGatewayServer) CreateAccountV2(context.Context, *CreateAccountV2Request) (*CreateAccountV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountV2 not implemented")
}
func (*UnimplementedGatewayServer) UpdateAccountV2(context.Context, *UpdateAccountV2Request) (*UpdateAccountV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountV2 not implemented")
}
func (*UnimplementedGatewayServer) GetAccountV2(context.Context, *GetAccountV2Request) (*GetAccountV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountV2 not implemented")
}
func (*UnimplementedGatewayServer) GetAccountV2ByEnvironmentID(context.Context, *GetAccountV2ByEnvironmentIDRequest) (*GetAccountV2ByEnvironmentIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountV2ByEnvironmentID not implemented")
}
func (*UnimplementedGatewayServer) GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (*UnimplementedGatewayServer) ListAccountsV2(context.Context, *ListAccountsV2Request) (*ListAccountsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountsV2 not implemented")
}
func (*UnimplementedGatewayServer) GetCodeReference(context.Context, *GetCodeReferenceRequest) (*GetCodeReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeReference not implemented")
}
func (*UnimplementedGatewayServer) ListCodeReferences(context.Context, *ListCodeReferencesRequest) (*ListCodeReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodeReferences not implemented")
}
func (*UnimplementedGatewayServer) CreateCodeReference(context.Context, *CreateCodeReferenceRequest) (*CreateCodeReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCodeReference not implemented")
}
func (*UnimplementedGatewayServer) UpdateCodeReference(context.Context, *UpdateCodeReferenceRequest) (*UpdateCodeReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCodeReference not implemented")
}
func (*UnimplementedGatewayServer) DeleteCodeReference(context.Context, *DeleteCodeReferenceRequest) (*DeleteCodeReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCodeReference not implemented")
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_GetEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/GetEvaluations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetEvaluations(ctx, req.(*GetEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/GetEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetEvaluation(ctx, req.(*GetEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetFeatureFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetFeatureFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/GetFeatureFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetFeatureFlags(ctx, req.(*GetFeatureFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetSegmentUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSegmentUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/GetSegmentUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSegmentUsers(ctx, req.(*GetSegmentUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RegisterEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RegisterEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/RegisterEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RegisterEvents(ctx, req.(*RegisterEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Track_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Track(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/Track",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Track(ctx, req.(*TrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DebugEvaluateFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugEvaluateFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DebugEvaluateFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/DebugEvaluateFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DebugEvaluateFeatures(ctx, req.(*DebugEvaluateFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/CreateFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateFeature(ctx, req.(*CreateFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetFeature(ctx, req.(*GetFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/ListFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListFeatures(ctx, req.(*ListFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/UpdateFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateFeature(ctx, req.(*UpdateFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListPushes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPushesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListPushes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/ListPushes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListPushes(ctx, req.(*ListPushesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreatePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreatePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/CreatePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreatePush(ctx, req.(*CreatePushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/GetPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetPush(ctx, req.(*GetPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdatePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdatePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/UpdatePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdatePush(ctx, req.(*UpdatePushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateAccountV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateAccountV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/CreateAccountV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateAccountV2(ctx, req.(*CreateAccountV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateAccountV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAccountV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/UpdateAccountV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAccountV2(ctx, req.(*UpdateAccountV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAccountV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAccountV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/GetAccountV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAccountV2(ctx, req.(*GetAccountV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAccountV2ByEnvironmentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountV2ByEnvironmentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAccountV2ByEnvironmentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/GetAccountV2ByEnvironmentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAccountV2ByEnvironmentID(ctx, req.(*GetAccountV2ByEnvironmentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListAccountsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListAccountsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/ListAccountsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListAccountsV2(ctx, req.(*ListAccountsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetCodeReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetCodeReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/GetCodeReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetCodeReference(ctx, req.(*GetCodeReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListCodeReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCodeReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListCodeReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/ListCodeReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListCodeReferences(ctx, req.(*ListCodeReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateCodeReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCodeReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateCodeReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/CreateCodeReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateCodeReference(ctx, req.(*CreateCodeReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateCodeReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCodeReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateCodeReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/UpdateCodeReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateCodeReference(ctx, req.(*UpdateCodeReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteCodeReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCodeReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteCodeReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.gateway.Gateway/DeleteCodeReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteCodeReference(ctx, req.(*DeleteCodeReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bucketeer.gateway.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvaluations",
			Handler:    _Gateway_GetEvaluations_Handler,
		},
		{
			MethodName: "GetEvaluation",
			Handler:    _Gateway_GetEvaluation_Handler,
		},
		{
			MethodName: "GetFeatureFlags",
			Handler:    _Gateway_GetFeatureFlags_Handler,
		},
		{
			MethodName: "GetSegmentUsers",
			Handler:    _Gateway_GetSegmentUsers_Handler,
		},
		{
			MethodName: "RegisterEvents",
			Handler:    _Gateway_RegisterEvents_Handler,
		},
		{
			MethodName: "Track",
			Handler:    _Gateway_Track_Handler,
		},
		{
			MethodName: "DebugEvaluateFeatures",
			Handler:    _Gateway_DebugEvaluateFeatures_Handler,
		},
		{
			MethodName: "CreateFeature",
			Handler:    _Gateway_CreateFeature_Handler,
		},
		{
			MethodName: "GetFeature",
			Handler:    _Gateway_GetFeature_Handler,
		},
		{
			MethodName: "ListFeatures",
			Handler:    _Gateway_ListFeatures_Handler,
		},
		{
			MethodName: "UpdateFeature",
			Handler:    _Gateway_UpdateFeature_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Gateway_Ping_Handler,
		},
		{
			MethodName: "ListPushes",
			Handler:    _Gateway_ListPushes_Handler,
		},
		{
			MethodName: "CreatePush",
			Handler:    _Gateway_CreatePush_Handler,
		},
		{
			MethodName: "GetPush",
			Handler:    _Gateway_GetPush_Handler,
		},
		{
			MethodName: "UpdatePush",
			Handler:    _Gateway_UpdatePush_Handler,
		},
		{
			MethodName: "CreateAccountV2",
			Handler:    _Gateway_CreateAccountV2_Handler,
		},
		{
			MethodName: "UpdateAccountV2",
			Handler:    _Gateway_UpdateAccountV2_Handler,
		},
		{
			MethodName: "GetAccountV2",
			Handler:    _Gateway_GetAccountV2_Handler,
		},
		{
			MethodName: "GetAccountV2ByEnvironmentID",
			Handler:    _Gateway_GetAccountV2ByEnvironmentID_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _Gateway_GetMe_Handler,
		},
		{
			MethodName: "ListAccountsV2",
			Handler:    _Gateway_ListAccountsV2_Handler,
		},
		{
			MethodName: "GetCodeReference",
			Handler:    _Gateway_GetCodeReference_Handler,
		},
		{
			MethodName: "ListCodeReferences",
			Handler:    _Gateway_ListCodeReferences_Handler,
		},
		{
			MethodName: "CreateCodeReference",
			Handler:    _Gateway_CreateCodeReference_Handler,
		},
		{
			MethodName: "UpdateCodeReference",
			Handler:    _Gateway_UpdateCodeReference_Handler,
		},
		{
			MethodName: "DeleteCodeReference",
			Handler:    _Gateway_DeleteCodeReference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gateway/service.proto",
}
