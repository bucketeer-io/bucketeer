// Code generated by MockGen. DO NOT EDIT.
// Source: eventcounter.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventCounterCache is a mock of EventCounterCache interface.
type MockEventCounterCache struct {
	ctrl     *gomock.Controller
	recorder *MockEventCounterCacheMockRecorder
}

// MockEventCounterCacheMockRecorder is the mock recorder for MockEventCounterCache.
type MockEventCounterCacheMockRecorder struct {
	mock *MockEventCounterCache
}

// NewMockEventCounterCache creates a new mock instance.
func NewMockEventCounterCache(ctrl *gomock.Controller) *MockEventCounterCache {
	mock := &MockEventCounterCache{ctrl: ctrl}
	mock.recorder = &MockEventCounterCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventCounterCache) EXPECT() *MockEventCounterCacheMockRecorder {
	return m.recorder
}

// GetEventCounts mocks base method.
func (m *MockEventCounterCache) GetEventCounts(keys []string) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventCounts", keys)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventCounts indicates an expected call of GetEventCounts.
func (mr *MockEventCounterCacheMockRecorder) GetEventCounts(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventCounts", reflect.TypeOf((*MockEventCounterCache)(nil).GetEventCounts), keys)
}

// GetUserCount mocks base method.
func (m *MockEventCounterCache) GetUserCount(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCount", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCount indicates an expected call of GetUserCount.
func (mr *MockEventCounterCacheMockRecorder) GetUserCount(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCount", reflect.TypeOf((*MockEventCounterCache)(nil).GetUserCount), key)
}

// GetUserCounts mocks base method.
func (m *MockEventCounterCache) GetUserCounts(keys []string) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCounts", keys)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCounts indicates an expected call of GetUserCounts.
func (mr *MockEventCounterCacheMockRecorder) GetUserCounts(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCounts", reflect.TypeOf((*MockEventCounterCache)(nil).GetUserCounts), keys)
}
