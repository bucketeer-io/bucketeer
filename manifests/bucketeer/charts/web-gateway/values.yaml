fullnameOverride: "web-gateway"
namespace: default
tls:
  bucketeerJP:
    secrets:
    cert:
    key:
  service:
    secret:
    cert:
    key:
envoy:
  image:
    repository: ghcr.io/bucketeer-io/bucketeer-envoy
    tag: v1.26.2
    pullPolicy: IfNotPresent
  serviceCluster: bucketeer
  adminPort: 8001
  eventcounterDescriptor: 
  autoopsDescriptor: 
  authDescriptor: CsgCChZwcm90by9hdXRoL3Rva2VuLnByb3RvEg5idWNrZXRlZXIuYXV0aCKhAQoFVG9rZW4SIQoMYWNjZXNzX3Rva2VuGAEgASgJUgthY2Nlc3NUb2tlbhIdCgp0b2tlbl90eXBlGAIgASgJUgl0b2tlblR5cGUSIwoNcmVmcmVzaF90b2tlbhgDIAEoCVIMcmVmcmVzaFRva2VuEhYKBmV4cGlyeRgEIAEoA1IGZXhwaXJ5EhkKCGlkX3Rva2VuGAUgASgJUgdpZFRva2VuIkIKDklEVG9rZW5TdWJqZWN0EhcKB3VzZXJfaWQYASABKAlSBnVzZXJJZBIXCgdjb25uX2lkGAIgASgJUgZjb25uSWRCLlosZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2F1dGhiBnByb3RvMwrbBgoYcHJvdG8vYXV0aC9zZXJ2aWNlLnByb3RvEg5idWNrZXRlZXIuYXV0aBoWcHJvdG8vYXV0aC90b2tlbi5wcm90byJQChVHZXRBdXRoQ29kZVVSTFJlcXVlc3QSFAoFc3RhdGUYASABKAlSBXN0YXRlEiEKDHJlZGlyZWN0X3VybBgCIAEoCVILcmVkaXJlY3RVcmwiKgoWR2V0QXV0aENvZGVVUkxSZXNwb25zZRIQCgN1cmwYASABKAlSA3VybCJNChRFeGNoYW5nZVRva2VuUmVxdWVzdBISCgRjb2RlGAEgASgJUgRjb2RlEiEKDHJlZGlyZWN0X3VybBgCIAEoCVILcmVkaXJlY3RVcmwiRAoVRXhjaGFuZ2VUb2tlblJlc3BvbnNlEisKBXRva2VuGAEgASgLMhUuYnVja2V0ZWVyLmF1dGguVG9rZW5SBXRva2VuIl0KE1JlZnJlc2hUb2tlblJlcXVlc3QSIwoNcmVmcmVzaF90b2tlbhgBIAEoCVIMcmVmcmVzaFRva2VuEiEKDHJlZGlyZWN0X3VybBgCIAEoCVILcmVkaXJlY3RVcmwiQwoUUmVmcmVzaFRva2VuUmVzcG9uc2USKwoFdG9rZW4YASABKAsyFS5idWNrZXRlZXIuYXV0aC5Ub2tlblIFdG9rZW4ypwIKC0F1dGhTZXJ2aWNlEl8KDkdldEF1dGhDb2RlVVJMEiUuYnVja2V0ZWVyLmF1dGguR2V0QXV0aENvZGVVUkxSZXF1ZXN0GiYuYnVja2V0ZWVyLmF1dGguR2V0QXV0aENvZGVVUkxSZXNwb25zZRJcCg1FeGNoYW5nZVRva2VuEiQuYnVja2V0ZWVyLmF1dGguRXhjaGFuZ2VUb2tlblJlcXVlc3QaJS5idWNrZXRlZXIuYXV0aC5FeGNoYW5nZVRva2VuUmVzcG9uc2USWQoMUmVmcmVzaFRva2VuEiMuYnVja2V0ZWVyLmF1dGguUmVmcmVzaFRva2VuUmVxdWVzdBokLmJ1Y2tldGVlci5hdXRoLlJlZnJlc2hUb2tlblJlc3BvbnNlQi5aLGdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9hdXRoYgZwcm90bzM=
  notificationDescriptor: 
  pushDescriptor: CtQCChhwcm90by9wdXNoL2NvbW1hbmQucHJvdG8SDmJ1Y2tldGVlci5wdXNoIlsKEUNyZWF0ZVB1c2hDb21tYW5kEh4KC2ZjbV9hcGlfa2V5GAEgASgJUglmY21BcGlLZXkSEgoEdGFncxgCIAMoCVIEdGFncxISCgRuYW1lGAMgASgJUgRuYW1lIigKEkFkZFB1c2hUYWdzQ29tbWFuZBISCgR0YWdzGAEgAygJUgR0YWdzIisKFURlbGV0ZVB1c2hUYWdzQ29tbWFuZBISCgR0YWdzGAEgAygJUgR0YWdzIhMKEURlbGV0ZVB1c2hDb21tYW5kIicKEVJlbmFtZVB1c2hDb21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWVCLlosZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL3B1c2hiBnByb3RvMwqYAgoVcHJvdG8vcHVzaC9wdXNoLnByb3RvEg5idWNrZXRlZXIucHVzaCK2AQoEUHVzaBIOCgJpZBgBIAEoCVICaWQSHgoLZmNtX2FwaV9rZXkYAiABKAlSCWZjbUFwaUtleRISCgR0YWdzGAMgAygJUgR0YWdzEhgKB2RlbGV0ZWQYBCABKAhSB2RlbGV0ZWQSEgoEbmFtZRgFIAEoCVIEbmFtZRIdCgpjcmVhdGVkX2F0GAYgASgDUgljcmVhdGVkQXQSHQoKdXBkYXRlZF9hdBgHIAEoA1IJdXBkYXRlZEF0Qi5aLGdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9wdXNoYgZwcm90bzMK8g0KGHByb3RvL3B1c2gvc2VydmljZS5wcm90bxIOYnVja2V0ZWVyLnB1c2gaFXByb3RvL3B1c2gvcHVzaC5wcm90bxoYcHJvdG8vcHVzaC9jb21tYW5kLnByb3RvIoUBChFDcmVhdGVQdXNoUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEjsKB2NvbW1hbmQYAiABKAsyIS5idWNrZXRlZXIucHVzaC5DcmVhdGVQdXNoQ29tbWFuZFIHY29tbWFuZCIUChJDcmVhdGVQdXNoUmVzcG9uc2UirAMKEUxpc3RQdXNoZXNSZXF1ZXN0EjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgBIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USGwoJcGFnZV9zaXplGAIgASgDUghwYWdlU2l6ZRIWCgZjdXJzb3IYAyABKAlSBmN1cnNvchJECghvcmRlcl9ieRgEIAEoDjIpLmJ1Y2tldGVlci5wdXNoLkxpc3RQdXNoZXNSZXF1ZXN0Lk9yZGVyQnlSB29yZGVyQnkSWQoPb3JkZXJfZGlyZWN0aW9uGAUgASgOMjAuYnVja2V0ZWVyLnB1c2guTGlzdFB1c2hlc1JlcXVlc3QuT3JkZXJEaXJlY3Rpb25SDm9yZGVyRGlyZWN0aW9uEiUKDnNlYXJjaF9rZXl3b3JkGAYgASgJUg1zZWFyY2hLZXl3b3JkIkAKB09yZGVyQnkSCwoHREVGQVVMVBAAEggKBE5BTUUQARIOCgpDUkVBVEVEX0FUEAISDgoKVVBEQVRFRF9BVBADIiMKDk9yZGVyRGlyZWN0aW9uEgcKA0FTQxAAEggKBERFU0MQASJ7ChJMaXN0UHVzaGVzUmVzcG9uc2USLAoGcHVzaGVzGAEgAygLMhQuYnVja2V0ZWVyLnB1c2guUHVzaFIGcHVzaGVzEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEh8KC3RvdGFsX2NvdW50GAMgASgDUgp0b3RhbENvdW50IpUBChFEZWxldGVQdXNoUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEg4KAmlkGAIgASgJUgJpZBI7Cgdjb21tYW5kGAMgASgLMiEuYnVja2V0ZWVyLnB1c2guRGVsZXRlUHVzaENvbW1hbmRSB2NvbW1hbmQiFAoSRGVsZXRlUHVzaFJlc3BvbnNlIuICChFVcGRhdGVQdXNoUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEg4KAmlkGAIgASgJUgJpZBJVChVhZGRfcHVzaF90YWdzX2NvbW1hbmQYAyABKAsyIi5idWNrZXRlZXIucHVzaC5BZGRQdXNoVGFnc0NvbW1hbmRSEmFkZFB1c2hUYWdzQ29tbWFuZBJeChhkZWxldGVfcHVzaF90YWdzX2NvbW1hbmQYBCABKAsyJS5idWNrZXRlZXIucHVzaC5EZWxldGVQdXNoVGFnc0NvbW1hbmRSFWRlbGV0ZVB1c2hUYWdzQ29tbWFuZBJRChNyZW5hbWVfcHVzaF9jb21tYW5kGAUgASgLMiEuYnVja2V0ZWVyLnB1c2guUmVuYW1lUHVzaENvbW1hbmRSEXJlbmFtZVB1c2hDb21tYW5kIhQKElVwZGF0ZVB1c2hSZXNwb25zZTLpAgoLUHVzaFNlcnZpY2USVQoKTGlzdFB1c2hlcxIhLmJ1Y2tldGVlci5wdXNoLkxpc3RQdXNoZXNSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guTGlzdFB1c2hlc1Jlc3BvbnNlIgASVQoKQ3JlYXRlUHVzaBIhLmJ1Y2tldGVlci5wdXNoLkNyZWF0ZVB1c2hSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guQ3JlYXRlUHVzaFJlc3BvbnNlIgASVQoKRGVsZXRlUHVzaBIhLmJ1Y2tldGVlci5wdXNoLkRlbGV0ZVB1c2hSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guRGVsZXRlUHVzaFJlc3BvbnNlIgASVQoKVXBkYXRlUHVzaBIhLmJ1Y2tldGVlci5wdXNoLlVwZGF0ZVB1c2hSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guVXBkYXRlUHVzaFJlc3BvbnNlIgBCLlosZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL3B1c2hiBnByb3RvMw==
  batchDescriptor: CvUEChlwcm90by9iYXRjaC9zZXJ2aWNlLnByb3RvEg9idWNrZXRlZXIuYmF0Y2giPgoPQmF0Y2hKb2JSZXF1ZXN0EisKA2pvYhgBIAEoDjIZLmJ1Y2tldGVlci5iYXRjaC5CYXRjaEpvYlIDam9iIhIKEEJhdGNoSm9iUmVzcG9uc2UqzwIKCEJhdGNoSm9iEhsKF0V4cGVyaW1lbnRTdGF0dXNVcGRhdGVyEAASHAoYRXhwZXJpbWVudFJ1bm5pbmdXYXRjaGVyEAESFwoTRmVhdHVyZVN0YWxlV2F0Y2hlchACEhMKD01hdUNvdW50V2F0Y2hlchADEhMKD0RhdGV0aW1lV2F0Y2hlchAEEhUKEUV2ZW50Q291bnRXYXRjaGVyEAUSFwoTRG9tYWluRXZlbnRJbmZvcm1lchAGEhcKE1JlZGlzQ291bnRlckRlbGV0ZXIQBxIdChlQcm9ncmVzc2l2ZVJvbGxvdXRXYXRjaGVyEAgSGAoURXhwZXJpbWVudENhbGN1bGF0b3IQCRIRCg1NYXVTdW1tYXJpemVyEAoSFwoTTWF1UGFydGl0aW9uRGVsZXRlchALEhcKE01hdVBhcnRpdGlvbkNyZWF0b3IQDDJoCgxCYXRjaFNlcnZpY2USWAoPRXhlY3V0ZUJhdGNoSm9iEiAuYnVja2V0ZWVyLmJhdGNoLkJhdGNoSm9iUmVxdWVzdBohLmJ1Y2tldGVlci5iYXRjaC5CYXRjaEpvYlJlc3BvbnNlIgBCL1otZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2JhdGNoYgZwcm90bzM=
  environmentDescriptor: 
  experimentDescriptor: 
  featureDescriptor: 
  accountDescriptor: CpADCiNwcm90by9lbnZpcm9ubWVudC9lbnZpcm9ubWVudC5wcm90bxIVYnVja2V0ZWVyLmVudmlyb25tZW50IpICCg1FbnZpcm9ubWVudFYyEg4KAmlkGAEgASgJUgJpZBISCgRuYW1lGAIgASgJUgRuYW1lEhkKCHVybF9jb2RlGAMgASgJUgd1cmxDb2RlEiAKC2Rlc2NyaXB0aW9uGAQgASgJUgtkZXNjcmlwdGlvbhIdCgpwcm9qZWN0X2lkGAUgASgJUglwcm9qZWN0SWQSGgoIYXJjaGl2ZWQYBiABKAhSCGFyY2hpdmVkEh0KCmNyZWF0ZWRfYXQYByABKANSCWNyZWF0ZWRBdBIdCgp1cGRhdGVkX2F0GAggASgDUgl1cGRhdGVkQXQSJwoPb3JnYW5pemF0aW9uX2lkGAkgASgJUg5vcmdhbml6YXRpb25JZEI1WjNnaXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vZW52aXJvbm1lbnRiBnByb3RvMwqiAwofcHJvdG8vZW52aXJvbm1lbnQvcHJvamVjdC5wcm90bxIVYnVja2V0ZWVyLmVudmlyb25tZW50IqgCCgdQcm9qZWN0Eg4KAmlkGAEgASgJUgJpZBIgCgtkZXNjcmlwdGlvbhgCIAEoCVILZGVzY3JpcHRpb24SGgoIZGlzYWJsZWQYAyABKAhSCGRpc2FibGVkEhQKBXRyaWFsGAQgASgIUgV0cmlhbBIjCg1jcmVhdG9yX2VtYWlsGAUgASgJUgxjcmVhdG9yRW1haWwSHQoKY3JlYXRlZF9hdBgGIAEoA1IJY3JlYXRlZEF0Eh0KCnVwZGF0ZWRfYXQYByABKANSCXVwZGF0ZWRBdBISCgRuYW1lGAggASgJUgRuYW1lEhkKCHVybF9jb2RlGAkgASgJUgd1cmxDb2RlEicKD29yZ2FuaXphdGlvbl9pZBgKIAEoCVIOb3JnYW5pemF0aW9uSWRCNVozZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2Vudmlyb25tZW50YgZwcm90bzMKnQMKJHByb3RvL2Vudmlyb25tZW50L29yZ2FuaXphdGlvbi5wcm90bxIVYnVja2V0ZWVyLmVudmlyb25tZW50Ip4CCgxPcmdhbml6YXRpb24SDgoCaWQYASABKAlSAmlkEhIKBG5hbWUYAiABKAlSBG5hbWUSGQoIdXJsX2NvZGUYAyABKAlSB3VybENvZGUSIAoLZGVzY3JpcHRpb24YBCABKAlSC2Rlc2NyaXB0aW9uEhoKCGRpc2FibGVkGAUgASgIUghkaXNhYmxlZBIaCghhcmNoaXZlZBgGIAEoCFIIYXJjaGl2ZWQSFAoFdHJpYWwYByABKAhSBXRyaWFsEh0KCmNyZWF0ZWRfYXQYCCABKANSCWNyZWF0ZWRBdBIdCgp1cGRhdGVkX2F0GAkgASgDUgl1cGRhdGVkQXQSIQoMc3lzdGVtX2FkbWluGAogASgIUgtzeXN0ZW1BZG1pbkI1WjNnaXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vZW52aXJvbm1lbnRiBnByb3RvMwq6EAobcHJvdG8vYWNjb3VudC9hY2NvdW50LnByb3RvEhFidWNrZXRlZXIuYWNjb3VudBojcHJvdG8vZW52aXJvbm1lbnQvZW52aXJvbm1lbnQucHJvdG8aH3Byb3RvL2Vudmlyb25tZW50L3Byb2plY3QucHJvdG8aJHByb3RvL2Vudmlyb25tZW50L29yZ2FuaXphdGlvbi5wcm90byKnAgoHQWNjb3VudBIOCgJpZBgBIAEoCVICaWQSFAoFZW1haWwYAiABKAlSBWVtYWlsEhIKBG5hbWUYAyABKAlSBG5hbWUSMwoEcm9sZRgEIAEoDjIfLmJ1Y2tldGVlci5hY2NvdW50LkFjY291bnQuUm9sZVIEcm9sZRIaCghkaXNhYmxlZBgFIAEoCFIIZGlzYWJsZWQSHQoKY3JlYXRlZF9hdBgGIAEoA1IJY3JlYXRlZEF0Eh0KCnVwZGF0ZWRfYXQYByABKANSCXVwZGF0ZWRBdBIYCgdkZWxldGVkGAggASgIUgdkZWxldGVkIjkKBFJvbGUSCgoGVklFV0VSEAASCgoGRURJVE9SEAESCQoFT1dORVIQAhIOCgpVTkFTU0lHTkVEEGMi8QUKCUFjY291bnRWMhIUCgVlbWFpbBgBIAEoCVIFZW1haWwSEgoEbmFtZRgCIAEoCVIEbmFtZRIoChBhdmF0YXJfaW1hZ2VfdXJsGAMgASgJUg5hdmF0YXJJbWFnZVVybBInCg9vcmdhbml6YXRpb25faWQYBCABKAlSDm9yZ2FuaXphdGlvbklkElsKEW9yZ2FuaXphdGlvbl9yb2xlGAUgASgOMi4uYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudFYyLlJvbGUuT3JnYW5pemF0aW9uUhBvcmdhbml6YXRpb25Sb2xlElkKEWVudmlyb25tZW50X3JvbGVzGAYgAygLMiwuYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudFYyLkVudmlyb25tZW50Um9sZVIQZW52aXJvbm1lbnRSb2xlcxIaCghkaXNhYmxlZBgHIAEoCFIIZGlzYWJsZWQSHQoKY3JlYXRlZF9hdBgIIAEoA1IJY3JlYXRlZEF0Eh0KCnVwZGF0ZWRfYXQYCSABKANSCXVwZGF0ZWRBdBrXAQoEUm9sZSJZCgtFbnZpcm9ubWVudBIaChZFbnZpcm9ubWVudF9VTkFTU0lHTkVEEAASFgoSRW52aXJvbm1lbnRfVklFV0VSEAESFgoSRW52aXJvbm1lbnRfRURJVE9SEAIidAoMT3JnYW5pemF0aW9uEhsKF09yZ2FuaXphdGlvbl9VTkFTU0lHTkVEEAASFwoTT3JnYW5pemF0aW9uX01FTUJFUhABEhYKEk9yZ2FuaXphdGlvbl9BRE1JThACEhYKEk9yZ2FuaXphdGlvbl9PV05FUhADGnsKD0Vudmlyb25tZW50Um9sZRIlCg5lbnZpcm9ubWVudF9pZBgBIAEoCVINZW52aXJvbm1lbnRJZBJBCgRyb2xlGAIgASgOMi0uYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudFYyLlJvbGUuRW52aXJvbm1lbnRSBHJvbGUi3wEKEUVudmlyb25tZW50Um9sZVYyEkYKC2Vudmlyb25tZW50GAEgASgLMiQuYnVja2V0ZWVyLmVudmlyb25tZW50LkVudmlyb25tZW50VjJSC2Vudmlyb25tZW50EjMKBHJvbGUYAiABKA4yHy5idWNrZXRlZXIuYWNjb3VudC5BY2NvdW50LlJvbGVSBHJvbGUSIwoNdHJpYWxfcHJvamVjdBgDIAEoCFIMdHJpYWxQcm9qZWN0EigKEHRyaWFsX3N0YXJ0ZWRfYXQYBCABKANSDnRyaWFsU3RhcnRlZEF0IuAECg5Db25zb2xlQWNjb3VudBIUCgVlbWFpbBgBIAEoCVIFZW1haWwSEgoEbmFtZRgCIAEoCVIEbmFtZRIdCgphdmF0YXJfdXJsGAMgASgJUglhdmF0YXJVcmwSJgoPaXNfc3lzdGVtX2FkbWluGAQgASgIUg1pc1N5c3RlbUFkbWluEkcKDG9yZ2FuaXphdGlvbhgFIAEoCzIjLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5Pcmdhbml6YXRpb25SDG9yZ2FuaXphdGlvbhJbChFvcmdhbml6YXRpb25fcm9sZRgGIAEoDjIuLmJ1Y2tldGVlci5hY2NvdW50LkFjY291bnRWMi5Sb2xlLk9yZ2FuaXphdGlvblIQb3JnYW5pemF0aW9uUm9sZRJeChFlbnZpcm9ubWVudF9yb2xlcxgHIAMoCzIxLmJ1Y2tldGVlci5hY2NvdW50LkNvbnNvbGVBY2NvdW50LkVudmlyb25tZW50Um9sZVIQZW52aXJvbm1lbnRSb2xlcxrWAQoPRW52aXJvbm1lbnRSb2xlEkYKC2Vudmlyb25tZW50GAEgASgLMiQuYnVja2V0ZWVyLmVudmlyb25tZW50LkVudmlyb25tZW50VjJSC2Vudmlyb25tZW50EjgKB3Byb2plY3QYAiABKAsyHi5idWNrZXRlZXIuZW52aXJvbm1lbnQuUHJvamVjdFIHcHJvamVjdBJBCgRyb2xlGAMgASgOMi0uYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudFYyLlJvbGUuRW52aXJvbm1lbnRSBHJvbGVCMVovZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2FjY291bnRiBnByb3RvMwqXBAobcHJvdG8vYWNjb3VudC9hcGlfa2V5LnByb3RvEhFidWNrZXRlZXIuYWNjb3VudCLYAQoGQVBJS2V5Eg4KAmlkGAEgASgJUgJpZBISCgRuYW1lGAIgASgJUgRuYW1lEjIKBHJvbGUYAyABKA4yHi5idWNrZXRlZXIuYWNjb3VudC5BUElLZXkuUm9sZVIEcm9sZRIaCghkaXNhYmxlZBgEIAEoCFIIZGlzYWJsZWQSHQoKY3JlYXRlZF9hdBgFIAEoA1IJY3JlYXRlZEF0Eh0KCnVwZGF0ZWRfYXQYBiABKANSCXVwZGF0ZWRBdCIcCgRSb2xlEgcKA1NESxAAEgsKB1NFUlZJQ0UQASLOAQoRRW52aXJvbm1lbnRBUElLZXkSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRIyCgdhcGlfa2V5GAIgASgLMhkuYnVja2V0ZWVyLmFjY291bnQuQVBJS2V5UgZhcGlLZXkSMQoUZW52aXJvbm1lbnRfZGlzYWJsZWQYAyABKAhSE2Vudmlyb25tZW50RGlzYWJsZWQSHQoKcHJvamVjdF9pZBgEIAEoCVIJcHJvamVjdElkQjFaL2dpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9hY2NvdW50YgZwcm90bzMKvAsKG3Byb3RvL2FjY291bnQvY29tbWFuZC5wcm90bxIRYnVja2V0ZWVyLmFjY291bnQaG3Byb3RvL2FjY291bnQvYWNjb3VudC5wcm90bxobcHJvdG8vYWNjb3VudC9hcGlfa2V5LnByb3RvIjEKGUNyZWF0ZUFkbWluQWNjb3VudENvbW1hbmQSFAoFZW1haWwYASABKAlSBWVtYWlsIhsKGUVuYWJsZUFkbWluQWNjb3VudENvbW1hbmQiHAoaRGlzYWJsZUFkbWluQWNjb3VudENvbW1hbmQiFwoVQ29udmVydEFjY291bnRDb21tYW5kIhYKFERlbGV0ZUFjY291bnRDb21tYW5kImEKFENyZWF0ZUFjY291bnRDb21tYW5kEhQKBWVtYWlsGAEgASgJUgVlbWFpbBIzCgRyb2xlGAIgASgOMh8uYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudC5Sb2xlUgRyb2xlIk8KGENoYW5nZUFjY291bnRSb2xlQ29tbWFuZBIzCgRyb2xlGAEgASgOMh8uYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudC5Sb2xlUgRyb2xlIhYKFEVuYWJsZUFjY291bnRDb21tYW5kIhcKFURpc2FibGVBY2NvdW50Q29tbWFuZCKkAgoWQ3JlYXRlQWNjb3VudFYyQ29tbWFuZBIUCgVlbWFpbBgBIAEoCVIFZW1haWwSEgoEbmFtZRgCIAEoCVIEbmFtZRIoChBhdmF0YXJfaW1hZ2VfdXJsGAMgASgJUg5hdmF0YXJJbWFnZVVybBJbChFvcmdhbml6YXRpb25fcm9sZRgEIAEoDjIuLmJ1Y2tldGVlci5hY2NvdW50LkFjY291bnRWMi5Sb2xlLk9yZ2FuaXphdGlvblIQb3JnYW5pemF0aW9uUm9sZRJZChFlbnZpcm9ubWVudF9yb2xlcxgFIAMoCzIsLmJ1Y2tldGVlci5hY2NvdW50LkFjY291bnRWMi5FbnZpcm9ubWVudFJvbGVSEGVudmlyb25tZW50Um9sZXMiMAoaQ2hhbmdlQWNjb3VudFYyTmFtZUNvbW1hbmQSEgoEbmFtZRgBIAEoCVIEbmFtZSJQCiRDaGFuZ2VBY2NvdW50VjJBdmF0YXJJbWFnZVVybENvbW1hbmQSKAoQYXZhdGFyX2ltYWdlX3VybBgBIAEoCVIOYXZhdGFySW1hZ2VVcmwibAomQ2hhbmdlQWNjb3VudFYyT3JnYW5pemF0aW9uUm9sZUNvbW1hbmQSQgoEcm9sZRgBIAEoDjIuLmJ1Y2tldGVlci5hY2NvdW50LkFjY291bnRWMi5Sb2xlLk9yZ2FuaXphdGlvblIEcm9sZSJsCiZDaGFuZ2VBY2NvdW50VjJFbnZpcm9ubWVudFJvbGVzQ29tbWFuZBJCCgVyb2xlcxgBIAMoCzIsLmJ1Y2tldGVlci5hY2NvdW50LkFjY291bnRWMi5FbnZpcm9ubWVudFJvbGVSBXJvbGVzIhgKFkVuYWJsZUFjY291bnRWMkNvbW1hbmQiGQoXRGlzYWJsZUFjY291bnRWMkNvbW1hbmQiGAoWRGVsZXRlQWNjb3VudFYyQ29tbWFuZCJdChNDcmVhdGVBUElLZXlDb21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWUSMgoEcm9sZRgCIAEoDjIeLmJ1Y2tldGVlci5hY2NvdW50LkFQSUtleS5Sb2xlUgRyb2xlIi0KF0NoYW5nZUFQSUtleU5hbWVDb21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWUiFQoTRW5hYmxlQVBJS2V5Q29tbWFuZCIWChREaXNhYmxlQVBJS2V5Q29tbWFuZEIxWi9naXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vYWNjb3VudGIGcHJvdG8zCoYECh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8SD2dvb2dsZS5wcm90b2J1ZiIjCgtEb3VibGVWYWx1ZRIUCgV2YWx1ZRgBIAEoAVIFdmFsdWUiIgoKRmxvYXRWYWx1ZRIUCgV2YWx1ZRgBIAEoAlIFdmFsdWUiIgoKSW50NjRWYWx1ZRIUCgV2YWx1ZRgBIAEoA1IFdmFsdWUiIwoLVUludDY0VmFsdWUSFAoFdmFsdWUYASABKARSBXZhbHVlIiIKCkludDMyVmFsdWUSFAoFdmFsdWUYASABKAVSBXZhbHVlIiMKC1VJbnQzMlZhbHVlEhQKBXZhbHVlGAEgASgNUgV2YWx1ZSIhCglCb29sVmFsdWUSFAoFdmFsdWUYASABKAhSBXZhbHVlIiMKC1N0cmluZ1ZhbHVlEhQKBXZhbHVlGAEgASgJUgV2YWx1ZSIiCgpCeXRlc1ZhbHVlEhQKBXZhbHVlGAEgASgMUgV2YWx1ZUKDAQoTY29tLmdvb2dsZS5wcm90b2J1ZkINV3JhcHBlcnNQcm90b1ABWjFnb29nbGUuZ29sYW5nLm9yZy9wcm90b2J1Zi90eXBlcy9rbm93bi93cmFwcGVyc3Bi+AEBogIDR1BCqgIeR29vZ2xlLlByb3RvYnVmLldlbGxLbm93blR5cGVzYgZwcm90bzMK+VYKG3Byb3RvL2FjY291bnQvc2VydmljZS5wcm90bxIRYnVja2V0ZWVyLmFjY291bnQaHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxobcHJvdG8vYWNjb3VudC9hY2NvdW50LnByb3RvGhtwcm90by9hY2NvdW50L2FwaV9rZXkucHJvdG8aG3Byb3RvL2FjY291bnQvY29tbWFuZC5wcm90bxokcHJvdG8vZW52aXJvbm1lbnQvb3JnYW5pemF0aW9uLnByb3RvIjcKDEdldE1lUmVxdWVzdBInCg9vcmdhbml6YXRpb25faWQYASABKAlSDm9yZ2FuaXphdGlvbklkIkwKDUdldE1lUmVzcG9uc2USOwoHYWNjb3VudBgBIAEoCzIhLmJ1Y2tldGVlci5hY2NvdW50LkNvbnNvbGVBY2NvdW50UgdhY2NvdW50IhsKGUdldE15T3JnYW5pemF0aW9uc1JlcXVlc3QiZwoaR2V0TXlPcmdhbml6YXRpb25zUmVzcG9uc2USSQoNb3JnYW5pemF0aW9ucxgBIAMoCzIjLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5Pcmdhbml6YXRpb25SDW9yZ2FuaXphdGlvbnMiEAoOR2V0TWVWMlJlcXVlc3QiLQoVR2V0TWVCeUVtYWlsVjJSZXF1ZXN0EhQKBWVtYWlsGAEgASgJUgVlbWFpbCKVAQoPR2V0TWVWMlJlc3BvbnNlEhQKBWVtYWlsGAEgASgJUgVlbWFpbBIZCghpc19hZG1pbhgCIAEoCFIHaXNBZG1pbhJRChFlbnZpcm9ubWVudF9yb2xlcxgDIAMoCzIkLmJ1Y2tldGVlci5hY2NvdW50LkVudmlyb25tZW50Um9sZVYyUhBlbnZpcm9ubWVudFJvbGVzImMKGUNyZWF0ZUFkbWluQWNjb3VudFJlcXVlc3QSRgoHY29tbWFuZBgBIAEoCzIsLmJ1Y2tldGVlci5hY2NvdW50LkNyZWF0ZUFkbWluQWNjb3VudENvbW1hbmRSB2NvbW1hbmQiHAoaQ3JlYXRlQWRtaW5BY2NvdW50UmVzcG9uc2UicwoZRW5hYmxlQWRtaW5BY2NvdW50UmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSRgoHY29tbWFuZBgCIAEoCzIsLmJ1Y2tldGVlci5hY2NvdW50LkVuYWJsZUFkbWluQWNjb3VudENvbW1hbmRSB2NvbW1hbmQiHAoaRW5hYmxlQWRtaW5BY2NvdW50UmVzcG9uc2UidQoaRGlzYWJsZUFkbWluQWNjb3VudFJlcXVlc3QSDgoCaWQYASABKAlSAmlkEkcKB2NvbW1hbmQYAiABKAsyLS5idWNrZXRlZXIuYWNjb3VudC5EaXNhYmxlQWRtaW5BY2NvdW50Q29tbWFuZFIHY29tbWFuZCIdChtEaXNhYmxlQWRtaW5BY2NvdW50UmVzcG9uc2UiLgoWR2V0QWRtaW5BY2NvdW50UmVxdWVzdBIUCgVlbWFpbBgBIAEoCVIFZW1haWwiTwoXR2V0QWRtaW5BY2NvdW50UmVzcG9uc2USNAoHYWNjb3VudBgBIAEoCzIaLmJ1Y2tldGVlci5hY2NvdW50LkFjY291bnRSB2FjY291bnQiywMKGExpc3RBZG1pbkFjY291bnRzUmVxdWVzdBIbCglwYWdlX3NpemUYASABKANSCHBhZ2VTaXplEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEk4KCG9yZGVyX2J5GAMgASgOMjMuYnVja2V0ZWVyLmFjY291bnQuTGlzdEFkbWluQWNjb3VudHNSZXF1ZXN0Lk9yZGVyQnlSB29yZGVyQnkSYwoPb3JkZXJfZGlyZWN0aW9uGAQgASgOMjouYnVja2V0ZWVyLmFjY291bnQuTGlzdEFkbWluQWNjb3VudHNSZXF1ZXN0Lk9yZGVyRGlyZWN0aW9uUg5vcmRlckRpcmVjdGlvbhIlCg5zZWFyY2hfa2V5d29yZBgFIAEoCVINc2VhcmNoS2V5d29yZBI2CghkaXNhYmxlZBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVSCGRpc2FibGVkIkEKB09yZGVyQnkSCwoHREVGQVVMVBAAEgkKBUVNQUlMEAESDgoKQ1JFQVRFRF9BVBACEg4KClVQREFURURfQVQQAyIjCg5PcmRlckRpcmVjdGlvbhIHCgNBU0MQABIICgRERVNDEAEijAEKGUxpc3RBZG1pbkFjY291bnRzUmVzcG9uc2USNgoIYWNjb3VudHMYASADKAsyGi5idWNrZXRlZXIuYWNjb3VudC5BY2NvdW50UghhY2NvdW50cxIWCgZjdXJzb3IYAiABKAlSBmN1cnNvchIfCgt0b3RhbF9jb3VudBgDIAEoA1IKdG90YWxDb3VudCJrChVDb252ZXJ0QWNjb3VudFJlcXVlc3QSDgoCaWQYASABKAlSAmlkEkIKB2NvbW1hbmQYAiABKAsyKC5idWNrZXRlZXIuYWNjb3VudC5Db252ZXJ0QWNjb3VudENvbW1hbmRSB2NvbW1hbmQiGAoWQ29udmVydEFjY291bnRSZXNwb25zZSKOAQoUQ3JlYXRlQWNjb3VudFJlcXVlc3QSQQoHY29tbWFuZBgBIAEoCzInLmJ1Y2tldGVlci5hY2NvdW50LkNyZWF0ZUFjY291bnRDb21tYW5kUgdjb21tYW5kEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgCIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiFwoVQ3JlYXRlQWNjb3VudFJlc3BvbnNlIp4BChRFbmFibGVBY2NvdW50UmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSQQoHY29tbWFuZBgCIAEoCzInLmJ1Y2tldGVlci5hY2NvdW50LkVuYWJsZUFjY291bnRDb21tYW5kUgdjb21tYW5kEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgDIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiFwoVRW5hYmxlQWNjb3VudFJlc3BvbnNlIqABChVEaXNhYmxlQWNjb3VudFJlcXVlc3QSDgoCaWQYASABKAlSAmlkEkIKB2NvbW1hbmQYAiABKAsyKC5idWNrZXRlZXIuYWNjb3VudC5EaXNhYmxlQWNjb3VudENvbW1hbmRSB2NvbW1hbmQSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAMgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZSIYChZEaXNhYmxlQWNjb3VudFJlc3BvbnNlIqYBChhDaGFuZ2VBY2NvdW50Um9sZVJlcXVlc3QSDgoCaWQYASABKAlSAmlkEkUKB2NvbW1hbmQYAiABKAsyKy5idWNrZXRlZXIuYWNjb3VudC5DaGFuZ2VBY2NvdW50Um9sZUNvbW1hbmRSB2NvbW1hbmQSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAMgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZSIbChlDaGFuZ2VBY2NvdW50Um9sZVJlc3BvbnNlIl4KEUdldEFjY291bnRSZXF1ZXN0EhQKBWVtYWlsGAEgASgJUgVlbWFpbBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYAiABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlIkoKEkdldEFjY291bnRSZXNwb25zZRI0CgdhY2NvdW50GAEgASgLMhouYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudFIHYWNjb3VudCKiBAoTTGlzdEFjY291bnRzUmVxdWVzdBIbCglwYWdlX3NpemUYASABKANSCHBhZ2VTaXplEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgDIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USSQoIb3JkZXJfYnkYBCABKA4yLi5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWNjb3VudHNSZXF1ZXN0Lk9yZGVyQnlSB29yZGVyQnkSXgoPb3JkZXJfZGlyZWN0aW9uGAUgASgOMjUuYnVja2V0ZWVyLmFjY291bnQuTGlzdEFjY291bnRzUmVxdWVzdC5PcmRlckRpcmVjdGlvblIOb3JkZXJEaXJlY3Rpb24SJQoOc2VhcmNoX2tleXdvcmQYBiABKAlSDXNlYXJjaEtleXdvcmQSNgoIZGlzYWJsZWQYByABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlUghkaXNhYmxlZBIvCgRyb2xlGAggASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWVSBHJvbGUiQQoHT3JkZXJCeRILCgdERUZBVUxUEAASCQoFRU1BSUwQARIOCgpDUkVBVEVEX0FUEAISDgoKVVBEQVRFRF9BVBADIiMKDk9yZGVyRGlyZWN0aW9uEgcKA0FTQxAAEggKBERFU0MQASKHAQoUTGlzdEFjY291bnRzUmVzcG9uc2USNgoIYWNjb3VudHMYASADKAsyGi5idWNrZXRlZXIuYWNjb3VudC5BY2NvdW50UghhY2NvdW50cxIWCgZjdXJzb3IYAiABKAlSBmN1cnNvchIfCgt0b3RhbF9jb3VudBgDIAEoA1IKdG90YWxDb3VudCKGAQoWQ3JlYXRlQWNjb3VudFYyUmVxdWVzdBInCg9vcmdhbml6YXRpb25faWQYASABKAlSDm9yZ2FuaXphdGlvbklkEkMKB2NvbW1hbmQYAiABKAsyKS5idWNrZXRlZXIuYWNjb3VudC5DcmVhdGVBY2NvdW50VjJDb21tYW5kUgdjb21tYW5kIlEKF0NyZWF0ZUFjY291bnRWMlJlc3BvbnNlEjYKB2FjY291bnQYASABKAsyHC5idWNrZXRlZXIuYWNjb3VudC5BY2NvdW50VjJSB2FjY291bnQinAEKFkVuYWJsZUFjY291bnRWMlJlcXVlc3QSFAoFZW1haWwYASABKAlSBWVtYWlsEicKD29yZ2FuaXphdGlvbl9pZBgCIAEoCVIOb3JnYW5pemF0aW9uSWQSQwoHY29tbWFuZBgDIAEoCzIpLmJ1Y2tldGVlci5hY2NvdW50LkVuYWJsZUFjY291bnRWMkNvbW1hbmRSB2NvbW1hbmQiGQoXRW5hYmxlQWNjb3VudFYyUmVzcG9uc2UingEKF0Rpc2FibGVBY2NvdW50VjJSZXF1ZXN0EhQKBWVtYWlsGAEgASgJUgVlbWFpbBInCg9vcmdhbml6YXRpb25faWQYAiABKAlSDm9yZ2FuaXphdGlvbklkEkQKB2NvbW1hbmQYAyABKAsyKi5idWNrZXRlZXIuYWNjb3VudC5EaXNhYmxlQWNjb3VudFYyQ29tbWFuZFIHY29tbWFuZCIaChhEaXNhYmxlQWNjb3VudFYyUmVzcG9uc2UinAEKFkRlbGV0ZUFjY291bnRWMlJlcXVlc3QSFAoFZW1haWwYASABKAlSBWVtYWlsEicKD29yZ2FuaXphdGlvbl9pZBgCIAEoCVIOb3JnYW5pemF0aW9uSWQSQwoHY29tbWFuZBgDIAEoCzIpLmJ1Y2tldGVlci5hY2NvdW50LkRlbGV0ZUFjY291bnRWMkNvbW1hbmRSB2NvbW1hbmQiGQoXRGVsZXRlQWNjb3VudFYyUmVzcG9uc2UitAQKFlVwZGF0ZUFjY291bnRWMlJlcXVlc3QSFAoFZW1haWwYASABKAlSBWVtYWlsEicKD29yZ2FuaXphdGlvbl9pZBgCIAEoCVIOb3JnYW5pemF0aW9uSWQSXQoTY2hhbmdlX25hbWVfY29tbWFuZBgDIAEoCzItLmJ1Y2tldGVlci5hY2NvdW50LkNoYW5nZUFjY291bnRWMk5hbWVDb21tYW5kUhFjaGFuZ2VOYW1lQ29tbWFuZBJyChljaGFuZ2VfYXZhdGFyX3VybF9jb21tYW5kGAQgASgLMjcuYnVja2V0ZWVyLmFjY291bnQuQ2hhbmdlQWNjb3VudFYyQXZhdGFySW1hZ2VVcmxDb21tYW5kUhZjaGFuZ2VBdmF0YXJVcmxDb21tYW5kEoIBCiBjaGFuZ2Vfb3JnYW5pemF0aW9uX3JvbGVfY29tbWFuZBgFIAEoCzI5LmJ1Y2tldGVlci5hY2NvdW50LkNoYW5nZUFjY291bnRWMk9yZ2FuaXphdGlvblJvbGVDb21tYW5kUh1jaGFuZ2VPcmdhbml6YXRpb25Sb2xlQ29tbWFuZBKCAQogY2hhbmdlX2Vudmlyb25tZW50X3JvbGVzX2NvbW1hbmQYBiABKAsyOS5idWNrZXRlZXIuYWNjb3VudC5DaGFuZ2VBY2NvdW50VjJFbnZpcm9ubWVudFJvbGVzQ29tbWFuZFIdY2hhbmdlRW52aXJvbm1lbnRSb2xlc0NvbW1hbmQiGQoXVXBkYXRlQWNjb3VudFYyUmVzcG9uc2UiVAoTR2V0QWNjb3VudFYyUmVxdWVzdBIUCgVlbWFpbBgBIAEoCVIFZW1haWwSJwoPb3JnYW5pemF0aW9uX2lkGAIgASgJUg5vcmdhbml6YXRpb25JZCJOChRHZXRBY2NvdW50VjJSZXNwb25zZRI2CgdhY2NvdW50GAEgASgLMhwuYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudFYyUgdhY2NvdW50ImEKIkdldEFjY291bnRWMkJ5RW52aXJvbm1lbnRJRFJlcXVlc3QSFAoFZW1haWwYASABKAlSBWVtYWlsEiUKDmVudmlyb25tZW50X2lkGAIgASgJUg1lbnZpcm9ubWVudElkIl0KI0dldEFjY291bnRWMkJ5RW52aXJvbm1lbnRJRFJlc3BvbnNlEjYKB2FjY291bnQYASABKAsyHC5idWNrZXRlZXIuYWNjb3VudC5BY2NvdW50VjJSB2FjY291bnQinAQKFUxpc3RBY2NvdW50c1YyUmVxdWVzdBIbCglwYWdlX3NpemUYASABKANSCHBhZ2VTaXplEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEicKD29yZ2FuaXphdGlvbl9pZBgDIAEoCVIOb3JnYW5pemF0aW9uSWQSSwoIb3JkZXJfYnkYBCABKA4yMC5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWNjb3VudHNWMlJlcXVlc3QuT3JkZXJCeVIHb3JkZXJCeRJgCg9vcmRlcl9kaXJlY3Rpb24YBSABKA4yNy5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWNjb3VudHNWMlJlcXVlc3QuT3JkZXJEaXJlY3Rpb25SDm9yZGVyRGlyZWN0aW9uEiUKDnNlYXJjaF9rZXl3b3JkGAYgASgJUg1zZWFyY2hLZXl3b3JkEjYKCGRpc2FibGVkGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZVIIZGlzYWJsZWQSLwoEcm9sZRgIIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlUgRyb2xlIkEKB09yZGVyQnkSCwoHREVGQVVMVBAAEgkKBUVNQUlMEAESDgoKQ1JFQVRFRF9BVBACEg4KClVQREFURURfQVQQAyIjCg5PcmRlckRpcmVjdGlvbhIHCgNBU0MQABIICgRERVNDEAEiiwEKFkxpc3RBY2NvdW50c1YyUmVzcG9uc2USOAoIYWNjb3VudHMYASADKAsyHC5idWNrZXRlZXIuYWNjb3VudC5BY2NvdW50VjJSCGFjY291bnRzEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEh8KC3RvdGFsX2NvdW50GAMgASgDUgp0b3RhbENvdW50IowBChNDcmVhdGVBUElLZXlSZXF1ZXN0EkAKB2NvbW1hbmQYASABKAsyJi5idWNrZXRlZXIuYWNjb3VudC5DcmVhdGVBUElLZXlDb21tYW5kUgdjb21tYW5kEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgCIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiSgoUQ3JlYXRlQVBJS2V5UmVzcG9uc2USMgoHYXBpX2tleRgBIAEoCzIZLmJ1Y2tldGVlci5hY2NvdW50LkFQSUtleVIGYXBpS2V5IqQBChdDaGFuZ2VBUElLZXlOYW1lUmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSRAoHY29tbWFuZBgCIAEoCzIqLmJ1Y2tldGVlci5hY2NvdW50LkNoYW5nZUFQSUtleU5hbWVDb21tYW5kUgdjb21tYW5kEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgDIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiGgoYQ2hhbmdlQVBJS2V5TmFtZVJlc3BvbnNlIpwBChNFbmFibGVBUElLZXlSZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZBJACgdjb21tYW5kGAIgASgLMiYuYnVja2V0ZWVyLmFjY291bnQuRW5hYmxlQVBJS2V5Q29tbWFuZFIHY29tbWFuZBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYAyABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlIhYKFEVuYWJsZUFQSUtleVJlc3BvbnNlIp4BChREaXNhYmxlQVBJS2V5UmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSQQoHY29tbWFuZBgCIAEoCzInLmJ1Y2tldGVlci5hY2NvdW50LkRpc2FibGVBUElLZXlDb21tYW5kUgdjb21tYW5kEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgDIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiFwoVRGlzYWJsZUFQSUtleVJlc3BvbnNlIlcKEEdldEFQSUtleVJlcXVlc3QSDgoCaWQYASABKAlSAmlkEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgCIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiRwoRR2V0QVBJS2V5UmVzcG9uc2USMgoHYXBpX2tleRgBIAEoCzIZLmJ1Y2tldGVlci5hY2NvdW50LkFQSUtleVIGYXBpS2V5Iu0DChJMaXN0QVBJS2V5c1JlcXVlc3QSGwoJcGFnZV9zaXplGAEgASgDUghwYWdlU2l6ZRIWCgZjdXJzb3IYAiABKAlSBmN1cnNvchIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYAyABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEkgKCG9yZGVyX2J5GAQgASgOMi0uYnVja2V0ZWVyLmFjY291bnQuTGlzdEFQSUtleXNSZXF1ZXN0Lk9yZGVyQnlSB29yZGVyQnkSXQoPb3JkZXJfZGlyZWN0aW9uGAUgASgOMjQuYnVja2V0ZWVyLmFjY291bnQuTGlzdEFQSUtleXNSZXF1ZXN0Lk9yZGVyRGlyZWN0aW9uUg5vcmRlckRpcmVjdGlvbhIlCg5zZWFyY2hfa2V5d29yZBgGIAEoCVINc2VhcmNoS2V5d29yZBI2CghkaXNhYmxlZBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVSCGRpc2FibGVkIkAKB09yZGVyQnkSCwoHREVGQVVMVBAAEggKBE5BTUUQARIOCgpDUkVBVEVEX0FUEAISDgoKVVBEQVRFRF9BVBADIiMKDk9yZGVyRGlyZWN0aW9uEgcKA0FTQxAAEggKBERFU0MQASKEAQoTTGlzdEFQSUtleXNSZXNwb25zZRI0CghhcGlfa2V5cxgBIAMoCzIZLmJ1Y2tldGVlci5hY2NvdW50LkFQSUtleVIHYXBpS2V5cxIWCgZjdXJzb3IYAiABKAlSBmN1cnNvchIfCgt0b3RhbF9jb3VudBgDIAEoA1IKdG90YWxDb3VudCI8CipHZXRBUElLZXlCeVNlYXJjaGluZ0FsbEVudmlyb25tZW50c1JlcXVlc3QSDgoCaWQYASABKAlSAmlkIoMBCitHZXRBUElLZXlCeVNlYXJjaGluZ0FsbEVudmlyb25tZW50c1Jlc3BvbnNlElQKE2Vudmlyb25tZW50X2FwaV9rZXkYASABKAsyJC5idWNrZXRlZXIuYWNjb3VudC5FbnZpcm9ubWVudEFQSUtleVIRZW52aXJvbm1lbnRBcGlLZXky1RkKDkFjY291bnRTZXJ2aWNlEkoKBUdldE1lEh8uYnVja2V0ZWVyLmFjY291bnQuR2V0TWVSZXF1ZXN0GiAuYnVja2V0ZWVyLmFjY291bnQuR2V0TWVSZXNwb25zZRJxChJHZXRNeU9yZ2FuaXphdGlvbnMSLC5idWNrZXRlZXIuYWNjb3VudC5HZXRNeU9yZ2FuaXphdGlvbnNSZXF1ZXN0Gi0uYnVja2V0ZWVyLmFjY291bnQuR2V0TXlPcmdhbml6YXRpb25zUmVzcG9uc2USUAoHR2V0TWVWMhIhLmJ1Y2tldGVlci5hY2NvdW50LkdldE1lVjJSZXF1ZXN0GiIuYnVja2V0ZWVyLmFjY291bnQuR2V0TWVWMlJlc3BvbnNlEl4KDkdldE1lQnlFbWFpbFYyEiguYnVja2V0ZWVyLmFjY291bnQuR2V0TWVCeUVtYWlsVjJSZXF1ZXN0GiIuYnVja2V0ZWVyLmFjY291bnQuR2V0TWVWMlJlc3BvbnNlEnEKEkNyZWF0ZUFkbWluQWNjb3VudBIsLmJ1Y2tldGVlci5hY2NvdW50LkNyZWF0ZUFkbWluQWNjb3VudFJlcXVlc3QaLS5idWNrZXRlZXIuYWNjb3VudC5DcmVhdGVBZG1pbkFjY291bnRSZXNwb25zZRJxChJFbmFibGVBZG1pbkFjY291bnQSLC5idWNrZXRlZXIuYWNjb3VudC5FbmFibGVBZG1pbkFjY291bnRSZXF1ZXN0Gi0uYnVja2V0ZWVyLmFjY291bnQuRW5hYmxlQWRtaW5BY2NvdW50UmVzcG9uc2USdAoTRGlzYWJsZUFkbWluQWNjb3VudBItLmJ1Y2tldGVlci5hY2NvdW50LkRpc2FibGVBZG1pbkFjY291bnRSZXF1ZXN0Gi4uYnVja2V0ZWVyLmFjY291bnQuRGlzYWJsZUFkbWluQWNjb3VudFJlc3BvbnNlEmgKD0dldEFkbWluQWNjb3VudBIpLmJ1Y2tldGVlci5hY2NvdW50LkdldEFkbWluQWNjb3VudFJlcXVlc3QaKi5idWNrZXRlZXIuYWNjb3VudC5HZXRBZG1pbkFjY291bnRSZXNwb25zZRJuChFMaXN0QWRtaW5BY2NvdW50cxIrLmJ1Y2tldGVlci5hY2NvdW50Lkxpc3RBZG1pbkFjY291bnRzUmVxdWVzdBosLmJ1Y2tldGVlci5hY2NvdW50Lkxpc3RBZG1pbkFjY291bnRzUmVzcG9uc2USZQoOQ29udmVydEFjY291bnQSKC5idWNrZXRlZXIuYWNjb3VudC5Db252ZXJ0QWNjb3VudFJlcXVlc3QaKS5idWNrZXRlZXIuYWNjb3VudC5Db252ZXJ0QWNjb3VudFJlc3BvbnNlEmIKDUNyZWF0ZUFjY291bnQSJy5idWNrZXRlZXIuYWNjb3VudC5DcmVhdGVBY2NvdW50UmVxdWVzdBooLmJ1Y2tldGVlci5hY2NvdW50LkNyZWF0ZUFjY291bnRSZXNwb25zZRJiCg1FbmFibGVBY2NvdW50EicuYnVja2V0ZWVyLmFjY291bnQuRW5hYmxlQWNjb3VudFJlcXVlc3QaKC5idWNrZXRlZXIuYWNjb3VudC5FbmFibGVBY2NvdW50UmVzcG9uc2USZQoORGlzYWJsZUFjY291bnQSKC5idWNrZXRlZXIuYWNjb3VudC5EaXNhYmxlQWNjb3VudFJlcXVlc3QaKS5idWNrZXRlZXIuYWNjb3VudC5EaXNhYmxlQWNjb3VudFJlc3BvbnNlEm4KEUNoYW5nZUFjY291bnRSb2xlEisuYnVja2V0ZWVyLmFjY291bnQuQ2hhbmdlQWNjb3VudFJvbGVSZXF1ZXN0GiwuYnVja2V0ZWVyLmFjY291bnQuQ2hhbmdlQWNjb3VudFJvbGVSZXNwb25zZRJZCgpHZXRBY2NvdW50EiQuYnVja2V0ZWVyLmFjY291bnQuR2V0QWNjb3VudFJlcXVlc3QaJS5idWNrZXRlZXIuYWNjb3VudC5HZXRBY2NvdW50UmVzcG9uc2USXwoMTGlzdEFjY291bnRzEiYuYnVja2V0ZWVyLmFjY291bnQuTGlzdEFjY291bnRzUmVxdWVzdBonLmJ1Y2tldGVlci5hY2NvdW50Lkxpc3RBY2NvdW50c1Jlc3BvbnNlEmgKD0NyZWF0ZUFjY291bnRWMhIpLmJ1Y2tldGVlci5hY2NvdW50LkNyZWF0ZUFjY291bnRWMlJlcXVlc3QaKi5idWNrZXRlZXIuYWNjb3VudC5DcmVhdGVBY2NvdW50VjJSZXNwb25zZRJoCg9FbmFibGVBY2NvdW50VjISKS5idWNrZXRlZXIuYWNjb3VudC5FbmFibGVBY2NvdW50VjJSZXF1ZXN0GiouYnVja2V0ZWVyLmFjY291bnQuRW5hYmxlQWNjb3VudFYyUmVzcG9uc2USawoQRGlzYWJsZUFjY291bnRWMhIqLmJ1Y2tldGVlci5hY2NvdW50LkRpc2FibGVBY2NvdW50VjJSZXF1ZXN0GisuYnVja2V0ZWVyLmFjY291bnQuRGlzYWJsZUFjY291bnRWMlJlc3BvbnNlEmgKD1VwZGF0ZUFjY291bnRWMhIpLmJ1Y2tldGVlci5hY2NvdW50LlVwZGF0ZUFjY291bnRWMlJlcXVlc3QaKi5idWNrZXRlZXIuYWNjb3VudC5VcGRhdGVBY2NvdW50VjJSZXNwb25zZRJoCg9EZWxldGVBY2NvdW50VjISKS5idWNrZXRlZXIuYWNjb3VudC5EZWxldGVBY2NvdW50VjJSZXF1ZXN0GiouYnVja2V0ZWVyLmFjY291bnQuRGVsZXRlQWNjb3VudFYyUmVzcG9uc2USXwoMR2V0QWNjb3VudFYyEiYuYnVja2V0ZWVyLmFjY291bnQuR2V0QWNjb3VudFYyUmVxdWVzdBonLmJ1Y2tldGVlci5hY2NvdW50LkdldEFjY291bnRWMlJlc3BvbnNlEowBChtHZXRBY2NvdW50VjJCeUVudmlyb25tZW50SUQSNS5idWNrZXRlZXIuYWNjb3VudC5HZXRBY2NvdW50VjJCeUVudmlyb25tZW50SURSZXF1ZXN0GjYuYnVja2V0ZWVyLmFjY291bnQuR2V0QWNjb3VudFYyQnlFbnZpcm9ubWVudElEUmVzcG9uc2USZQoOTGlzdEFjY291bnRzVjISKC5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWNjb3VudHNWMlJlcXVlc3QaKS5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWNjb3VudHNWMlJlc3BvbnNlEl8KDENyZWF0ZUFQSUtleRImLmJ1Y2tldGVlci5hY2NvdW50LkNyZWF0ZUFQSUtleVJlcXVlc3QaJy5idWNrZXRlZXIuYWNjb3VudC5DcmVhdGVBUElLZXlSZXNwb25zZRJrChBDaGFuZ2VBUElLZXlOYW1lEiouYnVja2V0ZWVyLmFjY291bnQuQ2hhbmdlQVBJS2V5TmFtZVJlcXVlc3QaKy5idWNrZXRlZXIuYWNjb3VudC5DaGFuZ2VBUElLZXlOYW1lUmVzcG9uc2USXwoMRW5hYmxlQVBJS2V5EiYuYnVja2V0ZWVyLmFjY291bnQuRW5hYmxlQVBJS2V5UmVxdWVzdBonLmJ1Y2tldGVlci5hY2NvdW50LkVuYWJsZUFQSUtleVJlc3BvbnNlEmIKDURpc2FibGVBUElLZXkSJy5idWNrZXRlZXIuYWNjb3VudC5EaXNhYmxlQVBJS2V5UmVxdWVzdBooLmJ1Y2tldGVlci5hY2NvdW50LkRpc2FibGVBUElLZXlSZXNwb25zZRJWCglHZXRBUElLZXkSIy5idWNrZXRlZXIuYWNjb3VudC5HZXRBUElLZXlSZXF1ZXN0GiQuYnVja2V0ZWVyLmFjY291bnQuR2V0QVBJS2V5UmVzcG9uc2USXAoLTGlzdEFQSUtleXMSJS5idWNrZXRlZXIuYWNjb3VudC5MaXN0QVBJS2V5c1JlcXVlc3QaJi5idWNrZXRlZXIuYWNjb3VudC5MaXN0QVBJS2V5c1Jlc3BvbnNlEqQBCiNHZXRBUElLZXlCeVNlYXJjaGluZ0FsbEVudmlyb25tZW50cxI9LmJ1Y2tldGVlci5hY2NvdW50LkdldEFQSUtleUJ5U2VhcmNoaW5nQWxsRW52aXJvbm1lbnRzUmVxdWVzdBo+LmJ1Y2tldGVlci5hY2NvdW50LkdldEFQSUtleUJ5U2VhcmNoaW5nQWxsRW52aXJvbm1lbnRzUmVzcG9uc2VCMVovZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2FjY291bnRiBnByb3RvMw==
  migrationDescriptor: CqwECiNwcm90by9taWdyYXRpb24vbXlzcWxfc2VydmljZS5wcm90bxITYnVja2V0ZWVyLm1pZ3JhdGlvbiIfCh1NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVxdWVzdCIgCh5NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVzcG9uc2UiMQobUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXF1ZXN0EhIKBHN0ZXAYASABKANSBHN0ZXAiHgocUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXNwb25zZTKcAgoVTWlncmF0aW9uTXlTUUxTZXJ2aWNlEoMBChZNaWdyYXRlQWxsTWFzdGVyU2NoZW1hEjIuYnVja2V0ZWVyLm1pZ3JhdGlvbi5NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVxdWVzdBozLmJ1Y2tldGVlci5taWdyYXRpb24uTWlncmF0ZUFsbE1hc3RlclNjaGVtYVJlc3BvbnNlIgASfQoUUm9sbGJhY2tNYXN0ZXJTY2hlbWESMC5idWNrZXRlZXIubWlncmF0aW9uLlJvbGxiYWNrTWFzdGVyU2NoZW1hUmVxdWVzdBoxLmJ1Y2tldGVlci5taWdyYXRpb24uUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXNwb25zZSIAQjNaMWdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9taWdyYXRpb25iBnByb3RvMw==
  experimentcalculatorDescriptor: CtYBCh1wcm90by9mZWF0dXJlL3ZhcmlhdGlvbi5wcm90bxIRYnVja2V0ZWVyLmZlYXR1cmUiZwoJVmFyaWF0aW9uEg4KAmlkGAEgASgJUgJpZBIUCgV2YWx1ZRgCIAEoCVIFdmFsdWUSEgoEbmFtZRgDIAEoCVIEbmFtZRIgCgtkZXNjcmlwdGlvbhgEIAEoCVILZGVzY3JpcHRpb25CMVovZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2ZlYXR1cmViBnByb3RvMwq8BwohcHJvdG8vZXhwZXJpbWVudC9leHBlcmltZW50LnByb3RvEhRidWNrZXRlZXIuZXhwZXJpbWVudBodcHJvdG8vZmVhdHVyZS92YXJpYXRpb24ucHJvdG8i0AUKCkV4cGVyaW1lbnQSDgoCaWQYASABKAlSAmlkEhsKB2dvYWxfaWQYAiABKAlCAhgBUgZnb2FsSWQSHQoKZmVhdHVyZV9pZBgDIAEoCVIJZmVhdHVyZUlkEicKD2ZlYXR1cmVfdmVyc2lvbhgEIAEoBVIOZmVhdHVyZVZlcnNpb24SPAoKdmFyaWF0aW9ucxgFIAMoCzIcLmJ1Y2tldGVlci5mZWF0dXJlLlZhcmlhdGlvblIKdmFyaWF0aW9ucxIZCghzdGFydF9hdBgGIAEoA1IHc3RhcnRBdBIXCgdzdG9wX2F0GAcgASgDUgZzdG9wQXQSHAoHc3RvcHBlZBgIIAEoCEICGAFSB3N0b3BwZWQSIQoKc3RvcHBlZF9hdBgJIAEoA0ICMAFSCXN0b3BwZWRBdBIdCgpjcmVhdGVkX2F0GAogASgDUgljcmVhdGVkQXQSHQoKdXBkYXRlZF9hdBgLIAEoA1IJdXBkYXRlZEF0EhgKB2RlbGV0ZWQYDCABKAhSB2RlbGV0ZWQSGQoIZ29hbF9pZHMYDSADKAlSB2dvYWxJZHMSEgoEbmFtZRgOIAEoCVIEbmFtZRIgCgtkZXNjcmlwdGlvbhgPIAEoCVILZGVzY3JpcHRpb24SKgoRYmFzZV92YXJpYXRpb25faWQYECABKAlSD2Jhc2VWYXJpYXRpb25JZBI/CgZzdGF0dXMYEiABKA4yJy5idWNrZXRlZXIuZXhwZXJpbWVudC5FeHBlcmltZW50LlN0YXR1c1IGc3RhdHVzEh4KCm1haW50YWluZXIYEyABKAlSCm1haW50YWluZXISGgoIYXJjaGl2ZWQYFCABKAhSCGFyY2hpdmVkIkIKBlN0YXR1cxILCgdXQUlUSU5HEAASCwoHUlVOTklORxABEgsKB1NUT1BQRUQQAhIRCg1GT1JDRV9TVE9QUEVEEANKBAgREBIiUQoLRXhwZXJpbWVudHMSQgoLZXhwZXJpbWVudHMYASADKAsyIC5idWNrZXRlZXIuZXhwZXJpbWVudC5FeHBlcmltZW50UgtleHBlcmltZW50c0I0WjJnaXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vZXhwZXJpbWVudGIGcHJvdG8zCuADCihwcm90by9leHBlcmltZW50Y2FsY3VsYXRvci9zZXJ2aWNlLnByb3RvEh5idWNrZXRlZXIuZXhwZXJpbWVudGNhbGN1bGF0b3IaIXByb3RvL2V4cGVyaW1lbnQvZXhwZXJpbWVudC5wcm90byJ7ChBCYXRjaENhbGNSZXF1ZXN0EiUKDmVudmlyb25tZW50X2lkGAEgASgJUg1lbnZpcm9ubWVudElkEkAKCmV4cGVyaW1lbnQYAiABKAsyIC5idWNrZXRlZXIuZXhwZXJpbWVudC5FeHBlcmltZW50UgpleHBlcmltZW50IhMKEUJhdGNoQ2FsY1Jlc3BvbnNlMpYBChtFeHBlcmltZW50Q2FsY3VsYXRvclNlcnZpY2USdwoOQ2FsY0V4cGVyaW1lbnQSMC5idWNrZXRlZXIuZXhwZXJpbWVudGNhbGN1bGF0b3IuQmF0Y2hDYWxjUmVxdWVzdBoxLmJ1Y2tldGVlci5leHBlcmltZW50Y2FsY3VsYXRvci5CYXRjaENhbGNSZXNwb25zZSIAQj5aPGdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9leHBlcmltZW50Y2FsY3VsYXRvcmIGcHJvdG8z
  auditlogDescriptor: 
service:
  externalPort: 9000
ingress:
  host:
  staticIPName:
health:
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
    failureThreshold: 5
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
    failureThreshold: 2
resources: {}
affinity: {}
nodeSelector: {}
pdb:
  enabled:
  maxUnavailable: 50%
hpa:
  enabled:
  minReplicas:
  maxReplicas:
  metrics:
    cpu:
      targetAverageUtilization:
tolerations: []
serviceAccount:
  annotations: {}
