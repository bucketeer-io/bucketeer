// Code generated by MockGen. DO NOT EDIT.
// Source: admin_account.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	domain "github.com/bucketeer-io/bucketeer/pkg/account/domain"
	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	account "github.com/bucketeer-io/bucketeer/proto/account"
)

// MockAdminAccountStorage is a mock of AdminAccountStorage interface.
type MockAdminAccountStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAdminAccountStorageMockRecorder
}

// MockAdminAccountStorageMockRecorder is the mock recorder for MockAdminAccountStorage.
type MockAdminAccountStorageMockRecorder struct {
	mock *MockAdminAccountStorage
}

// NewMockAdminAccountStorage creates a new mock instance.
func NewMockAdminAccountStorage(ctrl *gomock.Controller) *MockAdminAccountStorage {
	mock := &MockAdminAccountStorage{ctrl: ctrl}
	mock.recorder = &MockAdminAccountStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminAccountStorage) EXPECT() *MockAdminAccountStorageMockRecorder {
	return m.recorder
}

// CreateAdminAccount mocks base method.
func (m *MockAdminAccountStorage) CreateAdminAccount(ctx context.Context, a *domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminAccount", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdminAccount indicates an expected call of CreateAdminAccount.
func (mr *MockAdminAccountStorageMockRecorder) CreateAdminAccount(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminAccount", reflect.TypeOf((*MockAdminAccountStorage)(nil).CreateAdminAccount), ctx, a)
}

// GetAdminAccount mocks base method.
func (m *MockAdminAccountStorage) GetAdminAccount(ctx context.Context, id string) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminAccount", ctx, id)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminAccount indicates an expected call of GetAdminAccount.
func (mr *MockAdminAccountStorageMockRecorder) GetAdminAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminAccount", reflect.TypeOf((*MockAdminAccountStorage)(nil).GetAdminAccount), ctx, id)
}

// ListAdminAccounts mocks base method.
func (m *MockAdminAccountStorage) ListAdminAccounts(ctx context.Context, whereParts []mysql.WherePart, orders []*mysql.Order, limit, offset int) ([]*account.Account, int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdminAccounts", ctx, whereParts, orders, limit, offset)
	ret0, _ := ret[0].([]*account.Account)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListAdminAccounts indicates an expected call of ListAdminAccounts.
func (mr *MockAdminAccountStorageMockRecorder) ListAdminAccounts(ctx, whereParts, orders, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdminAccounts", reflect.TypeOf((*MockAdminAccountStorage)(nil).ListAdminAccounts), ctx, whereParts, orders, limit, offset)
}

// UpdateAdminAccount mocks base method.
func (m *MockAdminAccountStorage) UpdateAdminAccount(ctx context.Context, a *domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminAccount", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdminAccount indicates an expected call of UpdateAdminAccount.
func (mr *MockAdminAccountStorageMockRecorder) UpdateAdminAccount(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminAccount", reflect.TypeOf((*MockAdminAccountStorage)(nil).UpdateAdminAccount), ctx, a)
}
