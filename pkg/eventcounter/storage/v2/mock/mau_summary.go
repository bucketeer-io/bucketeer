// Code generated by MockGen. DO NOT EDIT.
// Source: mau_summary.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	eventcounter "github.com/bucketeer-io/bucketeer/proto/eventcounter"
)

// MockMAUSummaryStorage is a mock of MAUSummaryStorage interface.
type MockMAUSummaryStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMAUSummaryStorageMockRecorder
}

// MockMAUSummaryStorageMockRecorder is the mock recorder for MockMAUSummaryStorage.
type MockMAUSummaryStorageMockRecorder struct {
	mock *MockMAUSummaryStorage
}

// NewMockMAUSummaryStorage creates a new mock instance.
func NewMockMAUSummaryStorage(ctrl *gomock.Controller) *MockMAUSummaryStorage {
	mock := &MockMAUSummaryStorage{ctrl: ctrl}
	mock.recorder = &MockMAUSummaryStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMAUSummaryStorage) EXPECT() *MockMAUSummaryStorageMockRecorder {
	return m.recorder
}

// UpsertMAUSummary mocks base method.
func (m *MockMAUSummaryStorage) UpsertMAUSummary(ctx context.Context, mauSummary *eventcounter.MAUSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMAUSummary", ctx, mauSummary)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMAUSummary indicates an expected call of UpsertMAUSummary.
func (mr *MockMAUSummaryStorageMockRecorder) UpsertMAUSummary(ctx, mauSummary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMAUSummary", reflect.TypeOf((*MockMAUSummaryStorage)(nil).UpsertMAUSummary), ctx, mauSummary)
}
