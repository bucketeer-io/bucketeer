fullnameOverride: "web-gateway"
namespace: default
tls:
  bucketeerJP:
    secrets:
    cert:
    key:
  service:
    secret:
    cert:
    key:
envoy:
  image:
    repository: ghcr.io/bucketeer-io/bucketeer-envoy
    tag: v1.26.2
    pullPolicy: IfNotPresent
  serviceCluster: bucketeer
  adminPort: 8001
  eventcounterDescriptor: 
  autoopsDescriptor: 
  authDescriptor: CsgCChZwcm90by9hdXRoL3Rva2VuLnByb3RvEg5idWNrZXRlZXIuYXV0aCKhAQoFVG9rZW4SIQoMYWNjZXNzX3Rva2VuGAEgASgJUgthY2Nlc3NUb2tlbhIdCgp0b2tlbl90eXBlGAIgASgJUgl0b2tlblR5cGUSIwoNcmVmcmVzaF90b2tlbhgDIAEoCVIMcmVmcmVzaFRva2VuEhYKBmV4cGlyeRgEIAEoA1IGZXhwaXJ5EhkKCGlkX3Rva2VuGAUgASgJUgdpZFRva2VuIkIKDklEVG9rZW5TdWJqZWN0EhcKB3VzZXJfaWQYASABKAlSBnVzZXJJZBIXCgdjb25uX2lkGAIgASgJUgZjb25uSWRCLlosZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2F1dGhiBnByb3RvMwrbBgoYcHJvdG8vYXV0aC9zZXJ2aWNlLnByb3RvEg5idWNrZXRlZXIuYXV0aBoWcHJvdG8vYXV0aC90b2tlbi5wcm90byJQChVHZXRBdXRoQ29kZVVSTFJlcXVlc3QSFAoFc3RhdGUYASABKAlSBXN0YXRlEiEKDHJlZGlyZWN0X3VybBgCIAEoCVILcmVkaXJlY3RVcmwiKgoWR2V0QXV0aENvZGVVUkxSZXNwb25zZRIQCgN1cmwYASABKAlSA3VybCJNChRFeGNoYW5nZVRva2VuUmVxdWVzdBISCgRjb2RlGAEgASgJUgRjb2RlEiEKDHJlZGlyZWN0X3VybBgCIAEoCVILcmVkaXJlY3RVcmwiRAoVRXhjaGFuZ2VUb2tlblJlc3BvbnNlEisKBXRva2VuGAEgASgLMhUuYnVja2V0ZWVyLmF1dGguVG9rZW5SBXRva2VuIl0KE1JlZnJlc2hUb2tlblJlcXVlc3QSIwoNcmVmcmVzaF90b2tlbhgBIAEoCVIMcmVmcmVzaFRva2VuEiEKDHJlZGlyZWN0X3VybBgCIAEoCVILcmVkaXJlY3RVcmwiQwoUUmVmcmVzaFRva2VuUmVzcG9uc2USKwoFdG9rZW4YASABKAsyFS5idWNrZXRlZXIuYXV0aC5Ub2tlblIFdG9rZW4ypwIKC0F1dGhTZXJ2aWNlEl8KDkdldEF1dGhDb2RlVVJMEiUuYnVja2V0ZWVyLmF1dGguR2V0QXV0aENvZGVVUkxSZXF1ZXN0GiYuYnVja2V0ZWVyLmF1dGguR2V0QXV0aENvZGVVUkxSZXNwb25zZRJcCg1FeGNoYW5nZVRva2VuEiQuYnVja2V0ZWVyLmF1dGguRXhjaGFuZ2VUb2tlblJlcXVlc3QaJS5idWNrZXRlZXIuYXV0aC5FeGNoYW5nZVRva2VuUmVzcG9uc2USWQoMUmVmcmVzaFRva2VuEiMuYnVja2V0ZWVyLmF1dGguUmVmcmVzaFRva2VuUmVxdWVzdBokLmJ1Y2tldGVlci5hdXRoLlJlZnJlc2hUb2tlblJlc3BvbnNlQi5aLGdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9hdXRoYgZwcm90bzM=
  notificationDescriptor: 
  pushDescriptor: CtQCChhwcm90by9wdXNoL2NvbW1hbmQucHJvdG8SDmJ1Y2tldGVlci5wdXNoIlsKEUNyZWF0ZVB1c2hDb21tYW5kEh4KC2ZjbV9hcGlfa2V5GAEgASgJUglmY21BcGlLZXkSEgoEdGFncxgCIAMoCVIEdGFncxISCgRuYW1lGAMgASgJUgRuYW1lIigKEkFkZFB1c2hUYWdzQ29tbWFuZBISCgR0YWdzGAEgAygJUgR0YWdzIisKFURlbGV0ZVB1c2hUYWdzQ29tbWFuZBISCgR0YWdzGAEgAygJUgR0YWdzIhMKEURlbGV0ZVB1c2hDb21tYW5kIicKEVJlbmFtZVB1c2hDb21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWVCLlosZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL3B1c2hiBnByb3RvMwqYAgoVcHJvdG8vcHVzaC9wdXNoLnByb3RvEg5idWNrZXRlZXIucHVzaCK2AQoEUHVzaBIOCgJpZBgBIAEoCVICaWQSHgoLZmNtX2FwaV9rZXkYAiABKAlSCWZjbUFwaUtleRISCgR0YWdzGAMgAygJUgR0YWdzEhgKB2RlbGV0ZWQYBCABKAhSB2RlbGV0ZWQSEgoEbmFtZRgFIAEoCVIEbmFtZRIdCgpjcmVhdGVkX2F0GAYgASgDUgljcmVhdGVkQXQSHQoKdXBkYXRlZF9hdBgHIAEoA1IJdXBkYXRlZEF0Qi5aLGdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9wdXNoYgZwcm90bzMK8g0KGHByb3RvL3B1c2gvc2VydmljZS5wcm90bxIOYnVja2V0ZWVyLnB1c2gaFXByb3RvL3B1c2gvcHVzaC5wcm90bxoYcHJvdG8vcHVzaC9jb21tYW5kLnByb3RvIoUBChFDcmVhdGVQdXNoUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEjsKB2NvbW1hbmQYAiABKAsyIS5idWNrZXRlZXIucHVzaC5DcmVhdGVQdXNoQ29tbWFuZFIHY29tbWFuZCIUChJDcmVhdGVQdXNoUmVzcG9uc2UirAMKEUxpc3RQdXNoZXNSZXF1ZXN0EjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgBIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USGwoJcGFnZV9zaXplGAIgASgDUghwYWdlU2l6ZRIWCgZjdXJzb3IYAyABKAlSBmN1cnNvchJECghvcmRlcl9ieRgEIAEoDjIpLmJ1Y2tldGVlci5wdXNoLkxpc3RQdXNoZXNSZXF1ZXN0Lk9yZGVyQnlSB29yZGVyQnkSWQoPb3JkZXJfZGlyZWN0aW9uGAUgASgOMjAuYnVja2V0ZWVyLnB1c2guTGlzdFB1c2hlc1JlcXVlc3QuT3JkZXJEaXJlY3Rpb25SDm9yZGVyRGlyZWN0aW9uEiUKDnNlYXJjaF9rZXl3b3JkGAYgASgJUg1zZWFyY2hLZXl3b3JkIkAKB09yZGVyQnkSCwoHREVGQVVMVBAAEggKBE5BTUUQARIOCgpDUkVBVEVEX0FUEAISDgoKVVBEQVRFRF9BVBADIiMKDk9yZGVyRGlyZWN0aW9uEgcKA0FTQxAAEggKBERFU0MQASJ7ChJMaXN0UHVzaGVzUmVzcG9uc2USLAoGcHVzaGVzGAEgAygLMhQuYnVja2V0ZWVyLnB1c2guUHVzaFIGcHVzaGVzEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEh8KC3RvdGFsX2NvdW50GAMgASgDUgp0b3RhbENvdW50IpUBChFEZWxldGVQdXNoUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEg4KAmlkGAIgASgJUgJpZBI7Cgdjb21tYW5kGAMgASgLMiEuYnVja2V0ZWVyLnB1c2guRGVsZXRlUHVzaENvbW1hbmRSB2NvbW1hbmQiFAoSRGVsZXRlUHVzaFJlc3BvbnNlIuICChFVcGRhdGVQdXNoUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEg4KAmlkGAIgASgJUgJpZBJVChVhZGRfcHVzaF90YWdzX2NvbW1hbmQYAyABKAsyIi5idWNrZXRlZXIucHVzaC5BZGRQdXNoVGFnc0NvbW1hbmRSEmFkZFB1c2hUYWdzQ29tbWFuZBJeChhkZWxldGVfcHVzaF90YWdzX2NvbW1hbmQYBCABKAsyJS5idWNrZXRlZXIucHVzaC5EZWxldGVQdXNoVGFnc0NvbW1hbmRSFWRlbGV0ZVB1c2hUYWdzQ29tbWFuZBJRChNyZW5hbWVfcHVzaF9jb21tYW5kGAUgASgLMiEuYnVja2V0ZWVyLnB1c2guUmVuYW1lUHVzaENvbW1hbmRSEXJlbmFtZVB1c2hDb21tYW5kIhQKElVwZGF0ZVB1c2hSZXNwb25zZTLpAgoLUHVzaFNlcnZpY2USVQoKTGlzdFB1c2hlcxIhLmJ1Y2tldGVlci5wdXNoLkxpc3RQdXNoZXNSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guTGlzdFB1c2hlc1Jlc3BvbnNlIgASVQoKQ3JlYXRlUHVzaBIhLmJ1Y2tldGVlci5wdXNoLkNyZWF0ZVB1c2hSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guQ3JlYXRlUHVzaFJlc3BvbnNlIgASVQoKRGVsZXRlUHVzaBIhLmJ1Y2tldGVlci5wdXNoLkRlbGV0ZVB1c2hSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guRGVsZXRlUHVzaFJlc3BvbnNlIgASVQoKVXBkYXRlUHVzaBIhLmJ1Y2tldGVlci5wdXNoLlVwZGF0ZVB1c2hSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guVXBkYXRlUHVzaFJlc3BvbnNlIgBCLlosZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL3B1c2hiBnByb3RvMw==
  batchDescriptor: CuMFChlwcm90by9iYXRjaC9zZXJ2aWNlLnByb3RvEg9idWNrZXRlZXIuYmF0Y2giPgoPQmF0Y2hKb2JSZXF1ZXN0EisKA2pvYhgBIAEoDjIZLmJ1Y2tldGVlci5iYXRjaC5CYXRjaEpvYlIDam9iIhIKEEJhdGNoSm9iUmVzcG9uc2UqvQMKCEJhdGNoSm9iEhsKF0V4cGVyaW1lbnRTdGF0dXNVcGRhdGVyEAASHAoYRXhwZXJpbWVudFJ1bm5pbmdXYXRjaGVyEAESFwoTRmVhdHVyZVN0YWxlV2F0Y2hlchACEhMKD01hdUNvdW50V2F0Y2hlchADEhMKD0RhdGV0aW1lV2F0Y2hlchAEEhUKEUV2ZW50Q291bnRXYXRjaGVyEAUSFwoTRG9tYWluRXZlbnRJbmZvcm1lchAGEhcKE1JlZGlzQ291bnRlckRlbGV0ZXIQBxIdChlQcm9ncmVzc2l2ZVJvbGxvdXRXYXRjaGVyEAgSGAoURXhwZXJpbWVudENhbGN1bGF0b3IQCRIRCg1NYXVTdW1tYXJpemVyEAoSFwoTTWF1UGFydGl0aW9uRGVsZXRlchALEhcKE01hdVBhcnRpdGlvbkNyZWF0b3IQDBIVChFGZWF0dXJlRmxhZ0NhY2hlchANEhUKEVNlZ21lbnRVc2VyQ2FjaGVyEA4SEAoMQXBpS2V5Q2FjaGVyEA8SFgoSQXV0b09wc1J1bGVzQ2FjaGVyEBASFAoQRXhwZXJpbWVudENhY2hlchARMmgKDEJhdGNoU2VydmljZRJYCg9FeGVjdXRlQmF0Y2hKb2ISIC5idWNrZXRlZXIuYmF0Y2guQmF0Y2hKb2JSZXF1ZXN0GiEuYnVja2V0ZWVyLmJhdGNoLkJhdGNoSm9iUmVzcG9uc2UiAEIvWi1naXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vYmF0Y2hiBnByb3RvMw==
  environmentDescriptor: 
  experimentDescriptor: 
  featureDescriptor: 
  accountDescriptor: 
  migrationDescriptor: CqwECiNwcm90by9taWdyYXRpb24vbXlzcWxfc2VydmljZS5wcm90bxITYnVja2V0ZWVyLm1pZ3JhdGlvbiIfCh1NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVxdWVzdCIgCh5NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVzcG9uc2UiMQobUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXF1ZXN0EhIKBHN0ZXAYASABKANSBHN0ZXAiHgocUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXNwb25zZTKcAgoVTWlncmF0aW9uTXlTUUxTZXJ2aWNlEoMBChZNaWdyYXRlQWxsTWFzdGVyU2NoZW1hEjIuYnVja2V0ZWVyLm1pZ3JhdGlvbi5NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVxdWVzdBozLmJ1Y2tldGVlci5taWdyYXRpb24uTWlncmF0ZUFsbE1hc3RlclNjaGVtYVJlc3BvbnNlIgASfQoUUm9sbGJhY2tNYXN0ZXJTY2hlbWESMC5idWNrZXRlZXIubWlncmF0aW9uLlJvbGxiYWNrTWFzdGVyU2NoZW1hUmVxdWVzdBoxLmJ1Y2tldGVlci5taWdyYXRpb24uUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXNwb25zZSIAQjNaMWdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9taWdyYXRpb25iBnByb3RvMw==
  experimentcalculatorDescriptor: CtYBCh1wcm90by9mZWF0dXJlL3ZhcmlhdGlvbi5wcm90bxIRYnVja2V0ZWVyLmZlYXR1cmUiZwoJVmFyaWF0aW9uEg4KAmlkGAEgASgJUgJpZBIUCgV2YWx1ZRgCIAEoCVIFdmFsdWUSEgoEbmFtZRgDIAEoCVIEbmFtZRIgCgtkZXNjcmlwdGlvbhgEIAEoCVILZGVzY3JpcHRpb25CMVovZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2ZlYXR1cmViBnByb3RvMwq8BwohcHJvdG8vZXhwZXJpbWVudC9leHBlcmltZW50LnByb3RvEhRidWNrZXRlZXIuZXhwZXJpbWVudBodcHJvdG8vZmVhdHVyZS92YXJpYXRpb24ucHJvdG8i0AUKCkV4cGVyaW1lbnQSDgoCaWQYASABKAlSAmlkEhsKB2dvYWxfaWQYAiABKAlCAhgBUgZnb2FsSWQSHQoKZmVhdHVyZV9pZBgDIAEoCVIJZmVhdHVyZUlkEicKD2ZlYXR1cmVfdmVyc2lvbhgEIAEoBVIOZmVhdHVyZVZlcnNpb24SPAoKdmFyaWF0aW9ucxgFIAMoCzIcLmJ1Y2tldGVlci5mZWF0dXJlLlZhcmlhdGlvblIKdmFyaWF0aW9ucxIZCghzdGFydF9hdBgGIAEoA1IHc3RhcnRBdBIXCgdzdG9wX2F0GAcgASgDUgZzdG9wQXQSHAoHc3RvcHBlZBgIIAEoCEICGAFSB3N0b3BwZWQSIQoKc3RvcHBlZF9hdBgJIAEoA0ICMAFSCXN0b3BwZWRBdBIdCgpjcmVhdGVkX2F0GAogASgDUgljcmVhdGVkQXQSHQoKdXBkYXRlZF9hdBgLIAEoA1IJdXBkYXRlZEF0EhgKB2RlbGV0ZWQYDCABKAhSB2RlbGV0ZWQSGQoIZ29hbF9pZHMYDSADKAlSB2dvYWxJZHMSEgoEbmFtZRgOIAEoCVIEbmFtZRIgCgtkZXNjcmlwdGlvbhgPIAEoCVILZGVzY3JpcHRpb24SKgoRYmFzZV92YXJpYXRpb25faWQYECABKAlSD2Jhc2VWYXJpYXRpb25JZBI/CgZzdGF0dXMYEiABKA4yJy5idWNrZXRlZXIuZXhwZXJpbWVudC5FeHBlcmltZW50LlN0YXR1c1IGc3RhdHVzEh4KCm1haW50YWluZXIYEyABKAlSCm1haW50YWluZXISGgoIYXJjaGl2ZWQYFCABKAhSCGFyY2hpdmVkIkIKBlN0YXR1cxILCgdXQUlUSU5HEAASCwoHUlVOTklORxABEgsKB1NUT1BQRUQQAhIRCg1GT1JDRV9TVE9QUEVEEANKBAgREBIiUQoLRXhwZXJpbWVudHMSQgoLZXhwZXJpbWVudHMYASADKAsyIC5idWNrZXRlZXIuZXhwZXJpbWVudC5FeHBlcmltZW50UgtleHBlcmltZW50c0I0WjJnaXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vZXhwZXJpbWVudGIGcHJvdG8zCuADCihwcm90by9leHBlcmltZW50Y2FsY3VsYXRvci9zZXJ2aWNlLnByb3RvEh5idWNrZXRlZXIuZXhwZXJpbWVudGNhbGN1bGF0b3IaIXByb3RvL2V4cGVyaW1lbnQvZXhwZXJpbWVudC5wcm90byJ7ChBCYXRjaENhbGNSZXF1ZXN0EiUKDmVudmlyb25tZW50X2lkGAEgASgJUg1lbnZpcm9ubWVudElkEkAKCmV4cGVyaW1lbnQYAiABKAsyIC5idWNrZXRlZXIuZXhwZXJpbWVudC5FeHBlcmltZW50UgpleHBlcmltZW50IhMKEUJhdGNoQ2FsY1Jlc3BvbnNlMpYBChtFeHBlcmltZW50Q2FsY3VsYXRvclNlcnZpY2USdwoOQ2FsY0V4cGVyaW1lbnQSMC5idWNrZXRlZXIuZXhwZXJpbWVudGNhbGN1bGF0b3IuQmF0Y2hDYWxjUmVxdWVzdBoxLmJ1Y2tldGVlci5leHBlcmltZW50Y2FsY3VsYXRvci5CYXRjaENhbGNSZXNwb25zZSIAQj5aPGdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9leHBlcmltZW50Y2FsY3VsYXRvcmIGcHJvdG8z
  auditlogDescriptor: 
service:
  externalPort: 9000
ingress:
  host:
  staticIPName:
health:
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
    failureThreshold: 5
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
    failureThreshold: 2
resources: {}
affinity: {}
nodeSelector: {}
pdb:
  enabled:
  maxUnavailable: 50%
hpa:
  enabled:
  minReplicas:
  maxReplicas:
  metrics:
    cpu:
      targetAverageUtilization:
tolerations: []
serviceAccount:
  annotations: {}
