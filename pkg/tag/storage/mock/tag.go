// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go
//
// Generated by this command:
//
//	mockgen -source=tag.go -package=mock -destination=./mock/tag.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	domain "github.com/bucketeer-io/bucketeer/pkg/tag/domain"
	tag "github.com/bucketeer-io/bucketeer/proto/tag"
)

// MockTagStorage is a mock of TagStorage interface.
type MockTagStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTagStorageMockRecorder
}

// MockTagStorageMockRecorder is the mock recorder for MockTagStorage.
type MockTagStorageMockRecorder struct {
	mock *MockTagStorage
}

// NewMockTagStorage creates a new mock instance.
func NewMockTagStorage(ctrl *gomock.Controller) *MockTagStorage {
	mock := &MockTagStorage{ctrl: ctrl}
	mock.recorder = &MockTagStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagStorage) EXPECT() *MockTagStorageMockRecorder {
	return m.recorder
}

// DeleteTag mocks base method.
func (m *MockTagStorage) DeleteTag(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockTagStorageMockRecorder) DeleteTag(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagStorage)(nil).DeleteTag), ctx, id)
}

// GetTag mocks base method.
func (m *MockTagStorage) GetTag(ctx context.Context, id, environmentId string) (*domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, id, environmentId)
	ret0, _ := ret[0].(*domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockTagStorageMockRecorder) GetTag(ctx, id, environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagStorage)(nil).GetTag), ctx, id, environmentId)
}

// GetTagByName mocks base method.
func (m *MockTagStorage) GetTagByName(ctx context.Context, name, environmentId string, entityType tag.Tag_EntityType) (*domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByName", ctx, name, environmentId, entityType)
	ret0, _ := ret[0].(*domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByName indicates an expected call of GetTagByName.
func (mr *MockTagStorageMockRecorder) GetTagByName(ctx, name, environmentId, entityType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByName", reflect.TypeOf((*MockTagStorage)(nil).GetTagByName), ctx, name, environmentId, entityType)
}

// ListAllEnvironmentTags mocks base method.
func (m *MockTagStorage) ListAllEnvironmentTags(ctx context.Context) ([]*tag.EnvironmentTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllEnvironmentTags", ctx)
	ret0, _ := ret[0].([]*tag.EnvironmentTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllEnvironmentTags indicates an expected call of ListAllEnvironmentTags.
func (mr *MockTagStorageMockRecorder) ListAllEnvironmentTags(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllEnvironmentTags", reflect.TypeOf((*MockTagStorage)(nil).ListAllEnvironmentTags), ctx)
}

// ListTags mocks base method.
func (m *MockTagStorage) ListTags(ctx context.Context, options *mysql.ListOptions) ([]*tag.Tag, int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, options)
	ret0, _ := ret[0].([]*tag.Tag)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListTags indicates an expected call of ListTags.
func (mr *MockTagStorageMockRecorder) ListTags(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockTagStorage)(nil).ListTags), ctx, options)
}

// UpsertTag mocks base method.
func (m *MockTagStorage) UpsertTag(ctx context.Context, tag *domain.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTag", ctx, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTag indicates an expected call of UpsertTag.
func (mr *MockTagStorageMockRecorder) UpsertTag(ctx, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTag", reflect.TypeOf((*MockTagStorage)(nil).UpsertTag), ctx, tag)
}
