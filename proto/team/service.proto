// Copyright 2025 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.team;
option go_package = "github.com/bucketeer-io/bucketeer/proto/team";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/team/team.proto";

message CreateTeamRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  string description = 2;
  string organization_id = 3 [(google.api.field_behavior) = REQUIRED];
}

message CreateTeamResponse {
  Team team = 1;
}

message DeleteTeamRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  string organization_id = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteTeamResponse {}

message ListTeamsRequest {
  enum OrderBy {
    DEFAULT = 0;
    NAME = 1;
    CREATED_AT = 2;
    UPDATED_AT = 3;
    ORGANIZATION = 4;
  }
  enum OrderDirection {
    ASC = 0;
    DESC = 1;
  }
  int64 page_size = 1;
  string cursor = 2;
  OrderBy order_by = 3;
  OrderDirection order_direction = 4;
  string organization_id = 5 [(google.api.field_behavior) = REQUIRED];
  string search_keyword = 6;
}

message ListTeamsResponse {
  repeated Team teams = 1;
  string next_cursor = 2;
  int64 total_count = 3;
}

service TeamService {
  rpc CreateTeam(CreateTeamRequest) returns (CreateTeamResponse) {
    option (google.api.http) = {
      post: "/v1/team"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create a team.",
      tags: "team",
      operation_id: "web.v1.team.create",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      },
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }

  rpc DeleteTeam(DeleteTeamRequest) returns (DeleteTeamResponse) {
    option (google.api.http) = {
      delete: "/v1/team"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete",
      description: "Delete a team.",
      tags: "team",
      operation_id: "web.v1.team.delete",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      },
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the team is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }

  rpc ListTeams(ListTeamsRequest) returns (ListTeamsResponse) {
    option (google.api.http) = {
      get: "/v1/teams"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "List teams."
      tags: "team"
      operation_id: "web.v1.team.list"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
}
