// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -package=mock -destination=./mock/client.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"

	auth "github.com/bucketeer-io/bucketeer/v2/proto/auth"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ExchangeToken mocks base method.
func (m *MockClient) ExchangeToken(ctx context.Context, in *auth.ExchangeTokenRequest, opts ...grpc.CallOption) (*auth.ExchangeTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExchangeToken", varargs...)
	ret0, _ := ret[0].(*auth.ExchangeTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeToken indicates an expected call of ExchangeToken.
func (mr *MockClientMockRecorder) ExchangeToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeToken", reflect.TypeOf((*MockClient)(nil).ExchangeToken), varargs...)
}

// GetAuthenticationURL mocks base method.
func (m *MockClient) GetAuthenticationURL(ctx context.Context, in *auth.GetAuthenticationURLRequest, opts ...grpc.CallOption) (*auth.GetAuthenticationURLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthenticationURL", varargs...)
	ret0, _ := ret[0].(*auth.GetAuthenticationURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticationURL indicates an expected call of GetAuthenticationURL.
func (mr *MockClientMockRecorder) GetAuthenticationURL(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticationURL", reflect.TypeOf((*MockClient)(nil).GetAuthenticationURL), varargs...)
}

// GetDemoSiteStatus mocks base method.
func (m *MockClient) GetDemoSiteStatus(ctx context.Context, in *auth.GetDemoSiteStatusRequest, opts ...grpc.CallOption) (*auth.GetDemoSiteStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDemoSiteStatus", varargs...)
	ret0, _ := ret[0].(*auth.GetDemoSiteStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDemoSiteStatus indicates an expected call of GetDemoSiteStatus.
func (mr *MockClientMockRecorder) GetDemoSiteStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDemoSiteStatus", reflect.TypeOf((*MockClient)(nil).GetDemoSiteStatus), varargs...)
}

// InitiatePasswordSetup mocks base method.
func (m *MockClient) InitiatePasswordSetup(ctx context.Context, in *auth.InitiatePasswordSetupRequest, opts ...grpc.CallOption) (*auth.InitiatePasswordSetupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitiatePasswordSetup", varargs...)
	ret0, _ := ret[0].(*auth.InitiatePasswordSetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePasswordSetup indicates an expected call of InitiatePasswordSetup.
func (mr *MockClientMockRecorder) InitiatePasswordSetup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePasswordSetup", reflect.TypeOf((*MockClient)(nil).InitiatePasswordSetup), varargs...)
}

// RefreshToken mocks base method.
func (m *MockClient) RefreshToken(ctx context.Context, in *auth.RefreshTokenRequest, opts ...grpc.CallOption) (*auth.RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RefreshToken", varargs...)
	ret0, _ := ret[0].(*auth.RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockClientMockRecorder) RefreshToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockClient)(nil).RefreshToken), varargs...)
}

// SetupPassword mocks base method.
func (m *MockClient) SetupPassword(ctx context.Context, in *auth.SetupPasswordRequest, opts ...grpc.CallOption) (*auth.SetupPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetupPassword", varargs...)
	ret0, _ := ret[0].(*auth.SetupPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupPassword indicates an expected call of SetupPassword.
func (mr *MockClientMockRecorder) SetupPassword(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupPassword", reflect.TypeOf((*MockClient)(nil).SetupPassword), varargs...)
}

// SignIn mocks base method.
func (m *MockClient) SignIn(ctx context.Context, in *auth.SignInRequest, opts ...grpc.CallOption) (*auth.SignInResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignIn", varargs...)
	ret0, _ := ret[0].(*auth.SignInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockClientMockRecorder) SignIn(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockClient)(nil).SignIn), varargs...)
}

// SwitchOrganization mocks base method.
func (m *MockClient) SwitchOrganization(ctx context.Context, in *auth.SwitchOrganizationRequest, opts ...grpc.CallOption) (*auth.SwitchOrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SwitchOrganization", varargs...)
	ret0, _ := ret[0].(*auth.SwitchOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchOrganization indicates an expected call of SwitchOrganization.
func (mr *MockClientMockRecorder) SwitchOrganization(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchOrganization", reflect.TypeOf((*MockClient)(nil).SwitchOrganization), varargs...)
}

// UpdatePassword mocks base method.
func (m *MockClient) UpdatePassword(ctx context.Context, in *auth.UpdatePasswordRequest, opts ...grpc.CallOption) (*auth.UpdatePasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePassword", varargs...)
	ret0, _ := ret[0].(*auth.UpdatePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockClientMockRecorder) UpdatePassword(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockClient)(nil).UpdatePassword), varargs...)
}

// ValidatePasswordResetToken mocks base method.
func (m *MockClient) ValidatePasswordResetToken(ctx context.Context, in *auth.ValidatePasswordResetTokenRequest, opts ...grpc.CallOption) (*auth.ValidatePasswordResetTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidatePasswordResetToken", varargs...)
	ret0, _ := ret[0].(*auth.ValidatePasswordResetTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePasswordResetToken indicates an expected call of ValidatePasswordResetToken.
func (mr *MockClientMockRecorder) ValidatePasswordResetToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePasswordResetToken", reflect.TypeOf((*MockClient)(nil).ValidatePasswordResetToken), varargs...)
}

// ValidatePasswordSetupToken mocks base method.
func (m *MockClient) ValidatePasswordSetupToken(ctx context.Context, in *auth.ValidatePasswordSetupTokenRequest, opts ...grpc.CallOption) (*auth.ValidatePasswordSetupTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidatePasswordSetupToken", varargs...)
	ret0, _ := ret[0].(*auth.ValidatePasswordSetupTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePasswordSetupToken indicates an expected call of ValidatePasswordSetupToken.
func (mr *MockClientMockRecorder) ValidatePasswordSetupToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePasswordSetupToken", reflect.TypeOf((*MockClient)(nil).ValidatePasswordSetupToken), varargs...)
}
