name: push-image

on:
  workflow_dispatch:
    inputs:
      skip_e2e:
        description: "Skip e2e tests"
        type: boolean
        default: false
      skip_prd_pr:
        description: "Skip Production PR"
        type: boolean
        default: false
      skip_release_note:
        description: "Skip release note"
        type: boolean
        default: true

  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - "ui/web-v2/README.md"
      - "python/README.md"
      - "CLA.md"
      - "CONTRIBUTING.md"
      - "DEPLOYMENT.md"
      - ".github/workflows/**"

env:
  GHCR_REGISTRY: ghcr.io/bucketeer-io
  GAR_REGISTRY: asia-docker.pkg.dev
  PROTOC_VERSION: 3.18.1
  PROTOC_GEN_GO_VERSION: v1.5.2
  GO_VERSION: 1.17.13
  PYTHON_VERSION: 3.7.6
  PYTHON_PATH: ./python
  NODE_VERSION: 16
  WEB_PATH: ./ui/web-v2

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.tag.outputs.value }}
      REF: ${{ steps.ref.outputs.value }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Store git tag value to output
        id: tag
        run: echo "value=$(git describe --tags --always --abbrev=7)" >> $GITHUB_OUTPUT
      - name: Store git ref value to output
        id: ref
        run: echo "value=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

  go:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # This is a workaround to ensure the publish_chart won't start before the release workflow.
          # Because the version is based on the tag, if the publish_chart starts before
          # the release workflow, it will create a chart with an old version.
      - name: Wait for release note to succeed
        if: ${{ ! github.event.inputs || github.event.inputs.skip_release_note == 'false' }}
        uses: lewagon/wait-on-check-action@0179dfc359f90a703c41240506f998ee1603f9ea # v1.0.0
        with:
          ref: ${{ github.ref }}
          # DO NOT CHANGE the check-name. This name is based on the workflow name defined in the release.yaml
          check-name: "Release Please"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Protoc
        uses: arduino/setup-protoc@64c0c85d18e984422218383b81c52f8b077404d3 # v1.1.2
        with:
          version: ${{ env.PROTOC_VERSION }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install protoc-gen-go
        run: go install github.com/golang/protobuf/protoc-gen-go@${{ env.PROTOC_GEN_GO_VERSION }}
      - name: Generate proto go files
        run: make proto-go
      - name: Install go dependencies
        run: make vendor
      - name: Build go applications
        run: make build-go
      - name: Add executable permission to go binary files
        run: chmod +x bin/*
      - name: Set up docker
        uses: docker/setup-buildx-action@95cb08cb2672c73d4ffd2f422e6d11953d2a9c70 # v2.1.0
        with:
          install: true
      - name: Create Dockerfile of go applications
        run: |
          for APP in `ls bin`
          do
            ./tools/build/show-dockerfile.sh bin $APP > Dockerfile-app-$APP
          done
      - name: Build go application images
        run: |
          for APP in `ls bin`
          do
            IMAGE=`./tools/build/show-image-name.sh $APP`
            docker build -f Dockerfile-app-$APP -t bucketeer-$IMAGE:${{ needs.setup.outputs.IMAGE_TAG }} --load .
          done
      - name: Login to GHCR
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER_NAME }}
          password: ${{ secrets.GHCR_PAT }}
      - name: push go application images to GHCR
        run: |
          push_func(){
            IMAGE=`./tools/build/show-image-name.sh $1`
            docker tag bucketeer-$IMAGE:${{ needs.setup.outputs.IMAGE_TAG }} ${{ env.GHCR_REGISTRY }}/bucketeer-$IMAGE:${{ needs.setup.outputs.IMAGE_TAG }}
            docker push ${{ env.GHCR_REGISTRY }}/bucketeer-$IMAGE:${{ needs.setup.outputs.IMAGE_TAG }}
          }
          pids=()
          for APP in `ls bin`
          do
            push_func "$APP" &
            pids+=($!)
          done
          for pid in "${pids[@]}"; do
          if wait -n; then
            :
          else
            exit_code=$?
            echo "Process exited with $exit_code, killing the other processes now."
            for pid in "${pids[@]}"; do
              kill -9 "$pid" 2> /dev/null || :
            done
            exit "$exit_code"
          fi
          done
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@c4799db9111fba4461e9f9da8732e5057b394f72 # v0.8.3
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GAR_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GAR_SA_MAIL_ADDRESS }}
      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GAR_REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: push go application images to GAR
        run: |
          push_func(){
            IMAGE=`./tools/build/show-image-name.sh $1`
            docker tag bucketeer-$IMAGE:${{ needs.setup.outputs.IMAGE_TAG }} ${{ env.GAR_REGISTRY }}/${{ secrets.GAR_PROJECT }}/bucketeer/bucketeer-$IMAGE:${{ needs.setup.outputs.IMAGE_TAG }}
            docker push ${{ env.GAR_REGISTRY }}/${{ secrets.GAR_PROJECT }}/bucketeer/bucketeer-$IMAGE:${{ needs.setup.outputs.IMAGE_TAG }}
          }
          pids=()
          for APP in `ls bin`
          do
            push_func "$APP" &
            pids+=($!)
          done
          for pid in "${pids[@]}"; do
          if wait -n; then
            :
          else
            exit_code=$?
            echo "Process exited with $exit_code, killing the other processes now."
            for pid in "${pids[@]}"; do
              kill -9 "$pid" 2> /dev/null || :
            done
            exit "$exit_code"
          fi
          done
  python:
    needs: setup
    runs-on: ubuntu-20.04
    permissions:
      contents: "read"
      id-token: "write"
    defaults:
      run:
        working-directory: ${{ env.PYTHON_PATH }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: "x64"
      - name: Install Poetry
        uses: snok/install-poetry@d45b6d76012debf457ab49dffc7fb7b2efe8071d # v1.3.3
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make init
      - name: Build python
        run: |
          source .venv/bin/activate
          make gen
      - name: Set up docker
        uses: docker/setup-buildx-action@95cb08cb2672c73d4ffd2f422e6d11953d2a9c70 # v2.1.0
        with:
          install: true
      - name: Build python application images
        run: docker build -t bucketeer-calculator:${{ needs.setup.outputs.IMAGE_TAG }} --load .
      - name: Login to GHCR
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER_NAME }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Push python application image to GHCR
        run: |
          docker tag bucketeer-calculator:${{ needs.setup.outputs.IMAGE_TAG }} ${{ env.GHCR_REGISTRY }}/bucketeer-calculator:${{ needs.setup.outputs.IMAGE_TAG }}
          docker push ${{ env.GHCR_REGISTRY }}/bucketeer-calculator:${{ needs.setup.outputs.IMAGE_TAG }}
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@c4799db9111fba4461e9f9da8732e5057b394f72 # v0.8.3
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GAR_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GAR_SA_MAIL_ADDRESS }}
      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GAR_REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Push python application image to GAR
        run: |
          docker tag bucketeer-calculator:${{ needs.setup.outputs.IMAGE_TAG }} ${{ env.GAR_REGISTRY }}/${{ secrets.GAR_PROJECT }}/bucketeer/bucketeer-calculator:${{ needs.setup.outputs.IMAGE_TAG }}
          docker push ${{ env.GAR_REGISTRY }}/${{ secrets.GAR_PROJECT }}/bucketeer/bucketeer-calculator:${{ needs.setup.outputs.IMAGE_TAG }}

  web-v2:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    defaults:
      run:
        working-directory: ${{ env.WEB_PATH }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Load cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            **/node_modules
            **/.eslintcache
            $(yarn cache dir)
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: make install
      - name: Install Protoc
        uses: arduino/setup-protoc@64c0c85d18e984422218383b81c52f8b077404d3 # v1.1.2
        with:
          version: ${{ env.PROTOC_VERSION }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate proto files
        run: make gen_proto
      - name: Build web
        env:
          RELEASE_CHANNEL: prod
        run: make build
      - name: Set up docker
        uses: docker/setup-buildx-action@95cb08cb2672c73d4ffd2f422e6d11953d2a9c70 # v2.1.0
        with:
          install: true
      - name: Build web application images
        run: docker build -t bucketeer-web-v2:${{ needs.setup.outputs.IMAGE_TAG }} --load .
      - name: Login to GHCR
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER_NAME }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Push web application image to GHCR
        run: |
          docker tag bucketeer-web-v2:${{ needs.setup.outputs.IMAGE_TAG }} ${{ env.GHCR_REGISTRY }}/bucketeer-web-v2:${{ needs.setup.outputs.IMAGE_TAG }}
          docker push ${{ env.GHCR_REGISTRY }}/bucketeer-web-v2:${{ needs.setup.outputs.IMAGE_TAG }}
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@c4799db9111fba4461e9f9da8732e5057b394f72 # v0.8.3
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GAR_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GAR_SA_MAIL_ADDRESS }}
      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GAR_REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Push web application image to GAR
        run: |
          docker tag bucketeer-web-v2:${{ needs.setup.outputs.IMAGE_TAG }} ${{ env.GAR_REGISTRY }}/${{ secrets.GAR_PROJECT }}/bucketeer/bucketeer-web-v2:${{ needs.setup.outputs.IMAGE_TAG }}
          docker push ${{ env.GAR_REGISTRY }}/${{ secrets.GAR_PROJECT }}/bucketeer/bucketeer-web-v2:${{ needs.setup.outputs.IMAGE_TAG }}

  dispatch:
    needs: [setup, go, python, web-v2]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Workflow Dispatch
        uses: benc-uk/workflow-dispatch@798e70c97009500150087d30d9f11c5444830385 # v1.2.2
        with:
          repo: ${{ secrets.CONFIG_REPO }}
          token: ${{ secrets.REPO_ACCESS_PAT }}
          workflow: dev-deploy.yaml
          ref: master
          inputs: '{"ref": "${{ needs.setup.outputs.REF }}", "image_tag": "${{ needs.setup.outputs.IMAGE_TAG }}", "committer": "${{ github.event.head_commit.author.name }}", "commit_message": "${{ github.event.head_commit.message }}", "commit_url": "${{ github.event.head_commit.url }}", "skip_e2e": "${{ github.event.inputs.skip_e2e }}", "skip_prd_pr": "${{ github.event.inputs.skip_prd_pr }}"}'

  notify-success-to-slack:
    needs: dispatch
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Slack notification
        uses: slackapi/slack-github-action@007b2c3c751a190b6f0f040e47ed024deaa72844 # v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "",
              "blocks": [],
              "attachments": [
                {
                  "title": "Image Push Succeeded",
                  "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "color": "good",
                  "fields": [
                    {
                      "title": "Committer",
                      "value": "${{ github.event.head_commit.author.name }}"
                    },
                    {
                      "title": "Commit message",
                      "value": "${{ github.event.head_commit.message }}"
                    },
                    {
                      "title": "Commit URL",
                      "value": "${{ github.event.head_commit.url }}"
                    }
                  ]
                }
              ]
            }

  notify-failure-to-slack:
    needs: [setup, go, python, web-v2, dispatch]
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Slack notification
        uses: slackapi/slack-github-action@007b2c3c751a190b6f0f040e47ed024deaa72844 # v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "",
              "blocks": [],
              "attachments": [
                {
                  "title": "Image Push Failed",
                  "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Committer",
                      "value": "${{ github.event.head_commit.author.name }}"
                    },
                    {
                      "title": "Commit message",
                      "value": "${{ github.event.head_commit.message }}"
                    },
                    {
                      "title": "Commit URL",
                      "value": "${{ github.event.head_commit.url }}"
                    }
                  ]
                }
              ]
            }
