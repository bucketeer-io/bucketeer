apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "batch-server.fullname" . }}-experiment-status-updater
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "batch-server.name" . }}
    chart: {{ template "batch-server.chart" . }}
    release: {{ template "batch-server.fullname" . }}
    heritage: {{ .Release.Service }}
spec:
  schedule: {{ .Values.cronjob.experimentStatusUpdaterSchedule }}
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
            - name: service-cert-secret
              secret:
                secretName: {{ template "service-cert-secret" . }}
            - name: service-token-secret
              secret:
                secretName: {{ template "service-token-secret" . }}
          containers:
            - name: experiment-status-updater
              image: curlimages/curl:8.1.2
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: service-cert-secret
                  mountPath: /usr/local/certs/service
                  readOnly: true
                - name: service-token-secret
                  mountPath: /usr/local/service-token
                  readOnly: true
              command:
                - /bin/sh
              args:
                - -c
                - |
                  echo "Start experiment-status-updater job."
                  ENDPOINT="https://web-gateway.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.cronjob.webGatewayPort }}/bucketeer.batch.BatchService/ExecuteBatchJob"
                  TOKEN=`cat /usr/local/service-token/token`
                  RES=`curl -X POST --cacert /usr/local/certs/service/tls.crt -d '{"job": "ExperimentStatusUpdater"}' -H "authorization: bearer ${TOKEN}" -H "Content-Type: application/json" -s -o /dev/null -w '%{http_code}\\n' ${ENDPOINT}`
                  echo "experiment-status-updater job result: ${RES}"
          restartPolicy: Never

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "batch-server.fullname" . }}-experiment-running-watcher
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "batch-server.name" . }}
    chart: {{ template "batch-server.chart" . }}
    release: {{ template "batch-server.fullname" . }}
    heritage: {{ .Release.Service }}
spec:
  schedule: {{ .Values.cronjob.experimentRunningWatcherSchedule }}
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
            - name: service-cert-secret
              secret:
                secretName: {{ template "service-cert-secret" . }}
            - name: service-token-secret
              secret:
                secretName: {{ template "service-token-secret" . }}
          containers:
            - name: experiment-running-watcher
              image: curlimages/curl:8.1.2
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: service-cert-secret
                  mountPath: /usr/local/certs/service
                  readOnly: true
                - name: service-token-secret
                  mountPath: /usr/local/service-token
                  readOnly: true
              command:
                - /bin/sh
              args:
                - -c
                - |
                  echo "Start experiment-running-watcher job."
                  ENDPOINT="https://web-gateway.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.cronjob.webGatewayPort }}/bucketeer.batch.BatchService/ExecuteBatchJob"
                  TOKEN=`cat /usr/local/service-token/token`
                  RES=`curl -X POST --cacert /usr/local/certs/service/tls.crt -d '{"job": "ExperimentRunningWatcher"}' -H "authorization: bearer ${TOKEN}" -H "Content-Type: application/json" -s -o /dev/null -w '%{http_code}\\n' ${ENDPOINT}`
                  echo "experiment-running-watcher job result: ${RES}"
          restartPolicy: Never

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "batch-server.fullname" . }}-feature-state-watcher
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "batch-server.name" . }}
    chart: {{ template "batch-server.chart" . }}
    release: {{ template "batch-server.fullname" . }}
    heritage: {{ .Release.Service }}
spec:
  schedule: {{ .Values.cronjob.featureStateWatcherSchedule }}
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
            - name: service-cert-secret
              secret:
                secretName: {{ template "service-cert-secret" . }}
            - name: service-token-secret
              secret:
                secretName: {{ template "service-token-secret" . }}
          containers:
            - name: feature-state-watcher
              image: curlimages/curl:8.1.2
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: service-cert-secret
                  mountPath: /usr/local/certs/service
                  readOnly: true
                - name: service-token-secret
                  mountPath: /usr/local/service-token
                  readOnly: true
              command:
                - /bin/sh
              args:
                - -c
                - |
                  echo "Start feature-state-watcher job."
                  ENDPOINT="https://web-gateway.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.cronjob.webGatewayPort }}/bucketeer.batch.BatchService/ExecuteBatchJob"
                  TOKEN=`cat /usr/local/service-token/token`
                  RES=`curl -X POST --cacert /usr/local/certs/service/tls.crt -d '{"job": "FeatureStateWatcher"}' -H "authorization: bearer ${TOKEN}" -H "Content-Type: application/json" -s -o /dev/null -w '%{http_code}\\n' ${ENDPOINT}`
                  echo "feature-state-watcher job result: ${RES}"
          restartPolicy: Never

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "batch-server.fullname" . }}-mau-count-watcher
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "batch-server.name" . }}
    chart: {{ template "batch-server.chart" . }}
    release: {{ template "batch-server.fullname" . }}
    heritage: {{ .Release.Service }}
spec:
  timeZone: {{ .Values.env.timezone }}
  schedule: {{ .Values.cronjob.mauCountWatcherSchedule }}
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
            - name: service-cert-secret
              secret:
                secretName: {{ template "service-cert-secret" . }}
            - name: service-token-secret
              secret:
                secretName: {{ template "service-token-secret" . }}
          containers:
            - name: mau-count-watcher
              image: curlimages/curl:8.1.2
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: service-cert-secret
                  mountPath: /usr/local/certs/service
                  readOnly: true
                - name: service-token-secret
                  mountPath: /usr/local/service-token
                  readOnly: true
              command:
                - /bin/sh
              args:
                - -c
                - |
                  echo "Start mau-count-watcher job."
                  ENDPOINT="https://web-gateway.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.cronjob.webGatewayPort }}/bucketeer.batch.BatchService/ExecuteBatchJob"
                  TOKEN=`cat /usr/local/service-token/token`
                  RES=`curl -X POST --cacert /usr/local/certs/service/tls.crt -d '{"job": "MauCountWatcher"}' -H "authorization: bearer ${TOKEN}" -H "Content-Type: application/json" -s -o /dev/null -w '%{http_code}\\n' ${ENDPOINT}`
                  echo "mau-count-watcher job result: ${RES}"
          restartPolicy: Never


---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "batch-server.fullname" . }}-ops-datetime-watcher
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "batch-server.name" . }}
    chart: {{ template "batch-server.chart" . }}
    release: {{ template "batch-server.fullname" . }}
    heritage: {{ .Release.Service }}
spec:
  schedule: {{ .Values.cronjob.opsDatetimeWatcherSchedule }}
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
            - name: service-cert-secret
              secret:
                secretName: {{ template "service-cert-secret" . }}
            - name: service-token-secret
              secret:
                secretName: {{ template "service-token-secret" . }}
          containers:
            - name: ops-datetime-watcher
              image: curlimages/curl:8.1.2
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: service-cert-secret
                  mountPath: /usr/local/certs/service
                  readOnly: true
                - name: service-token-secret
                  mountPath: /usr/local/service-token
                  readOnly: true
              command:
                - /bin/sh
              args:
                - -c
                - |
                  echo "Start ops-datetime-watcher job."
                  ENDPOINT="https://web-gateway.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.cronjob.webGatewayPort }}/bucketeer.batch.BatchService/ExecuteBatchJob"
                  TOKEN=`cat /usr/local/service-token/token`
                  RES=`curl -X POST --cacert /usr/local/certs/service/tls.crt -d '{"job": "DatetimeWatcher"}' -H "authorization: bearer ${TOKEN}" -H "Content-Type: application/json" -s -o /dev/null -w '%{http_code}\\n' ${ENDPOINT}`
                  echo "ops-datetime-watcher job result: ${RES}"
          restartPolicy: Never


---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "batch-server.fullname" . }}-ops-event-count-watcher
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "batch-server.name" . }}
    chart: {{ template "batch-server.chart" . }}
    release: {{ template "batch-server.fullname" . }}
    heritage: {{ .Release.Service }}
spec:
  schedule: {{ .Values.cronjob.opsEventCountWatcherSchedule }}
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
            - name: service-cert-secret
              secret:
                secretName: {{ template "service-cert-secret" . }}
            - name: service-token-secret
              secret:
                secretName: {{ template "service-token-secret" . }}
          containers:
            - name: ops-event-count-watcher
              image: curlimages/curl:8.1.2
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: service-cert-secret
                  mountPath: /usr/local/certs/service
                  readOnly: true
                - name: service-token-secret
                  mountPath: /usr/local/service-token
                  readOnly: true
              command:
                - /bin/sh
              args:
                - -c
                - |
                  echo "Start ops-event-count-watcher job."
                  ENDPOINT="https://web-gateway.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.cronjob.webGatewayPort }}/bucketeer.batch.BatchService/ExecuteBatchJob"
                  TOKEN=`cat /usr/local/service-token/token`
                  RES=`curl -X POST --cacert /usr/local/certs/service/tls.crt -d '{"job": "EventCountWatcher"}' -H "authorization: bearer ${TOKEN}" -H "Content-Type: application/json" -s -o /dev/null -w '%{http_code}\\n' ${ENDPOINT}`
                  echo "ops-event-count-watcher job result: ${RES}"
          restartPolicy: Never