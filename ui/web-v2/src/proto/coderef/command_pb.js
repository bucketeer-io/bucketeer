// source: proto/coderef/command.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var proto_coderef_code_reference_pb = require('../../proto/coderef/code_reference_pb.js');
goog.object.extend(proto, proto_coderef_code_reference_pb);
goog.exportSymbol(
  'proto.bucketeer.coderef.CreateCodeReferenceCommand',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.DeleteCodeReferenceCommand',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.UpdateCodeReferenceCommand',
  null,
  global
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.bucketeer.coderef.CreateCodeReferenceCommand.repeatedFields_,
    null
  );
};
goog.inherits(proto.bucketeer.coderef.CreateCodeReferenceCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.CreateCodeReferenceCommand.displayName =
    'proto.bucketeer.coderef.CreateCodeReferenceCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.bucketeer.coderef.UpdateCodeReferenceCommand.repeatedFields_,
    null
  );
};
goog.inherits(proto.bucketeer.coderef.UpdateCodeReferenceCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.UpdateCodeReferenceCommand.displayName =
    'proto.bucketeer.coderef.UpdateCodeReferenceCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.DeleteCodeReferenceCommand = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.coderef.DeleteCodeReferenceCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.DeleteCodeReferenceCommand.displayName =
    'proto.bucketeer.coderef.DeleteCodeReferenceCommand';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.repeatedFields_ = [6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.CreateCodeReferenceCommand.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.CreateCodeReferenceCommand} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.CreateCodeReferenceCommand.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        featureId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        filePath: jspb.Message.getFieldWithDefault(msg, 2, ''),
        lineNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
        codeSnippet: jspb.Message.getFieldWithDefault(msg, 4, ''),
        contentHash: jspb.Message.getFieldWithDefault(msg, 5, ''),
        aliasesList:
          (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
        repositoryName: jspb.Message.getFieldWithDefault(msg, 7, ''),
        repositoryOwner: jspb.Message.getFieldWithDefault(msg, 8, ''),
        repositoryType: jspb.Message.getFieldWithDefault(msg, 9, 0),
        repositoryBranch: jspb.Message.getFieldWithDefault(msg, 10, ''),
        commitHash: jspb.Message.getFieldWithDefault(msg, 11, ''),
        environmentId: jspb.Message.getFieldWithDefault(msg, 12, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.coderef.CreateCodeReferenceCommand();
    return proto.bucketeer.coderef.CreateCodeReferenceCommand.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.CreateCodeReferenceCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setFeatureId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setFilePath(value);
          break;
        case 3:
          var value = /** @type {number} */ (reader.readInt32());
          msg.setLineNumber(value);
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setCodeSnippet(value);
          break;
        case 5:
          var value = /** @type {string} */ (reader.readString());
          msg.setContentHash(value);
          break;
        case 6:
          var value = /** @type {string} */ (reader.readString());
          msg.addAliases(value);
          break;
        case 7:
          var value = /** @type {string} */ (reader.readString());
          msg.setRepositoryName(value);
          break;
        case 8:
          var value = /** @type {string} */ (reader.readString());
          msg.setRepositoryOwner(value);
          break;
        case 9:
          var value =
            /** @type {!proto.bucketeer.coderef.CodeReference.RepositoryType} */ (
              reader.readEnum()
            );
          msg.setRepositoryType(value);
          break;
        case 10:
          var value = /** @type {string} */ (reader.readString());
          msg.setRepositoryBranch(value);
          break;
        case 11:
          var value = /** @type {string} */ (reader.readString());
          msg.setCommitHash(value);
          break;
        case 12:
          var value = /** @type {string} */ (reader.readString());
          msg.setEnvironmentId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.CreateCodeReferenceCommand.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.CreateCodeReferenceCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getFeatureId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getFilePath();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getLineNumber();
    if (f !== 0) {
      writer.writeInt32(3, f);
    }
    f = message.getCodeSnippet();
    if (f.length > 0) {
      writer.writeString(4, f);
    }
    f = message.getContentHash();
    if (f.length > 0) {
      writer.writeString(5, f);
    }
    f = message.getAliasesList();
    if (f.length > 0) {
      writer.writeRepeatedString(6, f);
    }
    f = message.getRepositoryName();
    if (f.length > 0) {
      writer.writeString(7, f);
    }
    f = message.getRepositoryOwner();
    if (f.length > 0) {
      writer.writeString(8, f);
    }
    f = message.getRepositoryType();
    if (f !== 0.0) {
      writer.writeEnum(9, f);
    }
    f = message.getRepositoryBranch();
    if (f.length > 0) {
      writer.writeString(10, f);
    }
    f = message.getCommitHash();
    if (f.length > 0) {
      writer.writeString(11, f);
    }
    f = message.getEnvironmentId();
    if (f.length > 0) {
      writer.writeString(12, f);
    }
  };

/**
 * optional string feature_id = 1;
 * @return {string}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getFeatureId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setFeatureId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string file_path = 2;
 * @return {string}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getFilePath =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setFilePath =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional int32 line_number = 3;
 * @return {number}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getLineNumber =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
  };

/**
 * @param {number} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setLineNumber =
  function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
  };

/**
 * optional string code_snippet = 4;
 * @return {string}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getCodeSnippet =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 4, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setCodeSnippet =
  function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
  };

/**
 * optional string content_hash = 5;
 * @return {string}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getContentHash =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 5, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setContentHash =
  function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
  };

/**
 * repeated string aliases = 6;
 * @return {!Array<string>}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getAliasesList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 6)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setAliasesList =
  function (value) {
    return jspb.Message.setField(this, 6, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.addAliases =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.clearAliasesList =
  function () {
    return this.setAliasesList([]);
  };

/**
 * optional string repository_name = 7;
 * @return {string}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getRepositoryName =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 7, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setRepositoryName =
  function (value) {
    return jspb.Message.setProto3StringField(this, 7, value);
  };

/**
 * optional string repository_owner = 8;
 * @return {string}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getRepositoryOwner =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 8, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setRepositoryOwner =
  function (value) {
    return jspb.Message.setProto3StringField(this, 8, value);
  };

/**
 * optional CodeReference.RepositoryType repository_type = 9;
 * @return {!proto.bucketeer.coderef.CodeReference.RepositoryType}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getRepositoryType =
  function () {
    return /** @type {!proto.bucketeer.coderef.CodeReference.RepositoryType} */ (
      jspb.Message.getFieldWithDefault(this, 9, 0)
    );
  };

/**
 * @param {!proto.bucketeer.coderef.CodeReference.RepositoryType} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setRepositoryType =
  function (value) {
    return jspb.Message.setProto3EnumField(this, 9, value);
  };

/**
 * optional string repository_branch = 10;
 * @return {string}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getRepositoryBranch =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 10, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setRepositoryBranch =
  function (value) {
    return jspb.Message.setProto3StringField(this, 10, value);
  };

/**
 * optional string commit_hash = 11;
 * @return {string}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getCommitHash =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 11, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setCommitHash =
  function (value) {
    return jspb.Message.setProto3StringField(this, 11, value);
  };

/**
 * optional string environment_id = 12;
 * @return {string}
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.getEnvironmentId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 12, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceCommand.prototype.setEnvironmentId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 12, value);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.repeatedFields_ = [6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.UpdateCodeReferenceCommand.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.UpdateCodeReferenceCommand.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        filePath: jspb.Message.getFieldWithDefault(msg, 2, ''),
        lineNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
        codeSnippet: jspb.Message.getFieldWithDefault(msg, 4, ''),
        contentHash: jspb.Message.getFieldWithDefault(msg, 5, ''),
        aliasesList:
          (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
        repositoryBranch: jspb.Message.getFieldWithDefault(msg, 7, ''),
        commitHash: jspb.Message.getFieldWithDefault(msg, 8, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.coderef.UpdateCodeReferenceCommand();
    return proto.bucketeer.coderef.UpdateCodeReferenceCommand.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setFilePath(value);
          break;
        case 3:
          var value = /** @type {number} */ (reader.readInt32());
          msg.setLineNumber(value);
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setCodeSnippet(value);
          break;
        case 5:
          var value = /** @type {string} */ (reader.readString());
          msg.setContentHash(value);
          break;
        case 6:
          var value = /** @type {string} */ (reader.readString());
          msg.addAliases(value);
          break;
        case 7:
          var value = /** @type {string} */ (reader.readString());
          msg.setRepositoryBranch(value);
          break;
        case 8:
          var value = /** @type {string} */ (reader.readString());
          msg.setCommitHash(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.UpdateCodeReferenceCommand.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getFilePath();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getLineNumber();
    if (f !== 0) {
      writer.writeInt32(3, f);
    }
    f = message.getCodeSnippet();
    if (f.length > 0) {
      writer.writeString(4, f);
    }
    f = message.getContentHash();
    if (f.length > 0) {
      writer.writeString(5, f);
    }
    f = message.getAliasesList();
    if (f.length > 0) {
      writer.writeRepeatedString(6, f);
    }
    f = message.getRepositoryBranch();
    if (f.length > 0) {
      writer.writeString(7, f);
    }
    f = message.getCommitHash();
    if (f.length > 0) {
      writer.writeString(8, f);
    }
  };

/**
 * optional string id = 1;
 * @return {string}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.getId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.setId = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string file_path = 2;
 * @return {string}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.getFilePath =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.setFilePath =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional int32 line_number = 3;
 * @return {number}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.getLineNumber =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
  };

/**
 * @param {number} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.setLineNumber =
  function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
  };

/**
 * optional string code_snippet = 4;
 * @return {string}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.getCodeSnippet =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 4, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.setCodeSnippet =
  function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
  };

/**
 * optional string content_hash = 5;
 * @return {string}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.getContentHash =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 5, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.setContentHash =
  function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
  };

/**
 * repeated string aliases = 6;
 * @return {!Array<string>}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.getAliasesList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 6)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.setAliasesList =
  function (value) {
    return jspb.Message.setField(this, 6, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.addAliases =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.clearAliasesList =
  function () {
    return this.setAliasesList([]);
  };

/**
 * optional string repository_branch = 7;
 * @return {string}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.getRepositoryBranch =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 7, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.setRepositoryBranch =
  function (value) {
    return jspb.Message.setProto3StringField(this, 7, value);
  };

/**
 * optional string commit_hash = 8;
 * @return {string}
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.getCommitHash =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 8, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceCommand.prototype.setCommitHash =
  function (value) {
    return jspb.Message.setProto3StringField(this, 8, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.DeleteCodeReferenceCommand.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.DeleteCodeReferenceCommand.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.DeleteCodeReferenceCommand} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.DeleteCodeReferenceCommand.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        environmentId: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.DeleteCodeReferenceCommand}
 */
proto.bucketeer.coderef.DeleteCodeReferenceCommand.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.coderef.DeleteCodeReferenceCommand();
    return proto.bucketeer.coderef.DeleteCodeReferenceCommand.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.DeleteCodeReferenceCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.DeleteCodeReferenceCommand}
 */
proto.bucketeer.coderef.DeleteCodeReferenceCommand.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setEnvironmentId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.DeleteCodeReferenceCommand.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.DeleteCodeReferenceCommand.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.DeleteCodeReferenceCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.DeleteCodeReferenceCommand.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getEnvironmentId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional string id = 1;
 * @return {string}
 */
proto.bucketeer.coderef.DeleteCodeReferenceCommand.prototype.getId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.DeleteCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.DeleteCodeReferenceCommand.prototype.setId = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string environment_id = 2;
 * @return {string}
 */
proto.bucketeer.coderef.DeleteCodeReferenceCommand.prototype.getEnvironmentId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.DeleteCodeReferenceCommand} returns this
 */
proto.bucketeer.coderef.DeleteCodeReferenceCommand.prototype.setEnvironmentId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

goog.object.extend(exports, proto.bucketeer.coderef);
