// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -package=mock -destination=./mock/client.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"

	auth "github.com/bucketeer-io/bucketeer/proto/auth"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ExchangeBucketeerToken mocks base method.
func (m *MockClient) ExchangeBucketeerToken(ctx context.Context, in *auth.ExchangeBucketeerTokenRequest, opts ...grpc.CallOption) (*auth.ExchangeBucketeerTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExchangeBucketeerToken", varargs...)
	ret0, _ := ret[0].(*auth.ExchangeBucketeerTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeBucketeerToken indicates an expected call of ExchangeBucketeerToken.
func (mr *MockClientMockRecorder) ExchangeBucketeerToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeBucketeerToken", reflect.TypeOf((*MockClient)(nil).ExchangeBucketeerToken), varargs...)
}

// ExchangeToken mocks base method.
func (m *MockClient) ExchangeToken(ctx context.Context, in *auth.ExchangeTokenRequest, opts ...grpc.CallOption) (*auth.ExchangeTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExchangeToken", varargs...)
	ret0, _ := ret[0].(*auth.ExchangeTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeToken indicates an expected call of ExchangeToken.
func (mr *MockClientMockRecorder) ExchangeToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeToken", reflect.TypeOf((*MockClient)(nil).ExchangeToken), varargs...)
}

// GetAuthCodeURL mocks base method.
func (m *MockClient) GetAuthCodeURL(ctx context.Context, in *auth.GetAuthCodeURLRequest, opts ...grpc.CallOption) (*auth.GetAuthCodeURLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthCodeURL", varargs...)
	ret0, _ := ret[0].(*auth.GetAuthCodeURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthCodeURL indicates an expected call of GetAuthCodeURL.
func (mr *MockClientMockRecorder) GetAuthCodeURL(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthCodeURL", reflect.TypeOf((*MockClient)(nil).GetAuthCodeURL), varargs...)
}

// GetAuthenticationURL mocks base method.
func (m *MockClient) GetAuthenticationURL(ctx context.Context, in *auth.GetAuthenticationURLRequest, opts ...grpc.CallOption) (*auth.GetAuthenticationURLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthenticationURL", varargs...)
	ret0, _ := ret[0].(*auth.GetAuthenticationURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticationURL indicates an expected call of GetAuthenticationURL.
func (mr *MockClientMockRecorder) GetAuthenticationURL(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticationURL", reflect.TypeOf((*MockClient)(nil).GetAuthenticationURL), varargs...)
}

// RefreshBucketeerToken mocks base method.
func (m *MockClient) RefreshBucketeerToken(ctx context.Context, in *auth.RefreshBucketeerTokenRequest, opts ...grpc.CallOption) (*auth.RefreshBucketeerTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RefreshBucketeerToken", varargs...)
	ret0, _ := ret[0].(*auth.RefreshBucketeerTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshBucketeerToken indicates an expected call of RefreshBucketeerToken.
func (mr *MockClientMockRecorder) RefreshBucketeerToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshBucketeerToken", reflect.TypeOf((*MockClient)(nil).RefreshBucketeerToken), varargs...)
}

// RefreshToken mocks base method.
func (m *MockClient) RefreshToken(ctx context.Context, in *auth.RefreshTokenRequest, opts ...grpc.CallOption) (*auth.RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RefreshToken", varargs...)
	ret0, _ := ret[0].(*auth.RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockClientMockRecorder) RefreshToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockClient)(nil).RefreshToken), varargs...)
}
