// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	domain "github.com/bucketeer-io/bucketeer/pkg/feature/domain"
	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	feature "github.com/bucketeer-io/bucketeer/proto/feature"
)

// MockTagStorage is a mock of TagStorage interface.
type MockTagStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTagStorageMockRecorder
}

// MockTagStorageMockRecorder is the mock recorder for MockTagStorage.
type MockTagStorageMockRecorder struct {
	mock *MockTagStorage
}

// NewMockTagStorage creates a new mock instance.
func NewMockTagStorage(ctrl *gomock.Controller) *MockTagStorage {
	mock := &MockTagStorage{ctrl: ctrl}
	mock.recorder = &MockTagStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagStorage) EXPECT() *MockTagStorageMockRecorder {
	return m.recorder
}

// ListTags mocks base method.
func (m *MockTagStorage) ListTags(ctx context.Context, whereParts []mysql.WherePart, orders []*mysql.Order, limit, offset int) ([]*feature.Tag, int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, whereParts, orders, limit, offset)
	ret0, _ := ret[0].([]*feature.Tag)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListTags indicates an expected call of ListTags.
func (mr *MockTagStorageMockRecorder) ListTags(ctx, whereParts, orders, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockTagStorage)(nil).ListTags), ctx, whereParts, orders, limit, offset)
}

// UpsertTag mocks base method.
func (m *MockTagStorage) UpsertTag(ctx context.Context, tag *domain.Tag, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTag", ctx, tag, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTag indicates an expected call of UpsertTag.
func (mr *MockTagStorageMockRecorder) UpsertTag(ctx, tag, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTag", reflect.TypeOf((*MockTagStorage)(nil).UpsertTag), ctx, tag, environmentNamespace)
}
