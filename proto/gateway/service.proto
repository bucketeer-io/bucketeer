// Copyright 2024 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.gateway;
option go_package = "github.com/bucketeer-io/bucketeer/proto/gateway";

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/user/user.proto";
import "proto/feature/evaluation.proto";
import "proto/feature/feature.proto";
import "proto/feature/service.proto";
import "proto/feature/variation.proto";
import "proto/feature/prerequisite.proto";
import "proto/feature/rule.proto";
import "proto/feature/strategy.proto";
import "proto/feature/target.proto";
import "proto/feature/segment.proto";
import "proto/event/client/event.proto";

message PingRequest {}

message PingResponse {
  int64 time = 1;
}

message GetFeatureFlagsRequest {
  string tag = 1;
  string feature_flags_id = 2;
  int64 requested_at = 3;
  bucketeer.event.client.SourceId source_id = 4;
  string sdk_version = 5;
}

message GetFeatureFlagsResponse {
  string feature_flags_id = 1;
  repeated bucketeer.feature.Feature features = 2;
  repeated string archived_feature_flag_ids = 3;
  int64 requested_at = 4;
  bool force_update = 5;
}

message GetSegmentUsersRequest {
  repeated string segment_ids = 1;
  int64 requested_at = 2;
  bucketeer.event.client.SourceId source_id = 3;
  string sdk_version = 4;
}

message GetSegmentUsersResponse {
  repeated bucketeer.feature.SegmentUsers segment_users = 1;
  repeated string deleted_segment_ids = 2;
  int64 requested_at = 3;
  bool force_update = 4;
}

message GetEvaluationsRequest {
  message UserEvaluationCondition {
    int64 evaluated_at = 1;
    bool user_attributes_updated = 2;
  }
  string tag = 1;
  user.User user = 2;
  string user_evaluations_id = 3;
  string feature_id = 4 [deprecated = true];  // instead, use GetEvaluation API
  bucketeer.event.client.SourceId source_id = 5;
  UserEvaluationCondition user_evaluation_condition = 6;
  string sdk_version = 7;
}

message GetEvaluationsResponse {
  feature.UserEvaluations.State state = 1;
  feature.UserEvaluations evaluations = 2;
  string user_evaluations_id = 3;
}

message GetEvaluationRequest {
  string tag = 1;
  user.User user = 2;
  string feature_id = 3;
  bucketeer.event.client.SourceId source_id = 4;
  string sdk_version = 5;
}

message GetEvaluationResponse {
  feature.Evaluation evaluation = 1;
}

message RegisterEventsRequest {
  repeated bucketeer.event.client.Event events = 1;
  string sdk_version = 2;
  bucketeer.event.client.SourceId source_id = 3;
}

message RegisterEventsResponse {
  message Error {
    bool retriable = 1;
    string message = 2;
  }
  map<string, Error> errors = 1;
}

message TrackRequest {
  string apikey = 1;
  string userid = 2;
  string goalid = 3;
  string tag = 4;
  int64 timestamp = 5;
  double value = 6;
}

message TrackResponse {}

message CreateFeatureRequest {
  string id = 1;
  string name = 2;
  string description = 3;
  feature.Feature.VariationType variation_type = 4;
  repeated feature.Variation variations = 5;
  repeated string tags = 6;
  int32 on_variation_index = 7;
  int32 off_variation_index = 8;
}

message CreateFeatureResponse {
  feature.Feature feature = 1;
}

message GetFeatureRequest {
  string id = 1;
}

message GetFeatureResponse {
  feature.Feature feature = 1;
}

message ListFeaturesRequest {
  int64 page_size = 1;
  string cursor = 2;
  feature.ListFeaturesRequest.OrderBy order_by = 3;
  feature.ListFeaturesRequest.OrderDirection order_direction = 4;
}

message ListFeaturesResponse {
  repeated feature.Feature features = 1;
}

message UpdateFeatureRequest {
  string comment = 1;
  string id = 2;
  google.protobuf.StringValue name = 3;
  google.protobuf.StringValue description = 4;
  repeated string tags = 5;
  google.protobuf.BoolValue enabled = 6;
  google.protobuf.BoolValue archived = 7;
  repeated feature.Variation variations = 8;
  repeated feature.Prerequisite prerequisites = 9;
  repeated feature.Target targets = 10;
  repeated feature.Rule rules = 11;
  feature.Strategy default_strategy = 12;
  google.protobuf.StringValue off_variation = 13;
}

message UpdateFeatureResponse {
  feature.Feature feature = 1;
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: { title: "Bucketeer Gateway Service" version: "1.0" }
  schemes: HTTPS
  host: "ENDPOINT"
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "ApiKeyAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "authorization"
        description: "The API Key generated on the Admin Console."
      }
    }
  }
  security: {
    security_requirement: {
      key: "ApiKeyAuth"
      value: {}
    }
  }
  responses: {
    key: "400"
    value: {
      description: "Returned for bad requests that may have failed validation."
      schema: { json_schema: { ref: ".google.rpc.Status" } }
      examples: {
        key: "application/json"
        value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
      }
    }
  }
  responses: {
    key: "401"
    value: {
      description: "Request could not be authenticated (authentication required)."
      schema: { json_schema: { ref: ".google.rpc.Status" } }
      examples: {
        key: "application/json"
        value: '{ "code": 16, "message": "not authenticated", "details": [] }'
      }
    }
  }
  responses: {
    key: "403"
    value: {
      description: "Request does not have permission to access the resource."
      schema: { json_schema: { ref: ".google.rpc.Status" } }
      examples: {
        key: "application/json"
        value: '{ "code": 7, "message": "not authorized", "details": [] }'
      }
    }
  }
};

service Gateway {
  rpc GetEvaluations(GetEvaluationsRequest) returns (GetEvaluationsResponse) {
    option (google.api.http) = {
      post: "/get_evaluations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Evaluations",
      description: "Gets all the evaluations for a specific user. To call this API, you need a `CLIENT` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.get_evaluations",
      parameters: {
        headers: {
          name: "authorization"
          description: "The API Key generated on the Admin Console."
          type: STRING,
          required: true
        }
      }
    };
  }
  rpc GetEvaluation(GetEvaluationRequest) returns (GetEvaluationResponse) {
    option (google.api.http) = {
      post: "/get_evaluation"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Evaluation",
      description: "Gets a single evaluation for a specific user. To call this API, you need a `CLIENT` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.get_evaluation",
      parameters: {
        headers: {
          name: "authorization"
          description: "The API Key generated on the Admin Console."
          type: STRING,
          required: true
        }
      }
    };
  }
  rpc GetFeatureFlags(GetFeatureFlagsRequest)
      returns (GetFeatureFlagsResponse) {
    option (google.api.http) = {
      post: "/get_feature_flags"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Feature Flags",
      description: "Gets all the feature flag in an environment. To call this API, it needs `SERVER` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.get_feature_flags",
      parameters: {
        headers: {
          name: "authorization"
          description: "The API Key generated on the Admin Console."
          type: STRING,
          required: true
        }
      }
    };
  }
  rpc GetSegmentUsers(GetSegmentUsersRequest)
      returns (GetSegmentUsersResponse) {
    option (google.api.http) = {
      post: "/get_segment_users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Segment Users",
      description: "Gets all the segment users in an environment. To call this API, it needs `SERVER` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.get_segment_users",
      parameters: {
        headers: {
          name: "authorization"
          description: "The API Key generated on the Admin Console."
          type: STRING,
          required: true
        }
      }
    };
  }
  rpc RegisterEvents(RegisterEventsRequest) returns (RegisterEventsResponse) {
    option (google.api.http) = {
      post: "/register_events"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Register Events",
      description: "This API is for reporting Goal events. To call this API, it needs a `CLIENT` or `SERVER` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.register_events",
      parameters: {
        headers: {
          name: "authorization"
          description: "The API Key generated on the Admin Console."
          type: STRING,
          required: true
        }
      }
    };
  }
  rpc Track(TrackRequest) returns (TrackResponse) {
    option (google.api.http) = {
      get: "/track"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Track",
      description: "This API is an integration for Google Tab Manager to report Goal events. To call this API, you need a `CLIENT` API Key role.",
      tags: "Client and Server SDKs",
      operation_id: "api.gateway.track"
    };
  }
  rpc CreateFeature(CreateFeatureRequest) returns (CreateFeatureResponse) {
    option (google.api.http) = {
      post: "/v1/features"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create a new Feature Flag. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Feature Flags",
      operation_id: "api.gateway.v1.features.create",
      parameters: {
        headers: {
          name: "authorization"
          description: "The API Key generated on the Admin Console."
          type: STRING,
          required: true
        }
      }
    };
  }
  rpc GetFeature(GetFeatureRequest) returns (GetFeatureResponse) {
    option (google.api.http) = {
      get: "/v1/features/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get",
      description: "Get a Feature Flag. To call this API, you need a `READ` API Key role.",
      tags: "Feature Flags",
      operation_id: "api.gateway.v1.features.get",
      parameters: {
        headers: {
          name: "authorization"
          description: "The API Key generated on the Admin Console."
          type: STRING,
          required: true
        }
      }
    };
  }
  rpc ListFeatures(ListFeaturesRequest) returns (ListFeaturesResponse) {
    option (google.api.http) = {
      get: "/v1/features"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "List Feature Flags. To call this API, you need a `READ` API Key role.",
      tags: "Feature Flags",
      operation_id: "api.gateway.v1.features.list",
      parameters: {
        headers: {
          name: "authorization"
          description: "The API Key generated on the Admin Console."
          type: STRING,
          required: true
        }
      }
    };
  }
  rpc UpdateFeature(UpdateFeatureRequest) returns (UpdateFeatureResponse) {
    option (google.api.http) = {
      patch: "/v1/features/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update",
      description: "Update a Feature Flag. To call this API, you need a `WRITE` or `ADMIN` API Key role.",
      tags: "Feature Flags",
      operation_id: "api.gateway.v1.features.update",
      parameters: {
        headers: {
          name: "authorization"
          description: "The API Key generated on the Admin Console."
          type: STRING,
          required: true
        }
      }
    };
  }
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/ping"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Ping",
      description: "Ping the server to check its availability.",
      tags: "Utility",
      operation_id: "api.gateway.ping",
      parameters: {
        headers: {
          name: "authorization"
          description: "The API Key generated on the Admin Console."
          type: STRING,
          required: true
        }
      },
      security: {},
    };
  };
}
