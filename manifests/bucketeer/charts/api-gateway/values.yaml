image:
  repository: ghcr.io/bucketeer-io/bucketeer-gateway
  pullPolicy: IfNotPresent
fullnameOverride: "api-gateway"
namespace: default
env:
  project:
  goalTopic:
  evaluationTopic:
  userTopic:
  metricsTopic:
  publishNumGoroutines: 200
  publishTimeout: 1m
  redis:
    serverName:
    poolMaxIdle: 25
    poolMaxActive: 25
    addr:
  oldestEventTimestamp:
  furthestEventTimestamp:
  logLevel: info
  port: 9090
  metricsPort: 9002
  featureService: localhost:9001
  accountService: localhost:9001
  traceSamplingProbability: 0.0001
affinity: {}
nodeSelector: {}
pdb:
  enabled:
  maxUnavailable: 20%
hpa:
  enabled:
  minReplicas:
  maxReplicas:
  metrics:
    cpu:
      targetAverageUtilization:
tls:
  bucketeerJP:
    secrets:
  service:
    secret:
    cert:
    key:
serviceToken:
  secret:
  token:
envoy:
  image:
    repository: ghcr.io/bucketeer-io/bucketeer-envoy
    tag: v1.26.2
    pullPolicy: IfNotPresent
  descriptor: ""
  config:
  port: 9000
  adminPort: 8001
  resources: {}
service:
  externalPort: 9000
ingress:
  host:
  staticIPName:
health:
  livenessProbe:
    initialDelaySeconds: 5
    periodSeconds: 3
    failureThreshold: 5
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 3
    failureThreshold: 2
resources: {}
serviceAccount:
  annotations: {}
