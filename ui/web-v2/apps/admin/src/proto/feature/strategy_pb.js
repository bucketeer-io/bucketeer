// source: proto/feature/strategy.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.bucketeer.feature.FixedStrategy', null, global);
goog.exportSymbol('proto.bucketeer.feature.RolloutStrategy', null, global);
goog.exportSymbol('proto.bucketeer.feature.RolloutStrategy.Variation', null, global);
goog.exportSymbol('proto.bucketeer.feature.Strategy', null, global);
goog.exportSymbol('proto.bucketeer.feature.Strategy.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.feature.FixedStrategy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.feature.FixedStrategy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.feature.FixedStrategy.displayName = 'proto.bucketeer.feature.FixedStrategy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.feature.RolloutStrategy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.feature.RolloutStrategy.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.feature.RolloutStrategy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.feature.RolloutStrategy.displayName = 'proto.bucketeer.feature.RolloutStrategy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.feature.RolloutStrategy.Variation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.feature.RolloutStrategy.Variation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.feature.RolloutStrategy.Variation.displayName = 'proto.bucketeer.feature.RolloutStrategy.Variation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.feature.Strategy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.feature.Strategy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.feature.Strategy.displayName = 'proto.bucketeer.feature.Strategy';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.feature.FixedStrategy.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.feature.FixedStrategy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.feature.FixedStrategy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.feature.FixedStrategy.toObject = function(includeInstance, msg) {
  var f, obj = {
    variation: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.feature.FixedStrategy}
 */
proto.bucketeer.feature.FixedStrategy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.feature.FixedStrategy;
  return proto.bucketeer.feature.FixedStrategy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.feature.FixedStrategy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.feature.FixedStrategy}
 */
proto.bucketeer.feature.FixedStrategy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.feature.FixedStrategy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.feature.FixedStrategy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.feature.FixedStrategy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.feature.FixedStrategy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string variation = 1;
 * @return {string}
 */
proto.bucketeer.feature.FixedStrategy.prototype.getVariation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.feature.FixedStrategy} returns this
 */
proto.bucketeer.feature.FixedStrategy.prototype.setVariation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.feature.RolloutStrategy.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.feature.RolloutStrategy.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.feature.RolloutStrategy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.feature.RolloutStrategy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.feature.RolloutStrategy.toObject = function(includeInstance, msg) {
  var f, obj = {
    variationsList: jspb.Message.toObjectList(msg.getVariationsList(),
    proto.bucketeer.feature.RolloutStrategy.Variation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.feature.RolloutStrategy}
 */
proto.bucketeer.feature.RolloutStrategy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.feature.RolloutStrategy;
  return proto.bucketeer.feature.RolloutStrategy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.feature.RolloutStrategy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.feature.RolloutStrategy}
 */
proto.bucketeer.feature.RolloutStrategy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bucketeer.feature.RolloutStrategy.Variation;
      reader.readMessage(value,proto.bucketeer.feature.RolloutStrategy.Variation.deserializeBinaryFromReader);
      msg.addVariations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.feature.RolloutStrategy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.feature.RolloutStrategy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.feature.RolloutStrategy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.feature.RolloutStrategy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bucketeer.feature.RolloutStrategy.Variation.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.feature.RolloutStrategy.Variation.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.feature.RolloutStrategy.Variation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.feature.RolloutStrategy.Variation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.feature.RolloutStrategy.Variation.toObject = function(includeInstance, msg) {
  var f, obj = {
    variation: jspb.Message.getFieldWithDefault(msg, 1, ""),
    weight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.feature.RolloutStrategy.Variation}
 */
proto.bucketeer.feature.RolloutStrategy.Variation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.feature.RolloutStrategy.Variation;
  return proto.bucketeer.feature.RolloutStrategy.Variation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.feature.RolloutStrategy.Variation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.feature.RolloutStrategy.Variation}
 */
proto.bucketeer.feature.RolloutStrategy.Variation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.feature.RolloutStrategy.Variation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.feature.RolloutStrategy.Variation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.feature.RolloutStrategy.Variation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.feature.RolloutStrategy.Variation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string variation = 1;
 * @return {string}
 */
proto.bucketeer.feature.RolloutStrategy.Variation.prototype.getVariation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.feature.RolloutStrategy.Variation} returns this
 */
proto.bucketeer.feature.RolloutStrategy.Variation.prototype.setVariation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 weight = 2;
 * @return {number}
 */
proto.bucketeer.feature.RolloutStrategy.Variation.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.feature.RolloutStrategy.Variation} returns this
 */
proto.bucketeer.feature.RolloutStrategy.Variation.prototype.setWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Variation variations = 1;
 * @return {!Array<!proto.bucketeer.feature.RolloutStrategy.Variation>}
 */
proto.bucketeer.feature.RolloutStrategy.prototype.getVariationsList = function() {
  return /** @type{!Array<!proto.bucketeer.feature.RolloutStrategy.Variation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bucketeer.feature.RolloutStrategy.Variation, 1));
};


/**
 * @param {!Array<!proto.bucketeer.feature.RolloutStrategy.Variation>} value
 * @return {!proto.bucketeer.feature.RolloutStrategy} returns this
*/
proto.bucketeer.feature.RolloutStrategy.prototype.setVariationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bucketeer.feature.RolloutStrategy.Variation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.feature.RolloutStrategy.Variation}
 */
proto.bucketeer.feature.RolloutStrategy.prototype.addVariations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bucketeer.feature.RolloutStrategy.Variation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.feature.RolloutStrategy} returns this
 */
proto.bucketeer.feature.RolloutStrategy.prototype.clearVariationsList = function() {
  return this.setVariationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.feature.Strategy.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.feature.Strategy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.feature.Strategy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.feature.Strategy.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fixedStrategy: (f = msg.getFixedStrategy()) && proto.bucketeer.feature.FixedStrategy.toObject(includeInstance, f),
    rolloutStrategy: (f = msg.getRolloutStrategy()) && proto.bucketeer.feature.RolloutStrategy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.feature.Strategy}
 */
proto.bucketeer.feature.Strategy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.feature.Strategy;
  return proto.bucketeer.feature.Strategy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.feature.Strategy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.feature.Strategy}
 */
proto.bucketeer.feature.Strategy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bucketeer.feature.Strategy.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.bucketeer.feature.FixedStrategy;
      reader.readMessage(value,proto.bucketeer.feature.FixedStrategy.deserializeBinaryFromReader);
      msg.setFixedStrategy(value);
      break;
    case 3:
      var value = new proto.bucketeer.feature.RolloutStrategy;
      reader.readMessage(value,proto.bucketeer.feature.RolloutStrategy.deserializeBinaryFromReader);
      msg.setRolloutStrategy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.feature.Strategy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.feature.Strategy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.feature.Strategy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.feature.Strategy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFixedStrategy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bucketeer.feature.FixedStrategy.serializeBinaryToWriter
    );
  }
  f = message.getRolloutStrategy();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bucketeer.feature.RolloutStrategy.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.bucketeer.feature.Strategy.Type = {
  FIXED: 0,
  ROLLOUT: 1
};

/**
 * optional Type type = 1;
 * @return {!proto.bucketeer.feature.Strategy.Type}
 */
proto.bucketeer.feature.Strategy.prototype.getType = function() {
  return /** @type {!proto.bucketeer.feature.Strategy.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bucketeer.feature.Strategy.Type} value
 * @return {!proto.bucketeer.feature.Strategy} returns this
 */
proto.bucketeer.feature.Strategy.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FixedStrategy fixed_strategy = 2;
 * @return {?proto.bucketeer.feature.FixedStrategy}
 */
proto.bucketeer.feature.Strategy.prototype.getFixedStrategy = function() {
  return /** @type{?proto.bucketeer.feature.FixedStrategy} */ (
    jspb.Message.getWrapperField(this, proto.bucketeer.feature.FixedStrategy, 2));
};


/**
 * @param {?proto.bucketeer.feature.FixedStrategy|undefined} value
 * @return {!proto.bucketeer.feature.Strategy} returns this
*/
proto.bucketeer.feature.Strategy.prototype.setFixedStrategy = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.feature.Strategy} returns this
 */
proto.bucketeer.feature.Strategy.prototype.clearFixedStrategy = function() {
  return this.setFixedStrategy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.feature.Strategy.prototype.hasFixedStrategy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RolloutStrategy rollout_strategy = 3;
 * @return {?proto.bucketeer.feature.RolloutStrategy}
 */
proto.bucketeer.feature.Strategy.prototype.getRolloutStrategy = function() {
  return /** @type{?proto.bucketeer.feature.RolloutStrategy} */ (
    jspb.Message.getWrapperField(this, proto.bucketeer.feature.RolloutStrategy, 3));
};


/**
 * @param {?proto.bucketeer.feature.RolloutStrategy|undefined} value
 * @return {!proto.bucketeer.feature.Strategy} returns this
*/
proto.bucketeer.feature.Strategy.prototype.setRolloutStrategy = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.feature.Strategy} returns this
 */
proto.bucketeer.feature.Strategy.prototype.clearRolloutStrategy = function() {
  return this.setRolloutStrategy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.feature.Strategy.prototype.hasRolloutStrategy = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.bucketeer.feature);
