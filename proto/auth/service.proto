// Copyright 2025 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.auth;
option go_package = "github.com/bucketeer-io/bucketeer/v2/proto/auth";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/auth/token.proto";

enum AuthType {
  AUTH_TYPE_UNSPECIFIED = 0;
  AUTH_TYPE_USER_PASSWORD = 1 [deprecated = true];
  AUTH_TYPE_GOOGLE = 2;
  AUTH_TYPE_GITHUB = 3;
}

message GetAuthenticationURLRequest {
  string state = 1;
  string redirect_url = 2;
  AuthType type = 3;
}

message GetAuthenticationURLResponse {
  string url = 1;
}

message ExchangeTokenRequest {
  string code = 1;
  string redirect_url = 2;
  AuthType type = 3;
}

message ExchangeTokenResponse {
  Token token = 1;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  Token token = 1;
}

message SignInRequest {
  string email = 1;
  string password = 2;
}

message SignInResponse {
  Token token = 1;
}

message SwitchOrganizationRequest {
  string access_token = 1;
  string organization_id = 2;
}

message SwitchOrganizationResponse {
  Token token = 1;
}

message GetDemoSiteStatusRequest {}

message GetDemoSiteStatusResponse {
  bool is_demo_site_enabled = 1;
}

// Password Management Messages
message CreatePasswordRequest {
  string email = 1;
  string password = 2;
}

message CreatePasswordResponse {}

message UpdatePasswordRequest {
  string current_password = 1;
  string new_password = 2;
}

message UpdatePasswordResponse {}

message InitiatePasswordResetRequest {
  string email = 1;
}

message InitiatePasswordResetResponse {
  string message = 1;
}

message ResetPasswordRequest {
  string reset_token = 1;
  string new_password = 2;
}

message ResetPasswordResponse {}

message ValidatePasswordResetTokenRequest {
  string reset_token = 1;
}

message ValidatePasswordResetTokenResponse {
  bool is_valid = 1;
  string email = 2;
}

// Password Setup Messages
message InitiatePasswordSetupRequest {
  string email = 1;
}

message InitiatePasswordSetupResponse {
  string message = 1;
}

message SetupPasswordRequest {
  string setup_token = 1;
  string new_password = 2;
}

message SetupPasswordResponse {}

message ValidatePasswordSetupTokenRequest {
  string setup_token = 1;
}

message ValidatePasswordSetupTokenResponse {
  bool is_valid = 1;
  string email = 2;
}

service AuthService {
  rpc ExchangeToken(ExchangeTokenRequest) returns (ExchangeTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/exchange_token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Exchange Token",
      description: "Exchange the token from the OAuth provider to the Bucketeer token.\nCurrently, we only support Google.",
      tags: "Authentication",
      operation_id: "web.v1.auth.exchange_token",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc GetAuthenticationURL(GetAuthenticationURLRequest)
      returns (GetAuthenticationURLResponse) {
    option (google.api.http) = {
      post: "/v1/auth/authentication_url"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Authentication URL",
      description: "The OAuth credentials must be configured on the server to call this API. It will return the Authentication URL.\nCurrently, we only support Google.",
      tags: "Authentication",
      operation_id: "web.v1.auth.authentication_url",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
    };
  }

  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/refresh_token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Refresh Token",
      description: "Refresh the Bucketeer token maintained by the web console.",
      tags: "Authentication",
      operation_id: "web.v1.auth.refresh_token",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc SignIn(SignInRequest) returns (SignInResponse) {
    option (google.api.http) = {
      post: "/v1/auth/signin"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Sign In",
      description: "Sign in on the web console using an email and password.",
      tags: "Authentication",
      operation_id: "web.v1.auth.signin",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }

  rpc SwitchOrganization(SwitchOrganizationRequest)
      returns (SwitchOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/auth/switch_organization"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Switch Organization",
      description: "Switch to a different organization.",
      tags: "Authentication",
      operation_id: "web.v1.auth.switch_organization",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request could not be authorized (permission denied)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "permission denied", "details": [] }'
          }
        }
      }
    };
  }
  rpc GetDemoSiteStatus(GetDemoSiteStatusRequest)
      returns (GetDemoSiteStatusResponse) {
    option (google.api.http) = {
      get: "/v1/demo_site_status"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Demo Site Status",
      description: "Get the status of the demo site.",
      tags: "Authentication",
      operation_id: "web.v1.auth.get_demo_site_status",
    };
  }

  // Password Management APIs
  rpc CreatePassword(CreatePasswordRequest) returns (CreatePasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/password"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Password",
      description: "Create a password for an existing account.",
      tags: "Password Management",
      operation_id: "web.v1.auth.create_password",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "409"
        value: {
          description: "Returned when password already exists for the account."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 6, "message": "password already exists", "details": [] }'
          }
        }
      }
    };
  }

  rpc UpdatePassword(UpdatePasswordRequest) returns (UpdatePasswordResponse) {
    option (google.api.http) = {
      put: "/v1/auth/password"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Password",
      description: "Update the password for the authenticated user.",
      tags: "Password Management",
      operation_id: "web.v1.auth.update_password",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }

  rpc InitiatePasswordReset(InitiatePasswordResetRequest)
      returns (InitiatePasswordResetResponse) {
    option (google.api.http) = {
      post: "/v1/auth/password/reset/initiate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Initiate Password Reset",
      description: "Initiate password reset process by sending a reset email.",
      tags: "Password Management",
      operation_id: "web.v1.auth.initiate_password_reset",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
    };
  }

  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/password/reset"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Reset Password",
      description: "Reset password using a valid reset token.",
      tags: "Password Management",
      operation_id: "web.v1.auth.reset_password",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
    };
  }

  rpc ValidatePasswordResetToken(ValidatePasswordResetTokenRequest)
      returns (ValidatePasswordResetTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/password/reset/validate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Validate Password Reset Token",
      description: "Validate if a password reset token is valid and not expired.",
      tags: "Password Management",
      operation_id: "web.v1.auth.validate_password_reset_token",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
    };
  }

  // Password Setup APIs
  rpc InitiatePasswordSetup(InitiatePasswordSetupRequest)
      returns (InitiatePasswordSetupResponse) {
    option (google.api.http) = {
      post: "/v1/auth/password/setup/initiate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Initiate Password Setup",
      description: "Initiate password setup process by sending a setup email to users without passwords.",
      tags: "Password Management",
      operation_id: "web.v1.auth.initiate_password_setup",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
    };
  }

  rpc SetupPassword(SetupPasswordRequest) returns (SetupPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/password/setup"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Setup Password",
      description: "Complete password setup using a valid setup token.",
      tags: "Password Management",
      operation_id: "web.v1.auth.setup_password",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
    };
  }

  rpc ValidatePasswordSetupToken(ValidatePasswordSetupTokenRequest)
      returns (ValidatePasswordSetupTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/password/setup/validate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Validate Password Setup Token",
      description: "Validate if a password setup token is valid and not expired.",
      tags: "Password Management",
      operation_id: "web.v1.auth.validate_password_setup_token",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
    };
  }
}
