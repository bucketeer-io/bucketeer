{{- if eq (include "batch.deploy" .) "true" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "batch-server.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "batch-server.name" . }}
    chart: {{ template "batch-server.chart" . }}
    release: {{ template "batch-server.fullname" . }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "batch-server.name" . }}
      release: {{ template "batch-server.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "batch-server.name" . }}
        release: {{ template "batch-server.fullname" . }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/envoy-configmap.yaml") . | sha256sum }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 30 }}
      {{- with .Values.global.image.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      volumes:
        - name: envoy-config
          configMap:
            name: {{ template "batch-server.fullname" . }}-envoy-config
        - name: service-cert-secret
          secret:
            secretName: {{ template "service-cert-secret" . }}
        - name: service-token-secret
          secret:
            secretName: {{ template "service-token-secret" . }}
        - name: oauth-key-secret
          secret:
            secretName: {{ template "oauth-key-secret" . }}
      {{- if .Values.serviceAccount.annotations }}
      serviceAccountName: {{ template "batch-server.fullname" . }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - server
          {{- range .Values.env.nonPersistentChildRedis.addresses }}
            - --non-persistent-child-redis-addresses={{ . }}
          {{- end }}
          env:
            - name: BIGQUERY_WRITER_EMULATOR_HOST
              value: "{{.Values.env.bigqueryWriterEmulatorHost}}"
            - name: BUCKETEER_BATCH_PROJECT
              value: "{{ .Values.global.pubsub.project }}"
            - name: BUCKETEER_BATCH_PROFILE
              value: "{{.Values.env.profile}}"
            - name: BUCKETEER_BATCH_GCP_TRACE_ENABLED
              value: "{{.Values.env.gcpEnabled}}"
            - name: PUBSUB_EMULATOR_HOST
              value: "{{ .Values.global.pubsub.emulatorHost }}"
            - name: BUCKETEER_BATCH_PUBSUB_TYPE
              value: "{{ .Values.global.pubsub.type }}"
            - name: BUCKETEER_BATCH_PUBSUB_REDIS_SERVER_NAME
              value: "{{ .Values.global.pubsub.redis.serverName }}"
            - name: BUCKETEER_BATCH_PUBSUB_REDIS_ADDR
              value: "{{ .Values.global.pubsub.redis.addr }}"
            - name: BUCKETEER_BATCH_PUBSUB_REDIS_POOL_SIZE
              value: "{{ .Values.global.pubsub.redis.poolSize }}"
            - name: BUCKETEER_BATCH_PUBSUB_REDIS_MIN_IDLE
              value: "{{ .Values.global.pubsub.redis.minIdle }}"
            - name: BUCKETEER_BATCH_ACCOUNT_SERVICE
              value: "{{ .Values.env.accountService }}"
            - name: BUCKETEER_BATCH_NOTIFICATION_SERVICE
              value: "{{ .Values.env.notificationService }}"
            - name: BUCKETEER_BATCH_ENVIRONMENT_SERVICE
              value: "{{ .Values.env.environmentService }}"
            - name: BUCKETEER_BATCH_PUSH_SERVICE
              value: "{{ .Values.env.pushService }}"
            - name: BUCKETEER_BATCH_AUTO_OPS_SERVICE
              value: "{{ .Values.env.autoOpsService }}"
            - name: BUCKETEER_BATCH_EXPERIMENT_SERVICE
              value: "{{ .Values.env.experimentService }}"
            - name: BUCKETEER_BATCH_EVENT_COUNTER_SERVICE
              value: "{{ .Values.env.eventCounterService }}"
            - name: BUCKETEER_BATCH_FEATURE_SERVICE
              value: "{{ .Values.env.featureService }}"
            - name: BUCKETEER_BATCH_EXPERIMENT_CALCULATOR_SERVICE
              value: "{{ .Values.env.experimentCalculatorService }}"
            - name: BUCKETEER_BATCH_BATCH_SERVICE
              value: "{{ .Values.env.batchService }}"
            - name: BUCKETEER_BATCH_EVENT_SCHEDULE_COUNT_WATCHER
              value: "{{ .Values.env.scheduleCountWatcher }}"
            - name: BUCKETEER_BATCH_EVENT_SCHEDULE_DATETIME_WATCHER
              value: "{{ .Values.env.scheduleDatetimeWatcher }}"
            - name: BUCKETEER_BATCH_EVENT_SCHEDULE_PROGRESSIVE_ROLLOUT_WATCHER
              value: "{{ .Values.env.scheduleProgressiveRolloutWatcher }}"
            - name: BUCKETEER_BATCH_EVENT_REFRESH_INTERVAL
              value: "{{ .Values.env.refreshInterval }}"
            - name: BUCKETEER_BATCH_MYSQL_USER
              value: "{{ .Values.env.mysqlUser }}"
            - name: BUCKETEER_BATCH_MYSQL_PASS
              value: "{{ .Values.env.mysqlPass }}"
            - name: BUCKETEER_BATCH_MYSQL_HOST
              value: "{{ .Values.env.mysqlHost }}"
            - name: BUCKETEER_BATCH_MYSQL_PORT
              value: "{{ .Values.env.mysqlPort }}"
            - name: BUCKETEER_BATCH_MYSQL_DB_NAME
              value: "{{ .Values.env.mysqlDbName }}"
            - name: BUCKETEER_BATCH_MYSQL_DB_OPEN_CONNS
              value: "{{ .Values.env.mysqlDbOpenConns }}"
            - name: BUCKETEER_BATCH_WEB_URL
              value: "{{ .Values.env.webURL }}"
            - name: BUCKETEER_BATCH_LOG_LEVEL
              value: "{{ .Values.env.logLevel }}"
            - name: BUCKETEER_BATCH_ENABLE_PPROF
              value: "{{ .Values.env.enablePprof }}"
            - name: BUCKETEER_BATCH_PPROF_ADDR
              value: "{{ .Values.env.pprofAddr }}"
            - name: BUCKETEER_BATCH_REFRESH_INTERVAL
              value: "{{ .Values.env.refreshInterval }}"
            - name: BUCKETEER_BATCH_GRPC_GATEWAY_PORT
              value: "{{ .Values.env.grpcGatewayPort }}"
            - name: BUCKETEER_BATCH_PORT
              value: "{{ .Values.env.port }}"
            - name: BUCKETEER_BATCH_METRICS_PORT
              value: "{{ .Values.env.metricsPort }}"
            - name: BUCKETEER_BATCH_SERVICE_TOKEN
              value: /usr/local/service-token/token
            - name: BUCKETEER_BATCH_CERT
              value: /usr/local/certs/service/tls.crt
            - name: BUCKETEER_BATCH_KEY
              value: /usr/local/certs/service/tls.key
            - name: BUCKETEER_BATCH_OAUTH_PUBLIC_KEY
              value: /usr/local/oauth-key/public.pem
            - name: BUCKETEER_BATCH_OAUTH_ISSUER
              value: "{{ .Values.oauth.issuer }}"
            - name: BUCKETEER_BATCH_OAUTH_AUDIENCE
              value: "{{ .Values.oauth.audience }}"
            - name: BUCKETEER_BATCH_OAUTH_CLIENT_ID # TODO: remove after releasing
              value: "{{ .Values.oauth.clientId }}"
            - name: BUCKETEER_BATCH_TIMEZONE
              value: "{{ .Values.env.timezone }}"
            - name: BUCKETEER_BATCH_PERSISTENT_REDIS_SERVER_NAME
              value: "{{ .Values.env.persistentRedis.serverName }}"
            - name: BUCKETEER_BATCH_PERSISTENT_REDIS_ADDR
              value: "{{ .Values.env.persistentRedis.addr }}"
            - name: BUCKETEER_BATCH_PERSISTENT_REDIS_POOL_MAX_IDLE
              value: "{{ .Values.env.persistentRedis.poolMaxIdle }}"
            - name: BUCKETEER_BATCH_PERSISTENT_REDIS_POOL_MAX_ACTIVE
              value: "{{ .Values.env.persistentRedis.poolMaxActive }}"
            - name: BUCKETEER_BATCH_NON_PERSISTENT_REDIS_SERVER_NAME
              value: "{{ .Values.env.nonPersistentRedis.serverName }}"
            - name: BUCKETEER_BATCH_NON_PERSISTENT_REDIS_ADDR
              value: "{{ .Values.env.nonPersistentRedis.addr }}"
            - name: BUCKETEER_BATCH_NON_PERSISTENT_REDIS_POOL_MAX_IDLE
              value: "{{ .Values.env.nonPersistentRedis.poolMaxIdle }}"
            - name: BUCKETEER_BATCH_NON_PERSISTENT_REDIS_POOL_MAX_ACTIVE
              value: "{{ .Values.env.nonPersistentRedis.poolMaxActive }}"
            - name: BUCKETEER_BATCH_EXPERIMENT_LOCK_TTL
              value: "{{ .Values.env.experimentLockTTL }}"
            - name: BUCKETEER_BATCH_STAN_MODEL_ID
              value: "{{ .Values.httpstan.modelId }}"

          volumeMounts:
            - name: service-cert-secret
              mountPath: /usr/local/certs/service
              readOnly: true
            - name: service-token-secret
              mountPath: /usr/local/service-token
              readOnly: true
            - name: oauth-key-secret
              mountPath: /usr/local/oauth-key
              readOnly: true
          ports:
            - name: service
              containerPort: {{ .Values.env.port }}
            - name: metrics
              containerPort: {{ .Values.env.metricsPort }}
          startupProbe:
            periodSeconds: {{ .Values.health.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.startupProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.startupProbe.timeoutSeconds }}
            httpGet:
              path: /ready
              port: service
              scheme: HTTPS
          livenessProbe:
            initialDelaySeconds: {{ .Values.health.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.livenessProbe.timeoutSeconds }}
            httpGet:
              path: /health
              port: service
              scheme: HTTPS
          readinessProbe:
            initialDelaySeconds: {{ .Values.health.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.readinessProbe.timeoutSeconds }}
            httpGet:
              path: /ready
              port: service
              scheme: HTTPS
          resources:
{{ toYaml .Values.resources | indent 12 }}
        - name: envoy
          image: "{{ .Values.envoy.image.repository }}:{{ .Values.envoy.image.tag }}"
          imagePullPolicy: {{ .Values.envoy.image.pullPolicy }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    admin_port={{ .Values.envoy.adminPort }}
                    max_wait=45
                    propagation_delay=15

                    sleep "$propagation_delay"

                    # Wait for active requests to drain
                    for i in $(seq 1 "$max_wait"); do
                      # Fetch stats and check if request succeeded
                      stats=$(wget -q -T 1 -O- "http://127.0.0.1:${admin_port}/stats" 2>/dev/null)
                      if [ $? -ne 0 ] || [ -z "$stats" ]; then
                        echo "Check $i/$max_wait: Failed to fetch stats, retrying..."
                        sleep 1
                        continue
                      fi

                      # Extract active requests metric
                      active=$(echo "$stats" | grep -E '^http\.ingress_http\.downstream_rq_active:' | awk '{print $2}')
                      if [ -z "$active" ]; then
                        echo "Check $i/$max_wait: Metric not found, retrying..."
                        sleep 1
                        continue
                      fi

                      echo "Check $i/$max_wait: Active requests: $active"
                      [ "$active" -eq 0 ] && echo "No active requests, exiting gracefully" && break
                      sleep 1
                    done

                    if [ -n "$active" ] && [ "$active" -eq 0 ]; then
                      echo "Graceful shutdown completed successfully"
                    else
                      echo "Warning: Timed out after ${max_wait}s - active=${active:-unknown}"
                    fi
                    exit 0
          command: ["envoy"]
          args:
            - "-c"
            - "/usr/local/conf/config.yaml"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: envoy-config
              mountPath: /usr/local/conf/
              readOnly: true
            - name: service-cert-secret
              mountPath: /usr/local/certs/service
              readOnly: true
          ports:
            - name: envoy
              containerPort: {{ .Values.envoy.port }}
            - name: admin
              containerPort: {{ .Values.envoy.adminPort }}
          startupProbe:
            periodSeconds: {{ .Values.health.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.startupProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.startupProbe.timeoutSeconds }}
            httpGet:
              path: /ready
              port: admin
              scheme: HTTP
          livenessProbe:
            initialDelaySeconds: {{ .Values.health.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.livenessProbe.timeoutSeconds }}
            httpGet:
              path: /ready
              port: admin
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: {{ .Values.health.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.readinessProbe.timeoutSeconds }}
            httpGet:
              path: /ready
              port: admin
              scheme: HTTP
          resources:
{{ toYaml .Values.envoy.resources | indent 12 }}
        - name: httpstan
          image: "{{ .Values.httpstan.image.repository }}:{{ .Values.httpstan.image.tag }}"
          imagePullPolicy: {{ .Values.httpstan.image.pullPolicy }}
          ports:
            - name: httpstan
              containerPort: {{ .Values.httpstan.port }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.health.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.periodSeconds }}
            failureThreshold: {{ .Values.health.failureThreshold }}
            httpGet:
              path: {{ .Values.httpstan.healthPath }}
              port: {{ .Values.httpstan.port }}
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: {{ .Values.health.initialDelaySeconds }}
            httpGet:
              path: {{ .Values.httpstan.healthPath }}
              port: {{ .Values.httpstan.port }}
              scheme: HTTP
          resources:
{{ toYaml .Values.httpstan.resources | indent 12 }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
{{- end }}
