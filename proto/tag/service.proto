// Copyright 2025 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.tag;
option go_package = "github.com/bucketeer-io/bucketeer/proto/tag";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/tag/tag.proto";

message CreateTagRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  Tag.EntityType entity_type = 2 [(google.api.field_behavior) = REQUIRED];
  string environment_id = 3 [(google.api.field_behavior) = REQUIRED];
}

message CreateTagResponse {
  Tag tag = 1;
}

message DeleteTagRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  string environment_id = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteTagResponse {}

message ListTagsRequest {
  enum OrderBy {
    DEFAULT = 0;
    NAME = 1;
    CREATED_AT = 2;
    UPDATED_AT = 3;
    ENTITY_TYPE = 4;
    ENVIRONMENT = 5;
  }
  enum OrderDirection {
    ASC = 0;
    DESC = 1;
  }
  reserved 1;
  int64 page_size = 2;
  string cursor = 3;
  OrderBy order_by = 4;
  OrderDirection order_direction = 5;
  string search_keyword = 6;
  string environment_id = 7 [deprecated = true];
  string organization_id = 8;
  Tag.EntityType entity_type = 9;
  repeated string environment_ids = 10;
}

message ListTagsResponse {
  repeated Tag tags = 1;
  string cursor = 2;
  int64 total_count = 3;
}

service TagService {
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {
    option (google.api.http) = {
      get: "/v1/tags"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "List tags."
      tags: "tag"
      operation_id: "web.v1.tag.list"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc CreateTag(CreateTagRequest) returns (CreateTagResponse) {
    option (google.api.http) = {
      post: "/v1/tag"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create a tag."
      tags: "tag"
      operation_id: "web.v1.tag.create"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse) {
    option (google.api.http) = {
      delete: "/v1/tag"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete",
      description: "Delete a tag."
      tags: "tag"
      operation_id: "web.v1.tag.delete"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
}
