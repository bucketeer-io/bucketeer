// Code generated by MockGen. DO NOT EDIT.
// Source: evaluation_event.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	client "github.com/bucketeer-io/bucketeer/proto/event/client"
	service "github.com/bucketeer-io/bucketeer/proto/event/service"
)

// MockEventStorage is a mock of EventStorage interface.
type MockEventStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEventStorageMockRecorder
}

// MockEventStorageMockRecorder is the mock recorder for MockEventStorage.
type MockEventStorageMockRecorder struct {
	mock *MockEventStorage
}

// NewMockEventStorage creates a new mock instance.
func NewMockEventStorage(ctrl *gomock.Controller) *MockEventStorage {
	mock := &MockEventStorage{ctrl: ctrl}
	mock.recorder = &MockEventStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStorage) EXPECT() *MockEventStorageMockRecorder {
	return m.recorder
}

// CreateEvaluationEvent mocks base method.
func (m *MockEventStorage) CreateEvaluationEvent(ctx context.Context, event *client.EvaluationEvent, id, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluationEvent", ctx, event, id, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvaluationEvent indicates an expected call of CreateEvaluationEvent.
func (mr *MockEventStorageMockRecorder) CreateEvaluationEvent(ctx, event, id, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluationEvent", reflect.TypeOf((*MockEventStorage)(nil).CreateEvaluationEvent), ctx, event, id, environmentNamespace)
}

// CreateGoalEvent mocks base method.
func (m *MockEventStorage) CreateGoalEvent(ctx context.Context, event *client.GoalEvent, id, environmentNamespace string, evaluations []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGoalEvent", ctx, event, id, environmentNamespace, evaluations)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGoalEvent indicates an expected call of CreateGoalEvent.
func (mr *MockEventStorageMockRecorder) CreateGoalEvent(ctx, event, id, environmentNamespace, evaluations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGoalEvent", reflect.TypeOf((*MockEventStorage)(nil).CreateGoalEvent), ctx, event, id, environmentNamespace, evaluations)
}

// CreateUserEvent mocks base method.
func (m *MockEventStorage) CreateUserEvent(ctx context.Context, event *service.UserEvent, id, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserEvent", ctx, event, id, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserEvent indicates an expected call of CreateUserEvent.
func (mr *MockEventStorageMockRecorder) CreateUserEvent(ctx, event, id, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserEvent", reflect.TypeOf((*MockEventStorage)(nil).CreateUserEvent), ctx, event, id, environmentNamespace)
}
