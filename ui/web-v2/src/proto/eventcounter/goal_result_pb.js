// source: proto/eventcounter/goal_result.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var proto_eventcounter_variation_result_pb = require('../../proto/eventcounter/variation_result_pb.js');
goog.object.extend(proto, proto_eventcounter_variation_result_pb);
goog.exportSymbol('proto.bucketeer.eventcounter.GoalResult', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.Summary', null, global);
goog.exportSymbol(
  'proto.bucketeer.eventcounter.Summary.Variation',
  null,
  global
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GoalResult = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.bucketeer.eventcounter.GoalResult.repeatedFields_,
    null
  );
};
goog.inherits(proto.bucketeer.eventcounter.GoalResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GoalResult.displayName =
    'proto.bucketeer.eventcounter.GoalResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.Summary = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.bucketeer.eventcounter.Summary.repeatedFields_,
    null
  );
};
goog.inherits(proto.bucketeer.eventcounter.Summary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.Summary.displayName =
    'proto.bucketeer.eventcounter.Summary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.Summary.Variation = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.Summary.Variation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.Summary.Variation.displayName =
    'proto.bucketeer.eventcounter.Summary.Variation';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.eventcounter.GoalResult.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.eventcounter.GoalResult.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.bucketeer.eventcounter.GoalResult.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.eventcounter.GoalResult} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.eventcounter.GoalResult.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        goalId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        variationResultsList: jspb.Message.toObjectList(
          msg.getVariationResultsList(),
          proto_eventcounter_variation_result_pb.VariationResult.toObject,
          includeInstance
        ),
        summary:
          (f = msg.getSummary()) &&
          proto.bucketeer.eventcounter.Summary.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GoalResult}
 */
proto.bucketeer.eventcounter.GoalResult.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GoalResult();
  return proto.bucketeer.eventcounter.GoalResult.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GoalResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GoalResult}
 */
proto.bucketeer.eventcounter.GoalResult.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setGoalId(value);
        break;
      case 2:
        var value =
          new proto_eventcounter_variation_result_pb.VariationResult();
        reader.readMessage(
          value,
          proto_eventcounter_variation_result_pb.VariationResult
            .deserializeBinaryFromReader
        );
        msg.addVariationResults(value);
        break;
      case 3:
        var value = new proto.bucketeer.eventcounter.Summary();
        reader.readMessage(
          value,
          proto.bucketeer.eventcounter.Summary.deserializeBinaryFromReader
        );
        msg.setSummary(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GoalResult.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.eventcounter.GoalResult.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GoalResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GoalResult.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getGoalId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getVariationResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto_eventcounter_variation_result_pb.VariationResult
        .serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bucketeer.eventcounter.Summary.serializeBinaryToWriter
    );
  }
};

/**
 * optional string goal_id = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GoalResult.prototype.getGoalId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GoalResult} returns this
 */
proto.bucketeer.eventcounter.GoalResult.prototype.setGoalId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated VariationResult variation_results = 2;
 * @return {!Array<!proto.bucketeer.eventcounter.VariationResult>}
 */
proto.bucketeer.eventcounter.GoalResult.prototype.getVariationResultsList =
  function () {
    return /** @type{!Array<!proto.bucketeer.eventcounter.VariationResult>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto_eventcounter_variation_result_pb.VariationResult,
        2
      )
    );
  };

/**
 * @param {!Array<!proto.bucketeer.eventcounter.VariationResult>} value
 * @return {!proto.bucketeer.eventcounter.GoalResult} returns this
 */
proto.bucketeer.eventcounter.GoalResult.prototype.setVariationResultsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value);
  };

/**
 * @param {!proto.bucketeer.eventcounter.VariationResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.eventcounter.VariationResult}
 */
proto.bucketeer.eventcounter.GoalResult.prototype.addVariationResults =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      2,
      opt_value,
      proto.bucketeer.eventcounter.VariationResult,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.eventcounter.GoalResult} returns this
 */
proto.bucketeer.eventcounter.GoalResult.prototype.clearVariationResultsList =
  function () {
    return this.setVariationResultsList([]);
  };

/**
 * optional Summary summary = 3;
 * @return {?proto.bucketeer.eventcounter.Summary}
 */
proto.bucketeer.eventcounter.GoalResult.prototype.getSummary = function () {
  return /** @type{?proto.bucketeer.eventcounter.Summary} */ (
    jspb.Message.getWrapperField(this, proto.bucketeer.eventcounter.Summary, 3)
  );
};

/**
 * @param {?proto.bucketeer.eventcounter.Summary|undefined} value
 * @return {!proto.bucketeer.eventcounter.GoalResult} returns this
 */
proto.bucketeer.eventcounter.GoalResult.prototype.setSummary = function (
  value
) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.eventcounter.GoalResult} returns this
 */
proto.bucketeer.eventcounter.GoalResult.prototype.clearSummary = function () {
  return this.setSummary(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.eventcounter.GoalResult.prototype.hasSummary = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.eventcounter.Summary.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.eventcounter.Summary.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.bucketeer.eventcounter.Summary.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.eventcounter.Summary} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.eventcounter.Summary.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        bestVariationsList: jspb.Message.toObjectList(
          msg.getBestVariationsList(),
          proto.bucketeer.eventcounter.Summary.Variation.toObject,
          includeInstance
        ),
        totalEvaluationUserCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
        totalGoalUserCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.Summary}
 */
proto.bucketeer.eventcounter.Summary.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.Summary();
  return proto.bucketeer.eventcounter.Summary.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.Summary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.Summary}
 */
proto.bucketeer.eventcounter.Summary.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.bucketeer.eventcounter.Summary.Variation();
        reader.readMessage(
          value,
          proto.bucketeer.eventcounter.Summary.Variation
            .deserializeBinaryFromReader
        );
        msg.addBestVariations(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTotalEvaluationUserCount(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTotalGoalUserCount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.Summary.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.Summary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.Summary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.Summary.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getBestVariationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bucketeer.eventcounter.Summary.Variation.serializeBinaryToWriter
    );
  }
  f = message.getTotalEvaluationUserCount();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getTotalGoalUserCount();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.eventcounter.Summary.Variation.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.bucketeer.eventcounter.Summary.Variation.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.eventcounter.Summary.Variation} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.eventcounter.Summary.Variation.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        probability: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
        isbest: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.Summary.Variation}
 */
proto.bucketeer.eventcounter.Summary.Variation.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.Summary.Variation();
  return proto.bucketeer.eventcounter.Summary.Variation.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.Summary.Variation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.Summary.Variation}
 */
proto.bucketeer.eventcounter.Summary.Variation.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setId(value);
          break;
        case 2:
          var value = /** @type {number} */ (reader.readDouble());
          msg.setProbability(value);
          break;
        case 3:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setIsbest(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.Summary.Variation.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.eventcounter.Summary.Variation.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.Summary.Variation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.Summary.Variation.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getProbability();
    if (f !== 0.0) {
      writer.writeDouble(2, f);
    }
    f = message.getIsbest();
    if (f) {
      writer.writeBool(3, f);
    }
  };

/**
 * optional string id = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.Summary.Variation.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.Summary.Variation} returns this
 */
proto.bucketeer.eventcounter.Summary.Variation.prototype.setId = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional double probability = 2;
 * @return {number}
 */
proto.bucketeer.eventcounter.Summary.Variation.prototype.getProbability =
  function () {
    return /** @type {number} */ (
      jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
    );
  };

/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.Summary.Variation} returns this
 */
proto.bucketeer.eventcounter.Summary.Variation.prototype.setProbability =
  function (value) {
    return jspb.Message.setProto3FloatField(this, 2, value);
  };

/**
 * optional bool isBest = 3;
 * @return {boolean}
 */
proto.bucketeer.eventcounter.Summary.Variation.prototype.getIsbest =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 3, false)
    );
  };

/**
 * @param {boolean} value
 * @return {!proto.bucketeer.eventcounter.Summary.Variation} returns this
 */
proto.bucketeer.eventcounter.Summary.Variation.prototype.setIsbest = function (
  value
) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * repeated Variation best_variations = 1;
 * @return {!Array<!proto.bucketeer.eventcounter.Summary.Variation>}
 */
proto.bucketeer.eventcounter.Summary.prototype.getBestVariationsList =
  function () {
    return /** @type{!Array<!proto.bucketeer.eventcounter.Summary.Variation>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.bucketeer.eventcounter.Summary.Variation,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.bucketeer.eventcounter.Summary.Variation>} value
 * @return {!proto.bucketeer.eventcounter.Summary} returns this
 */
proto.bucketeer.eventcounter.Summary.prototype.setBestVariationsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.bucketeer.eventcounter.Summary.Variation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.eventcounter.Summary.Variation}
 */
proto.bucketeer.eventcounter.Summary.prototype.addBestVariations = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.bucketeer.eventcounter.Summary.Variation,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.eventcounter.Summary} returns this
 */
proto.bucketeer.eventcounter.Summary.prototype.clearBestVariationsList =
  function () {
    return this.setBestVariationsList([]);
  };

/**
 * optional int64 total_evaluation_user_count = 2;
 * @return {number}
 */
proto.bucketeer.eventcounter.Summary.prototype.getTotalEvaluationUserCount =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
  };

/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.Summary} returns this
 */
proto.bucketeer.eventcounter.Summary.prototype.setTotalEvaluationUserCount =
  function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
  };

/**
 * optional int64 total_goal_user_count = 3;
 * @return {number}
 */
proto.bucketeer.eventcounter.Summary.prototype.getTotalGoalUserCount =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
  };

/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.Summary} returns this
 */
proto.bucketeer.eventcounter.Summary.prototype.setTotalGoalUserCount =
  function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
  };

goog.object.extend(exports, proto.bucketeer.eventcounter);
