// Copyright 2025 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.experiment;
option go_package = "github.com/bucketeer-io/bucketeer/proto/experiment";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/wrappers.proto";

import "proto/experiment/command.proto";
import "proto/experiment/goal.proto";
import "proto/experiment/experiment.proto";

message GetGoalRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  reserved 2;
  string environment_id = 3 [(google.api.field_behavior) = REQUIRED];
}

message GetGoalResponse {
  Goal goal = 1;
}

message ListGoalsRequest {
  enum OrderBy {
    DEFAULT = 0;
    NAME = 1;
    CREATED_AT = 2;
    UPDATED_AT = 3;
    CONNECTION_TYPE = 4;
  }
  enum OrderDirection {
    ASC = 0;
    DESC = 1;
  }
  int64 page_size = 1;
  string cursor = 2;
  reserved 3;
  OrderBy order_by = 4;
  OrderDirection order_direction = 5;
  string search_keyword = 6;
  google.protobuf.BoolValue is_in_use_status = 7;
  google.protobuf.BoolValue archived = 8;
  string environment_id = 9 [(google.api.field_behavior) = REQUIRED];
}

message ListGoalsResponse {
  repeated Goal goals = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message GetGoalConnectionReportRequest {
  string environment_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetGoalConnectionReportResponse {
  int64 current_month_total_experiments = 1;
  int64 last_month_total_experiments = 2;

  int64 current_month_total_operations = 3;
  int64 last_month_total_operations = 4;

  int64 current_month_not_in_use_goals = 5;
  int64 last_month_not_in_use_goals = 6;
}

message CreateGoalRequest {
  CreateGoalCommand command = 1 [
    deprecated = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "deprecated"
    }
  ];
  reserved 2;
  string environment_id = 3 [(google.api.field_behavior) = REQUIRED];
  string id = 4 [(google.api.field_behavior) = REQUIRED];
  string name = 5 [(google.api.field_behavior) = REQUIRED];
  string description = 6;
  Goal.ConnectionType connection_type = 7;
}

message CreateGoalResponse {
  Goal goal = 1;
}

message ArchiveGoalRequest {
  string id = 1;
  ArchiveGoalCommand command = 2;
  reserved 3;
  string environment_id = 4;
}

message ArchiveGoalResponse {}

message DeleteGoalRequest {
  string id = 1;
  DeleteGoalCommand command = 2;
  reserved 3;
  string environment_id = 4;
}

message DeleteGoalResponse {}

message UpdateGoalRequest {
  string id = 1;
  RenameGoalCommand rename_command = 2;
  ChangeDescriptionGoalCommand change_description_command = 3;
  reserved 4;
  string environment_id = 5;
}

message UpdateGoalResponse {}

message GetExperimentRequest {
  string id = 1;
  reserved 2;
  string environment_id = 3;
}

message GetExperimentResponse {
  Experiment experiment = 1;
}

message ListExperimentsRequest {
  enum OrderBy {
    DEFAULT = 0;
    NAME = 1;
    CREATED_AT = 2;
    UPDATED_AT = 3;
  }
  enum OrderDirection {
    ASC = 0;
    DESC = 1;
  }
  string feature_id = 1;
  google.protobuf.Int32Value feature_version = 2;
  int64 from = 3;
  int64 to = 4;
  int64 page_size = 5;
  string cursor = 6;
  reserved 7;
  google.protobuf.Int32Value status = 8;  // [deprecated = true];
  string maintainer = 9;
  OrderBy order_by = 10;
  OrderDirection order_direction = 11;
  string search_keyword = 12;
  google.protobuf.BoolValue archived = 13;
  repeated Experiment.Status statuses = 14;
  string environment_id = 15;
}

message ListExperimentsResponse {
  repeated Experiment experiments = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message CreateExperimentRequest {
  CreateExperimentCommand command = 1;
  reserved 2;
  string environment_id = 3;
}

message CreateExperimentResponse {
  Experiment experiment = 1;
}

message UpdateExperimentRequest {
  string id = 1;
  reserved 2;  // ChangeStartAtExperimentCommand change_start_at_command = 2
               // [deprecated = true];
  reserved 3;  // ChangeStopAtExperimentCommand change_stop_at_command = 3
               // [deprecated = true];
  reserved 4;
  ChangeExperimentPeriodCommand change_experiment_period_command = 5;
  ChangeExperimentNameCommand change_name_command = 6;
  ChangeExperimentDescriptionCommand change_description_command = 7;
  string environment_id = 8;
}

message UpdateExperimentResponse {}

message StartExperimentRequest {
  reserved 1;
  string id = 2;
  StartExperimentCommand command = 3;
  string environment_id = 4;
}

message StartExperimentResponse {}

message FinishExperimentRequest {
  reserved 1;
  string id = 2;
  FinishExperimentCommand command = 3;
  string environment_id = 4;
}

message FinishExperimentResponse {}

message StopExperimentRequest {
  string id = 1;
  StopExperimentCommand command = 2;
  reserved 3;
  string environment_id = 4;
}

message StopExperimentResponse {}

message ArchiveExperimentRequest {
  string id = 1;
  ArchiveExperimentCommand command = 2;
  reserved 3;
  string environment_id = 4;
}

message ArchiveExperimentResponse {}

message DeleteExperimentRequest {
  string id = 1;
  DeleteExperimentCommand command = 2;
  reserved 3;
  string environment_id = 4;
}

message DeleteExperimentResponse {}

service ExperimentService {
  rpc GetGoal(GetGoalRequest) returns (GetGoalResponse) {
    option (google.api.http) = {
      get: "/v1/goal"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get"
      description: "Get a goal."
      tags: "goal"
      operation_id: "web.v1.goal.get"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc ListGoals(ListGoalsRequest) returns (ListGoalsResponse) {
    option (google.api.http) = {
      get: "/v1/goals"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List"
      description: "List goals."
      tags: "goal"
      operation_id: "web.v1.goals.list"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc GetGoalConnectionReport(GetGoalConnectionReportRequest)
      returns (GetGoalConnectionReportResponse) {
    option (google.api.http) = {
      get: "/v1/goal/connection-report"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get connection report"
      description: "This API returns a summary of the total number of experiments, auto operations, and not-in-use goals for the last and current months."
      tags: "goal"
      operation_id: "web.v1.goal.get_connection_report"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc CreateGoal(CreateGoalRequest) returns (CreateGoalResponse) {
    option (google.api.http) = {
      post: "/v1/goal"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create"
      description: "Create a goal."
      tags: "goal"
      operation_id: "web.v1.goal.create"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc UpdateGoal(UpdateGoalRequest) returns (UpdateGoalResponse) {}
  rpc ArchiveGoal(ArchiveGoalRequest) returns (ArchiveGoalResponse) {}
  rpc DeleteGoal(DeleteGoalRequest) returns (DeleteGoalResponse) {}

  rpc GetExperiment(GetExperimentRequest) returns (GetExperimentResponse) {}
  rpc ListExperiments(ListExperimentsRequest)
      returns (ListExperimentsResponse) {}
  rpc CreateExperiment(CreateExperimentRequest)
      returns (CreateExperimentResponse) {}
  rpc UpdateExperiment(UpdateExperimentRequest)
      returns (UpdateExperimentResponse) {}
  rpc StartExperiment(StartExperimentRequest)
      returns (StartExperimentResponse) {}
  rpc FinishExperiment(FinishExperimentRequest)
      returns (FinishExperimentResponse) {}
  rpc StopExperiment(StopExperimentRequest) returns (StopExperimentResponse) {}
  rpc ArchiveExperiment(ArchiveExperimentRequest)
      returns (ArchiveExperimentResponse) {}
  rpc DeleteExperiment(DeleteExperimentRequest)
      returns (DeleteExperimentResponse) {}
}
