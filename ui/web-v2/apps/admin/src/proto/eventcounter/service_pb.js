// source: proto/eventcounter/service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var proto_eventcounter_experiment_result_pb = require('../../proto/eventcounter/experiment_result_pb.js');
goog.object.extend(proto, proto_eventcounter_experiment_result_pb);
var proto_eventcounter_timeseries_pb = require('../../proto/eventcounter/timeseries_pb.js');
goog.object.extend(proto, proto_eventcounter_timeseries_pb);
var proto_eventcounter_variation_count_pb = require('../../proto/eventcounter/variation_count_pb.js');
goog.object.extend(proto, proto_eventcounter_variation_count_pb);
goog.exportSymbol('proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.TimeRange', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetExperimentGoalCountRequest', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetExperimentGoalCountResponse', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetExperimentResultRequest', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetExperimentResultResponse', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetMAUCountRequest', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetMAUCountResponse', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.ListExperimentResultsRequest', null, global);
goog.exportSymbol('proto.bucketeer.eventcounter.ListExperimentResultsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.displayName = 'proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.displayName = 'proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.displayName = 'proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.displayName = 'proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetExperimentResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetExperimentResultRequest.displayName = 'proto.bucketeer.eventcounter.GetExperimentResultRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetExperimentResultResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetExperimentResultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetExperimentResultResponse.displayName = 'proto.bucketeer.eventcounter.GetExperimentResultResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.ListExperimentResultsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.ListExperimentResultsRequest.displayName = 'proto.bucketeer.eventcounter.ListExperimentResultsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.ListExperimentResultsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.ListExperimentResultsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.ListExperimentResultsResponse.displayName = 'proto.bucketeer.eventcounter.ListExperimentResultsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetExperimentGoalCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.displayName = 'proto.bucketeer.eventcounter.GetExperimentGoalCountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetExperimentGoalCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.displayName = 'proto.bucketeer.eventcounter.GetExperimentGoalCountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.displayName = 'proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.displayName = 'proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.displayName = 'proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.displayName = 'proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetMAUCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetMAUCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetMAUCountRequest.displayName = 'proto.bucketeer.eventcounter.GetMAUCountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.eventcounter.GetMAUCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.eventcounter.GetMAUCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.eventcounter.GetMAUCountResponse.displayName = 'proto.bucketeer.eventcounter.GetMAUCountResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentNamespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    featureId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    featureVersion: jspb.Message.getFieldWithDefault(msg, 5, 0),
    variationIdsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest;
  return proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentNamespace(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeatureVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addVariationIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartAt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEndAt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getFeatureId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFeatureVersion();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getVariationIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * optional string environment_namespace = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.getEnvironmentNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.setEnvironmentNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 start_at = 2;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.getStartAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.setStartAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 end_at = 3;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.getEndAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.setEndAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string feature_id = 4;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.getFeatureId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.setFeatureId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 feature_version = 5;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.getFeatureVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.setFeatureVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated string variation_ids = 6;
 * @return {!Array<string>}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.getVariationIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.setVariationIdsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.addVariationIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountRequest.prototype.clearVariationIdsList = function() {
  return this.setVariationIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featureVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    variationCountsList: jspb.Message.toObjectList(msg.getVariationCountsList(),
    proto_eventcounter_variation_count_pb.VariationCount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse;
  return proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeatureVersion(value);
      break;
    case 3:
      var value = new proto_eventcounter_variation_count_pb.VariationCount;
      reader.readMessage(value,proto_eventcounter_variation_count_pb.VariationCount.deserializeBinaryFromReader);
      msg.addVariationCounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeatureVersion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getVariationCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto_eventcounter_variation_count_pb.VariationCount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string feature_id = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.prototype.getFeatureId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.prototype.setFeatureId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 feature_version = 2;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.prototype.getFeatureVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.prototype.setFeatureVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated VariationCount variation_counts = 3;
 * @return {!Array<!proto.bucketeer.eventcounter.VariationCount>}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.prototype.getVariationCountsList = function() {
  return /** @type{!Array<!proto.bucketeer.eventcounter.VariationCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_eventcounter_variation_count_pb.VariationCount, 3));
};


/**
 * @param {!Array<!proto.bucketeer.eventcounter.VariationCount>} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse} returns this
*/
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.prototype.setVariationCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bucketeer.eventcounter.VariationCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.eventcounter.VariationCount}
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.prototype.addVariationCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bucketeer.eventcounter.VariationCount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetExperimentEvaluationCountResponse.prototype.clearVariationCountsList = function() {
  return this.setVariationCountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentNamespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featureId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timeRange: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest;
  return proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureId(value);
      break;
    case 3:
      var value = /** @type {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.TimeRange} */ (reader.readEnum());
      msg.setTimeRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeatureId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimeRange();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.TimeRange = {
  UNKNOWN: 0,
  TWENTY_FOUR_HOURS: 1,
  SEVEN_DAYS: 2,
  FOURTEEN_DAYS: 3,
  THIRTY_DAYS: 4
};

/**
 * optional string environment_namespace = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.prototype.getEnvironmentNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.prototype.setEnvironmentNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string feature_id = 2;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.prototype.getFeatureId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.prototype.setFeatureId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TimeRange time_range = 3;
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.TimeRange}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.prototype.getTimeRange = function() {
  return /** @type {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.TimeRange} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.TimeRange} value
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.prototype.setTimeRange = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userCountsList: jspb.Message.toObjectList(msg.getUserCountsList(),
    proto_eventcounter_timeseries_pb.VariationTimeseries.toObject, includeInstance),
    eventCountsList: jspb.Message.toObjectList(msg.getEventCountsList(),
    proto_eventcounter_timeseries_pb.VariationTimeseries.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse;
  return proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_eventcounter_timeseries_pb.VariationTimeseries;
      reader.readMessage(value,proto_eventcounter_timeseries_pb.VariationTimeseries.deserializeBinaryFromReader);
      msg.addUserCounts(value);
      break;
    case 2:
      var value = new proto_eventcounter_timeseries_pb.VariationTimeseries;
      reader.readMessage(value,proto_eventcounter_timeseries_pb.VariationTimeseries.deserializeBinaryFromReader);
      msg.addEventCounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto_eventcounter_timeseries_pb.VariationTimeseries.serializeBinaryToWriter
    );
  }
  f = message.getEventCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto_eventcounter_timeseries_pb.VariationTimeseries.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VariationTimeseries user_counts = 1;
 * @return {!Array<!proto.bucketeer.eventcounter.VariationTimeseries>}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.prototype.getUserCountsList = function() {
  return /** @type{!Array<!proto.bucketeer.eventcounter.VariationTimeseries>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_eventcounter_timeseries_pb.VariationTimeseries, 1));
};


/**
 * @param {!Array<!proto.bucketeer.eventcounter.VariationTimeseries>} value
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse} returns this
*/
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.prototype.setUserCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bucketeer.eventcounter.VariationTimeseries=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.eventcounter.VariationTimeseries}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.prototype.addUserCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bucketeer.eventcounter.VariationTimeseries, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.prototype.clearUserCountsList = function() {
  return this.setUserCountsList([]);
};


/**
 * repeated VariationTimeseries event_counts = 2;
 * @return {!Array<!proto.bucketeer.eventcounter.VariationTimeseries>}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.prototype.getEventCountsList = function() {
  return /** @type{!Array<!proto.bucketeer.eventcounter.VariationTimeseries>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_eventcounter_timeseries_pb.VariationTimeseries, 2));
};


/**
 * @param {!Array<!proto.bucketeer.eventcounter.VariationTimeseries>} value
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse} returns this
*/
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.prototype.setEventCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bucketeer.eventcounter.VariationTimeseries=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.eventcounter.VariationTimeseries}
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.prototype.addEventCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bucketeer.eventcounter.VariationTimeseries, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.prototype.clearEventCountsList = function() {
  return this.setEventCountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetExperimentResultRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetExperimentResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentNamespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    experimentId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetExperimentResultRequest}
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetExperimentResultRequest;
  return proto.bucketeer.eventcounter.GetExperimentResultRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetExperimentResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetExperimentResultRequest}
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExperimentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetExperimentResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetExperimentResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExperimentId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string environment_namespace = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest.prototype.getEnvironmentNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentResultRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest.prototype.setEnvironmentNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string experiment_id = 2;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest.prototype.getExperimentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentResultRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentResultRequest.prototype.setExperimentId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetExperimentResultResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetExperimentResultResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetExperimentResultResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentResultResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    experimentResult: (f = msg.getExperimentResult()) && proto_eventcounter_experiment_result_pb.ExperimentResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetExperimentResultResponse}
 */
proto.bucketeer.eventcounter.GetExperimentResultResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetExperimentResultResponse;
  return proto.bucketeer.eventcounter.GetExperimentResultResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetExperimentResultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetExperimentResultResponse}
 */
proto.bucketeer.eventcounter.GetExperimentResultResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_eventcounter_experiment_result_pb.ExperimentResult;
      reader.readMessage(value,proto_eventcounter_experiment_result_pb.ExperimentResult.deserializeBinaryFromReader);
      msg.setExperimentResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetExperimentResultResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetExperimentResultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetExperimentResultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentResultResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExperimentResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_eventcounter_experiment_result_pb.ExperimentResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExperimentResult experiment_result = 1;
 * @return {?proto.bucketeer.eventcounter.ExperimentResult}
 */
proto.bucketeer.eventcounter.GetExperimentResultResponse.prototype.getExperimentResult = function() {
  return /** @type{?proto.bucketeer.eventcounter.ExperimentResult} */ (
    jspb.Message.getWrapperField(this, proto_eventcounter_experiment_result_pb.ExperimentResult, 1));
};


/**
 * @param {?proto.bucketeer.eventcounter.ExperimentResult|undefined} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentResultResponse} returns this
*/
proto.bucketeer.eventcounter.GetExperimentResultResponse.prototype.setExperimentResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.eventcounter.GetExperimentResultResponse} returns this
 */
proto.bucketeer.eventcounter.GetExperimentResultResponse.prototype.clearExperimentResult = function() {
  return this.setExperimentResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.eventcounter.GetExperimentResultResponse.prototype.hasExperimentResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.ListExperimentResultsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.ListExperimentResultsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featureVersion: (f = msg.getFeatureVersion()) && google_protobuf_wrappers_pb.Int32Value.toObject(includeInstance, f),
    environmentNamespace: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.ListExperimentResultsRequest}
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.ListExperimentResultsRequest;
  return proto.bucketeer.eventcounter.ListExperimentResultsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.ListExperimentResultsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.ListExperimentResultsRequest}
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureId(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.Int32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.Int32Value.deserializeBinaryFromReader);
      msg.setFeatureVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.ListExperimentResultsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.ListExperimentResultsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeatureVersion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.Int32Value.serializeBinaryToWriter
    );
  }
  f = message.getEnvironmentNamespace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string feature_id = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.prototype.getFeatureId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.ListExperimentResultsRequest} returns this
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.prototype.setFeatureId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Int32Value feature_version = 2;
 * @return {?proto.google.protobuf.Int32Value}
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.prototype.getFeatureVersion = function() {
  return /** @type{?proto.google.protobuf.Int32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.Int32Value, 2));
};


/**
 * @param {?proto.google.protobuf.Int32Value|undefined} value
 * @return {!proto.bucketeer.eventcounter.ListExperimentResultsRequest} returns this
*/
proto.bucketeer.eventcounter.ListExperimentResultsRequest.prototype.setFeatureVersion = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.eventcounter.ListExperimentResultsRequest} returns this
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.prototype.clearFeatureVersion = function() {
  return this.setFeatureVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.prototype.hasFeatureVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string environment_namespace = 3;
 * @return {string}
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.prototype.getEnvironmentNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.ListExperimentResultsRequest} returns this
 */
proto.bucketeer.eventcounter.ListExperimentResultsRequest.prototype.setEnvironmentNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.ListExperimentResultsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.ListExperimentResultsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.ListExperimentResultsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.ListExperimentResultsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsMap: (f = msg.getResultsMap()) ? f.toObject(includeInstance, proto.bucketeer.eventcounter.ExperimentResult.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.ListExperimentResultsResponse}
 */
proto.bucketeer.eventcounter.ListExperimentResultsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.ListExperimentResultsResponse;
  return proto.bucketeer.eventcounter.ListExperimentResultsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.ListExperimentResultsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.ListExperimentResultsResponse}
 */
proto.bucketeer.eventcounter.ListExperimentResultsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getResultsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.bucketeer.eventcounter.ExperimentResult.deserializeBinaryFromReader, "", new proto.bucketeer.eventcounter.ExperimentResult());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.ListExperimentResultsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.ListExperimentResultsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.ListExperimentResultsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.ListExperimentResultsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.bucketeer.eventcounter.ExperimentResult.serializeBinaryToWriter);
  }
};


/**
 * map<string, ExperimentResult> results = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.bucketeer.eventcounter.ExperimentResult>}
 */
proto.bucketeer.eventcounter.ListExperimentResultsResponse.prototype.getResultsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.bucketeer.eventcounter.ExperimentResult>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.bucketeer.eventcounter.ExperimentResult));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.bucketeer.eventcounter.ListExperimentResultsResponse} returns this
 */
proto.bucketeer.eventcounter.ListExperimentResultsResponse.prototype.clearResultsMap = function() {
  this.getResultsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentNamespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    goalId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    featureId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    featureVersion: jspb.Message.getFieldWithDefault(msg, 6, 0),
    variationIdsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetExperimentGoalCountRequest;
  return proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentNamespace(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoalId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeatureVersion(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addVariationIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartAt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEndAt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getGoalId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFeatureId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFeatureVersion();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getVariationIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string environment_namespace = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.getEnvironmentNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.setEnvironmentNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 start_at = 2;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.getStartAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.setStartAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 end_at = 3;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.getEndAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.setEndAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string goal_id = 4;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.getGoalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.setGoalId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string feature_id = 5;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.getFeatureId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.setFeatureId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 feature_version = 6;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.getFeatureVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.setFeatureVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string variation_ids = 7;
 * @return {!Array<string>}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.getVariationIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.setVariationIdsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.addVariationIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountRequest.prototype.clearVariationIdsList = function() {
  return this.setVariationIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetExperimentGoalCountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    goalId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    variationCountsList: jspb.Message.toObjectList(msg.getVariationCountsList(),
    proto_eventcounter_variation_count_pb.VariationCount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountResponse}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetExperimentGoalCountResponse;
  return proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetExperimentGoalCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountResponse}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoalId(value);
      break;
    case 2:
      var value = new proto_eventcounter_variation_count_pb.VariationCount;
      reader.readMessage(value,proto_eventcounter_variation_count_pb.VariationCount.deserializeBinaryFromReader);
      msg.addVariationCounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetExperimentGoalCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoalId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVariationCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto_eventcounter_variation_count_pb.VariationCount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string goal_id = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.prototype.getGoalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.prototype.setGoalId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated VariationCount variation_counts = 2;
 * @return {!Array<!proto.bucketeer.eventcounter.VariationCount>}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.prototype.getVariationCountsList = function() {
  return /** @type{!Array<!proto.bucketeer.eventcounter.VariationCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_eventcounter_variation_count_pb.VariationCount, 2));
};


/**
 * @param {!Array<!proto.bucketeer.eventcounter.VariationCount>} value
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountResponse} returns this
*/
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.prototype.setVariationCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bucketeer.eventcounter.VariationCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.eventcounter.VariationCount}
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.prototype.addVariationCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bucketeer.eventcounter.VariationCount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.eventcounter.GetExperimentGoalCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetExperimentGoalCountResponse.prototype.clearVariationCountsList = function() {
  return this.setVariationCountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentNamespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opsRuleId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clauseId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    featureId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    featureVersion: jspb.Message.getFieldWithDefault(msg, 5, 0),
    variationId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest;
  return proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpsRuleId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClauseId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeatureVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpsRuleId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClauseId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFeatureId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFeatureVersion();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getVariationId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string environment_namespace = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.getEnvironmentNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.setEnvironmentNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ops_rule_id = 2;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.getOpsRuleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.setOpsRuleId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string clause_id = 3;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.getClauseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.setClauseId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string feature_id = 4;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.getFeatureId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.setFeatureId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 feature_version = 5;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.getFeatureVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.setFeatureVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string variation_id = 6;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.getVariationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountRequest.prototype.setVariationId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    opsRuleId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clauseId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse;
  return proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpsRuleId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClauseId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpsRuleId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClauseId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string ops_rule_id = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.prototype.getOpsRuleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.prototype.setOpsRuleId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clause_id = 2;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.prototype.getClauseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.prototype.setClauseId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 count = 3;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetOpsEvaluationUserCountResponse.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentNamespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opsRuleId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clauseId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    featureId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    featureVersion: jspb.Message.getFieldWithDefault(msg, 5, 0),
    variationId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest;
  return proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpsRuleId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClauseId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeatureVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpsRuleId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClauseId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFeatureId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFeatureVersion();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getVariationId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string environment_namespace = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.getEnvironmentNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.setEnvironmentNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ops_rule_id = 2;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.getOpsRuleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.setOpsRuleId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string clause_id = 3;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.getClauseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.setClauseId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string feature_id = 4;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.getFeatureId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.setFeatureId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 feature_version = 5;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.getFeatureVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.setFeatureVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string variation_id = 6;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.getVariationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountRequest.prototype.setVariationId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    opsRuleId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clauseId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse;
  return proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpsRuleId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClauseId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpsRuleId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClauseId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string ops_rule_id = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.prototype.getOpsRuleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.prototype.setOpsRuleId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clause_id = 2;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.prototype.getClauseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.prototype.setClauseId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 count = 3;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetOpsGoalUserCountResponse.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetMAUCountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetMAUCountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetMAUCountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetMAUCountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentNamespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    yearMonth: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetMAUCountRequest}
 */
proto.bucketeer.eventcounter.GetMAUCountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetMAUCountRequest;
  return proto.bucketeer.eventcounter.GetMAUCountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetMAUCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetMAUCountRequest}
 */
proto.bucketeer.eventcounter.GetMAUCountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setYearMonth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetMAUCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetMAUCountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetMAUCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetMAUCountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getYearMonth();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string environment_namespace = 1;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetMAUCountRequest.prototype.getEnvironmentNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetMAUCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetMAUCountRequest.prototype.setEnvironmentNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string year_month = 2;
 * @return {string}
 */
proto.bucketeer.eventcounter.GetMAUCountRequest.prototype.getYearMonth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.eventcounter.GetMAUCountRequest} returns this
 */
proto.bucketeer.eventcounter.GetMAUCountRequest.prototype.setYearMonth = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.eventcounter.GetMAUCountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.eventcounter.GetMAUCountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.eventcounter.GetMAUCountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetMAUCountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.eventcounter.GetMAUCountResponse}
 */
proto.bucketeer.eventcounter.GetMAUCountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.eventcounter.GetMAUCountResponse;
  return proto.bucketeer.eventcounter.GetMAUCountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.eventcounter.GetMAUCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.eventcounter.GetMAUCountResponse}
 */
proto.bucketeer.eventcounter.GetMAUCountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEventCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.eventcounter.GetMAUCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.eventcounter.GetMAUCountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.eventcounter.GetMAUCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.eventcounter.GetMAUCountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventCount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserCount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 event_count = 1;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetMAUCountResponse.prototype.getEventCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetMAUCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetMAUCountResponse.prototype.setEventCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 user_count = 2;
 * @return {number}
 */
proto.bucketeer.eventcounter.GetMAUCountResponse.prototype.getUserCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.eventcounter.GetMAUCountResponse} returns this
 */
proto.bucketeer.eventcounter.GetMAUCountResponse.prototype.setUserCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.bucketeer.eventcounter);
