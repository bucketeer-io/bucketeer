// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -package=mock -destination=./mock/client.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"

	auditlog "github.com/bucketeer-io/bucketeer/proto/auditlog"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// GetAuditLog mocks base method.
func (m *MockClient) GetAuditLog(ctx context.Context, in *auditlog.GetAuditLogRequest, opts ...grpc.CallOption) (*auditlog.GetAuditLogResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuditLog", varargs...)
	ret0, _ := ret[0].(*auditlog.GetAuditLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLog indicates an expected call of GetAuditLog.
func (mr *MockClientMockRecorder) GetAuditLog(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLog", reflect.TypeOf((*MockClient)(nil).GetAuditLog), varargs...)
}

// ListAdminAuditLogs mocks base method.
func (m *MockClient) ListAdminAuditLogs(ctx context.Context, in *auditlog.ListAdminAuditLogsRequest, opts ...grpc.CallOption) (*auditlog.ListAdminAuditLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAdminAuditLogs", varargs...)
	ret0, _ := ret[0].(*auditlog.ListAdminAuditLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdminAuditLogs indicates an expected call of ListAdminAuditLogs.
func (mr *MockClientMockRecorder) ListAdminAuditLogs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdminAuditLogs", reflect.TypeOf((*MockClient)(nil).ListAdminAuditLogs), varargs...)
}

// ListAuditLogs mocks base method.
func (m *MockClient) ListAuditLogs(ctx context.Context, in *auditlog.ListAuditLogsRequest, opts ...grpc.CallOption) (*auditlog.ListAuditLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuditLogs", varargs...)
	ret0, _ := ret[0].(*auditlog.ListAuditLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockClientMockRecorder) ListAuditLogs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockClient)(nil).ListAuditLogs), varargs...)
}

// ListFeatureHistory mocks base method.
func (m *MockClient) ListFeatureHistory(ctx context.Context, in *auditlog.ListFeatureHistoryRequest, opts ...grpc.CallOption) (*auditlog.ListFeatureHistoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFeatureHistory", varargs...)
	ret0, _ := ret[0].(*auditlog.ListFeatureHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeatureHistory indicates an expected call of ListFeatureHistory.
func (mr *MockClientMockRecorder) ListFeatureHistory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatureHistory", reflect.TypeOf((*MockClient)(nil).ListFeatureHistory), varargs...)
}
