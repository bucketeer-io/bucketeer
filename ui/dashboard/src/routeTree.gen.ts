/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
import { createFileRoute } from '@tanstack/react-router';
// Import Routes
import { Route as rootRoute } from './routes/__root';
import { Route as DefaultLayoutImport } from './routes/_default-layout';
import { Route as DefaultLayoutEnvenvImport } from './routes/_default-layout/$env/__env';
import { Route as DefaultLayoutEnvFeaturesCloneFeatureIdImport } from './routes/_default-layout/$env/features/clone.$featureId';
import { Route as DefaultLayoutEnvFeaturesIndexImport } from './routes/_default-layout/$env/features/index';
import { Route as DefaultLayoutEnvFeaturesNewImport } from './routes/_default-layout/$env/features/new';
import { Route as DefaultLayoutEnvIndexImport } from './routes/_default-layout/$env/index';
import { Route as DefaultLayoutEnvSettingsImport } from './routes/_default-layout/$env/settings';
import { Route as AuthCallbackImport } from './routes/auth.callback';
import { Route as IndexImport } from './routes/index';

// Create Virtual Routes

const DefaultLayoutEnvImport = createFileRoute('/_default-layout/$env')();

// Create/Update Routes

const DefaultLayoutRoute = DefaultLayoutImport.update({
  id: '/_default-layout',
  getParentRoute: () => rootRoute
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute
} as any);

const DefaultLayoutEnvRoute = DefaultLayoutEnvImport.update({
  id: '/$env',
  path: '/$env',
  getParentRoute: () => DefaultLayoutRoute
} as any);

const AuthCallbackRoute = AuthCallbackImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRoute
} as any);

const DefaultLayoutEnvIndexRoute = DefaultLayoutEnvIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DefaultLayoutEnvRoute
} as any);

const DefaultLayoutEnvSettingsRoute = DefaultLayoutEnvSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DefaultLayoutEnvRoute
} as any);

const DefaultLayoutEnvenvRoute = DefaultLayoutEnvenvImport.update({
  id: '/__env',
  getParentRoute: () => DefaultLayoutEnvRoute
} as any);

const DefaultLayoutEnvFeaturesIndexRoute =
  DefaultLayoutEnvFeaturesIndexImport.update({
    id: '/features/',
    path: '/features/',
    getParentRoute: () => DefaultLayoutEnvRoute
  } as any);

const DefaultLayoutEnvFeaturesNewRoute =
  DefaultLayoutEnvFeaturesNewImport.update({
    id: '/features/new',
    path: '/features/new',
    getParentRoute: () => DefaultLayoutEnvRoute
  } as any);

const DefaultLayoutEnvFeaturesCloneFeatureIdRoute =
  DefaultLayoutEnvFeaturesCloneFeatureIdImport.update({
    id: '/features/clone/$featureId',
    path: '/features/clone/$featureId',
    getParentRoute: () => DefaultLayoutEnvRoute
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_default-layout': {
      id: '/_default-layout';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof DefaultLayoutImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/callback': {
      id: '/auth/callback';
      path: '/auth/callback';
      fullPath: '/auth/callback';
      preLoaderRoute: typeof AuthCallbackImport;
      parentRoute: typeof rootRoute;
    };
    '/_default-layout/$env': {
      id: '/_default-layout/$env';
      path: '/$env';
      fullPath: '/$env';
      preLoaderRoute: typeof DefaultLayoutEnvImport;
      parentRoute: typeof DefaultLayoutImport;
    };
    '/_default-layout/$env/__env': {
      id: '/_default-layout/$env/__env';
      path: '/$env';
      fullPath: '/$env';
      preLoaderRoute: typeof DefaultLayoutEnvenvImport;
      parentRoute: typeof DefaultLayoutEnvRoute;
    };
    '/_default-layout/$env/settings': {
      id: '/_default-layout/$env/settings';
      path: '/settings';
      fullPath: '/$env/settings';
      preLoaderRoute: typeof DefaultLayoutEnvSettingsImport;
      parentRoute: typeof DefaultLayoutEnvImport;
    };
    '/_default-layout/$env/': {
      id: '/_default-layout/$env/';
      path: '/';
      fullPath: '/$env/';
      preLoaderRoute: typeof DefaultLayoutEnvIndexImport;
      parentRoute: typeof DefaultLayoutEnvImport;
    };
    '/_default-layout/$env/features/new': {
      id: '/_default-layout/$env/features/new';
      path: '/features/new';
      fullPath: '/$env/features/new';
      preLoaderRoute: typeof DefaultLayoutEnvFeaturesNewImport;
      parentRoute: typeof DefaultLayoutEnvImport;
    };
    '/_default-layout/$env/features/': {
      id: '/_default-layout/$env/features/';
      path: '/features';
      fullPath: '/$env/features';
      preLoaderRoute: typeof DefaultLayoutEnvFeaturesIndexImport;
      parentRoute: typeof DefaultLayoutEnvImport;
    };
    '/_default-layout/$env/features/clone/$featureId': {
      id: '/_default-layout/$env/features/clone/$featureId';
      path: '/features/clone/$featureId';
      fullPath: '/$env/features/clone/$featureId';
      preLoaderRoute: typeof DefaultLayoutEnvFeaturesCloneFeatureIdImport;
      parentRoute: typeof DefaultLayoutEnvImport;
    };
  }
}

// Create and export the route tree

interface DefaultLayoutEnvRouteChildren {
  DefaultLayoutEnvenvRoute: typeof DefaultLayoutEnvenvRoute;
  DefaultLayoutEnvSettingsRoute: typeof DefaultLayoutEnvSettingsRoute;
  DefaultLayoutEnvIndexRoute: typeof DefaultLayoutEnvIndexRoute;
  DefaultLayoutEnvFeaturesNewRoute: typeof DefaultLayoutEnvFeaturesNewRoute;
  DefaultLayoutEnvFeaturesIndexRoute: typeof DefaultLayoutEnvFeaturesIndexRoute;
  DefaultLayoutEnvFeaturesCloneFeatureIdRoute: typeof DefaultLayoutEnvFeaturesCloneFeatureIdRoute;
}

const DefaultLayoutEnvRouteChildren: DefaultLayoutEnvRouteChildren = {
  DefaultLayoutEnvenvRoute: DefaultLayoutEnvenvRoute,
  DefaultLayoutEnvSettingsRoute: DefaultLayoutEnvSettingsRoute,
  DefaultLayoutEnvIndexRoute: DefaultLayoutEnvIndexRoute,
  DefaultLayoutEnvFeaturesNewRoute: DefaultLayoutEnvFeaturesNewRoute,
  DefaultLayoutEnvFeaturesIndexRoute: DefaultLayoutEnvFeaturesIndexRoute,
  DefaultLayoutEnvFeaturesCloneFeatureIdRoute:
    DefaultLayoutEnvFeaturesCloneFeatureIdRoute
};

const DefaultLayoutEnvRouteWithChildren =
  DefaultLayoutEnvRoute._addFileChildren(DefaultLayoutEnvRouteChildren);

interface DefaultLayoutRouteChildren {
  DefaultLayoutEnvRoute: typeof DefaultLayoutEnvRouteWithChildren;
}

const DefaultLayoutRouteChildren: DefaultLayoutRouteChildren = {
  DefaultLayoutEnvRoute: DefaultLayoutEnvRouteWithChildren
};

const DefaultLayoutRouteWithChildren = DefaultLayoutRoute._addFileChildren(
  DefaultLayoutRouteChildren
);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof DefaultLayoutRouteWithChildren;
  '/auth/callback': typeof AuthCallbackRoute;
  '/$env': typeof DefaultLayoutEnvenvRoute;
  '/$env/settings': typeof DefaultLayoutEnvSettingsRoute;
  '/$env/': typeof DefaultLayoutEnvIndexRoute;
  '/$env/features/new': typeof DefaultLayoutEnvFeaturesNewRoute;
  '/$env/features': typeof DefaultLayoutEnvFeaturesIndexRoute;
  '/$env/features/clone/$featureId': typeof DefaultLayoutEnvFeaturesCloneFeatureIdRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof DefaultLayoutRouteWithChildren;
  '/auth/callback': typeof AuthCallbackRoute;
  '/$env': typeof DefaultLayoutEnvIndexRoute;
  '/$env/settings': typeof DefaultLayoutEnvSettingsRoute;
  '/$env/features/new': typeof DefaultLayoutEnvFeaturesNewRoute;
  '/$env/features': typeof DefaultLayoutEnvFeaturesIndexRoute;
  '/$env/features/clone/$featureId': typeof DefaultLayoutEnvFeaturesCloneFeatureIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_default-layout': typeof DefaultLayoutRouteWithChildren;
  '/auth/callback': typeof AuthCallbackRoute;
  '/_default-layout/$env': typeof DefaultLayoutEnvRouteWithChildren;
  '/_default-layout/$env/__env': typeof DefaultLayoutEnvenvRoute;
  '/_default-layout/$env/settings': typeof DefaultLayoutEnvSettingsRoute;
  '/_default-layout/$env/': typeof DefaultLayoutEnvIndexRoute;
  '/_default-layout/$env/features/new': typeof DefaultLayoutEnvFeaturesNewRoute;
  '/_default-layout/$env/features/': typeof DefaultLayoutEnvFeaturesIndexRoute;
  '/_default-layout/$env/features/clone/$featureId': typeof DefaultLayoutEnvFeaturesCloneFeatureIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | ''
    | '/auth/callback'
    | '/$env'
    | '/$env/settings'
    | '/$env/'
    | '/$env/features/new'
    | '/$env/features'
    | '/$env/features/clone/$featureId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | ''
    | '/auth/callback'
    | '/$env'
    | '/$env/settings'
    | '/$env/features/new'
    | '/$env/features'
    | '/$env/features/clone/$featureId';
  id:
    | '__root__'
    | '/'
    | '/_default-layout'
    | '/auth/callback'
    | '/_default-layout/$env'
    | '/_default-layout/$env/__env'
    | '/_default-layout/$env/settings'
    | '/_default-layout/$env/'
    | '/_default-layout/$env/features/new'
    | '/_default-layout/$env/features/'
    | '/_default-layout/$env/features/clone/$featureId';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DefaultLayoutRoute: typeof DefaultLayoutRouteWithChildren;
  AuthCallbackRoute: typeof AuthCallbackRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DefaultLayoutRoute: DefaultLayoutRouteWithChildren,
  AuthCallbackRoute: AuthCallbackRoute
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_default-layout",
        "/auth/callback"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_default-layout": {
      "filePath": "_default-layout.tsx",
      "children": [
        "/_default-layout/$env"
      ]
    },
    "/auth/callback": {
      "filePath": "auth.callback.tsx"
    },
    "/_default-layout/$env": {
      "filePath": "_default-layout/$env",
      "parent": "/_default-layout",
      "children": [
        "/_default-layout/$env/__env",
        "/_default-layout/$env/settings",
        "/_default-layout/$env/",
        "/_default-layout/$env/features/new",
        "/_default-layout/$env/features/",
        "/_default-layout/$env/features/clone/$featureId"
      ]
    },
    "/_default-layout/$env/__env": {
      "filePath": "_default-layout/$env/__env.tsx",
      "parent": "/_default-layout/$env"
    },
    "/_default-layout/$env/settings": {
      "filePath": "_default-layout/$env/settings.tsx",
      "parent": "/_default-layout/$env"
    },
    "/_default-layout/$env/": {
      "filePath": "_default-layout/$env/index.tsx",
      "parent": "/_default-layout/$env"
    },
    "/_default-layout/$env/features/new": {
      "filePath": "_default-layout/$env/features/new.tsx",
      "parent": "/_default-layout/$env"
    },
    "/_default-layout/$env/features/": {
      "filePath": "_default-layout/$env/features/index.tsx",
      "parent": "/_default-layout/$env"
    },
    "/_default-layout/$env/features/clone/$featureId": {
      "filePath": "_default-layout/$env/features/clone.$featureId.tsx",
      "parent": "/_default-layout/$env"
    }
  }
}
ROUTE_MANIFEST_END */
