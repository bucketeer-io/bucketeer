// Code generated by MockGen. DO NOT EDIT.
// Source: goal_event.go
//
// Generated by this command:
//
//	mockgen -source=goal_event.go -package=mock -destination=./mock/goal_event.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	v2 "github.com/bucketeer-io/bucketeer/pkg/subscriber/storage/v2"
)

// MockGoalEventStorageV2 is a mock of GoalEventStorageV2 interface.
type MockGoalEventStorageV2 struct {
	ctrl     *gomock.Controller
	recorder *MockGoalEventStorageV2MockRecorder
}

// MockGoalEventStorageV2MockRecorder is the mock recorder for MockGoalEventStorageV2.
type MockGoalEventStorageV2MockRecorder struct {
	mock *MockGoalEventStorageV2
}

// NewMockGoalEventStorageV2 creates a new mock instance.
func NewMockGoalEventStorageV2(ctrl *gomock.Controller) *MockGoalEventStorageV2 {
	mock := &MockGoalEventStorageV2{ctrl: ctrl}
	mock.recorder = &MockGoalEventStorageV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoalEventStorageV2) EXPECT() *MockGoalEventStorageV2MockRecorder {
	return m.recorder
}

// CreateGoalEvents mocks base method.
func (m *MockGoalEventStorageV2) CreateGoalEvents(ctx context.Context, events []v2.GoalEventParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGoalEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGoalEvents indicates an expected call of CreateGoalEvents.
func (mr *MockGoalEventStorageV2MockRecorder) CreateGoalEvents(ctx, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGoalEvents", reflect.TypeOf((*MockGoalEventStorageV2)(nil).CreateGoalEvents), ctx, events)
}
