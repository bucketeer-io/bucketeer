// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -package=mock -destination=./mock/storage.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	domain "github.com/bucketeer-io/bucketeer/pkg/auth/domain"
)

// MockCredentialsStorage is a mock of CredentialsStorage interface.
type MockCredentialsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsStorageMockRecorder
}

// MockCredentialsStorageMockRecorder is the mock recorder for MockCredentialsStorage.
type MockCredentialsStorageMockRecorder struct {
	mock *MockCredentialsStorage
}

// NewMockCredentialsStorage creates a new mock instance.
func NewMockCredentialsStorage(ctrl *gomock.Controller) *MockCredentialsStorage {
	mock := &MockCredentialsStorage{ctrl: ctrl}
	mock.recorder = &MockCredentialsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialsStorage) EXPECT() *MockCredentialsStorageMockRecorder {
	return m.recorder
}

// CreateCredentials mocks base method.
func (m *MockCredentialsStorage) CreateCredentials(ctx context.Context, email, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentials", ctx, email, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCredentials indicates an expected call of CreateCredentials.
func (mr *MockCredentialsStorageMockRecorder) CreateCredentials(ctx, email, passwordHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentials", reflect.TypeOf((*MockCredentialsStorage)(nil).CreateCredentials), ctx, email, passwordHash)
}

// DeleteCredentials mocks base method.
func (m *MockCredentialsStorage) DeleteCredentials(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockCredentialsStorageMockRecorder) DeleteCredentials(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockCredentialsStorage)(nil).DeleteCredentials), ctx, email)
}

// DeletePasswordResetToken mocks base method.
func (m *MockCredentialsStorage) DeletePasswordResetToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasswordResetToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasswordResetToken indicates an expected call of DeletePasswordResetToken.
func (mr *MockCredentialsStorageMockRecorder) DeletePasswordResetToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasswordResetToken", reflect.TypeOf((*MockCredentialsStorage)(nil).DeletePasswordResetToken), ctx, token)
}

// GetCredentials mocks base method.
func (m *MockCredentialsStorage) GetCredentials(ctx context.Context, email string) (*domain.AccountCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", ctx, email)
	ret0, _ := ret[0].(*domain.AccountCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialsStorageMockRecorder) GetCredentials(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentialsStorage)(nil).GetCredentials), ctx, email)
}

// GetPasswordResetToken mocks base method.
func (m *MockCredentialsStorage) GetPasswordResetToken(ctx context.Context, token string) (*domain.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordResetToken", ctx, token)
	ret0, _ := ret[0].(*domain.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordResetToken indicates an expected call of GetPasswordResetToken.
func (mr *MockCredentialsStorageMockRecorder) GetPasswordResetToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordResetToken", reflect.TypeOf((*MockCredentialsStorage)(nil).GetPasswordResetToken), ctx, token)
}

// SetPasswordResetToken mocks base method.
func (m *MockCredentialsStorage) SetPasswordResetToken(ctx context.Context, email, token string, expiresAt int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPasswordResetToken", ctx, email, token, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPasswordResetToken indicates an expected call of SetPasswordResetToken.
func (mr *MockCredentialsStorageMockRecorder) SetPasswordResetToken(ctx, email, token, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPasswordResetToken", reflect.TypeOf((*MockCredentialsStorage)(nil).SetPasswordResetToken), ctx, email, token, expiresAt)
}

// UpdatePassword mocks base method.
func (m *MockCredentialsStorage) UpdatePassword(ctx context.Context, email, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, email, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockCredentialsStorageMockRecorder) UpdatePassword(ctx, email, passwordHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockCredentialsStorage)(nil).UpdatePassword), ctx, email, passwordHash)
}
