fullnameOverride: "web-gateway"

namespace:

tls:
  bucketeerJP:
    secret:
    cert:
    key:
  service:
    secret:
    cert:
    key:

envoy:
  image:
    repository: envoyproxy/envoy-alpine
    tag: v1.21.1
    pullPolicy: IfNotPresent
  serviceCluster: bucketeer
  adminPort: 8001
  accountDescriptor: ""
  auditlogDescriptor: ""
  authDescriptor: "CsECChZwcm90by9hdXRoL3Rva2VuLnByb3RvEg5idWNrZXRlZXIuYXV0aCKhAQoFVG9rZW4SIQoMYWNjZXNzX3Rva2VuGAEgASgJUgthY2Nlc3NUb2tlbhIdCgp0b2tlbl90eXBlGAIgASgJUgl0b2tlblR5cGUSIwoNcmVmcmVzaF90b2tlbhgDIAEoCVIMcmVmcmVzaFRva2VuEhYKBmV4cGlyeRgEIAEoA1IGZXhwaXJ5EhkKCGlkX3Rva2VuGAUgASgJUgdpZFRva2VuIkIKDklEVG9rZW5TdWJqZWN0EhcKB3VzZXJfaWQYASABKAlSBnVzZXJJZBIXCgdjb25uX2lkGAIgASgJUgZjb25uSWRCJ1olZ2l0aHViLmNvbS9jYS1kcC9idWNrZXRlZXIvcHJvdG8vYXV0aGIGcHJvdG8zCtQGChhwcm90by9hdXRoL3NlcnZpY2UucHJvdG8SDmJ1Y2tldGVlci5hdXRoGhZwcm90by9hdXRoL3Rva2VuLnByb3RvIlAKFUdldEF1dGhDb2RlVVJMUmVxdWVzdBIUCgVzdGF0ZRgBIAEoCVIFc3RhdGUSIQoMcmVkaXJlY3RfdXJsGAIgASgJUgtyZWRpcmVjdFVybCIqChZHZXRBdXRoQ29kZVVSTFJlc3BvbnNlEhAKA3VybBgBIAEoCVIDdXJsIk0KFEV4Y2hhbmdlVG9rZW5SZXF1ZXN0EhIKBGNvZGUYASABKAlSBGNvZGUSIQoMcmVkaXJlY3RfdXJsGAIgASgJUgtyZWRpcmVjdFVybCJEChVFeGNoYW5nZVRva2VuUmVzcG9uc2USKwoFdG9rZW4YASABKAsyFS5idWNrZXRlZXIuYXV0aC5Ub2tlblIFdG9rZW4iXQoTUmVmcmVzaFRva2VuUmVxdWVzdBIjCg1yZWZyZXNoX3Rva2VuGAEgASgJUgxyZWZyZXNoVG9rZW4SIQoMcmVkaXJlY3RfdXJsGAIgASgJUgtyZWRpcmVjdFVybCJDChRSZWZyZXNoVG9rZW5SZXNwb25zZRIrCgV0b2tlbhgBIAEoCzIVLmJ1Y2tldGVlci5hdXRoLlRva2VuUgV0b2tlbjKnAgoLQXV0aFNlcnZpY2USXwoOR2V0QXV0aENvZGVVUkwSJS5idWNrZXRlZXIuYXV0aC5HZXRBdXRoQ29kZVVSTFJlcXVlc3QaJi5idWNrZXRlZXIuYXV0aC5HZXRBdXRoQ29kZVVSTFJlc3BvbnNlElwKDUV4Y2hhbmdlVG9rZW4SJC5idWNrZXRlZXIuYXV0aC5FeGNoYW5nZVRva2VuUmVxdWVzdBolLmJ1Y2tldGVlci5hdXRoLkV4Y2hhbmdlVG9rZW5SZXNwb25zZRJZCgxSZWZyZXNoVG9rZW4SIy5idWNrZXRlZXIuYXV0aC5SZWZyZXNoVG9rZW5SZXF1ZXN0GiQuYnVja2V0ZWVyLmF1dGguUmVmcmVzaFRva2VuUmVzcG9uc2VCJ1olZ2l0aHViLmNvbS9jYS1kcC9idWNrZXRlZXIvcHJvdG8vYXV0aGIGcHJvdG8z"
  autoopsDescriptor: ""
  environmentDescriptor: ""
  eventcounterDescriptor: ""
  experimentDescriptor: ""
  featureDescriptor: ""
  migrationDescriptor: "CqUECiNwcm90by9taWdyYXRpb24vbXlzcWxfc2VydmljZS5wcm90bxITYnVja2V0ZWVyLm1pZ3JhdGlvbiIfCh1NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVxdWVzdCIgCh5NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVzcG9uc2UiMQobUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXF1ZXN0EhIKBHN0ZXAYASABKANSBHN0ZXAiHgocUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXNwb25zZTKcAgoVTWlncmF0aW9uTXlTUUxTZXJ2aWNlEoMBChZNaWdyYXRlQWxsTWFzdGVyU2NoZW1hEjIuYnVja2V0ZWVyLm1pZ3JhdGlvbi5NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVxdWVzdBozLmJ1Y2tldGVlci5taWdyYXRpb24uTWlncmF0ZUFsbE1hc3RlclNjaGVtYVJlc3BvbnNlIgASfQoUUm9sbGJhY2tNYXN0ZXJTY2hlbWESMC5idWNrZXRlZXIubWlncmF0aW9uLlJvbGxiYWNrTWFzdGVyU2NoZW1hUmVxdWVzdBoxLmJ1Y2tldGVlci5taWdyYXRpb24uUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXNwb25zZSIAQixaKmdpdGh1Yi5jb20vY2EtZHAvYnVja2V0ZWVyL3Byb3RvL21pZ3JhdGlvbmIGcHJvdG8z"
  notificationDescriptor: "CoYECh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8SD2dvb2dsZS5wcm90b2J1ZiIjCgtEb3VibGVWYWx1ZRIUCgV2YWx1ZRgBIAEoAVIFdmFsdWUiIgoKRmxvYXRWYWx1ZRIUCgV2YWx1ZRgBIAEoAlIFdmFsdWUiIgoKSW50NjRWYWx1ZRIUCgV2YWx1ZRgBIAEoA1IFdmFsdWUiIwoLVUludDY0VmFsdWUSFAoFdmFsdWUYASABKARSBXZhbHVlIiIKCkludDMyVmFsdWUSFAoFdmFsdWUYASABKAVSBXZhbHVlIiMKC1VJbnQzMlZhbHVlEhQKBXZhbHVlGAEgASgNUgV2YWx1ZSIhCglCb29sVmFsdWUSFAoFdmFsdWUYASABKAhSBXZhbHVlIiMKC1N0cmluZ1ZhbHVlEhQKBXZhbHVlGAEgASgJUgV2YWx1ZSIiCgpCeXRlc1ZhbHVlEhQKBXZhbHVlGAEgASgMUgV2YWx1ZUKDAQoTY29tLmdvb2dsZS5wcm90b2J1ZkINV3JhcHBlcnNQcm90b1ABWjFnb29nbGUuZ29sYW5nLm9yZy9wcm90b2J1Zi90eXBlcy9rbm93bi93cmFwcGVyc3Bi+AEBogIDR1BCqgIeR29vZ2xlLlByb3RvYnVmLldlbGxLbm93blR5cGVzYgZwcm90bzMK+gIKInByb3RvL25vdGlmaWNhdGlvbi9yZWNpcGllbnQucHJvdG8SFmJ1Y2tldGVlci5ub3RpZmljYXRpb24iyAEKCVJlY2lwaWVudBI6CgR0eXBlGAEgASgOMiYuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5SZWNpcGllbnQuVHlwZVIEdHlwZRJlChdzbGFja19jaGFubmVsX3JlY2lwaWVudBgCIAEoCzItLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU2xhY2tDaGFubmVsUmVjaXBpZW50UhVzbGFja0NoYW5uZWxSZWNpcGllbnQiGAoEVHlwZRIQCgxTbGFja0NoYW5uZWwQACI4ChVTbGFja0NoYW5uZWxSZWNpcGllbnQSHwoLd2ViaG9va191cmwYASABKAlSCndlYmhvb2tVcmxCL1otZ2l0aHViLmNvbS9jYS1kcC9idWNrZXRlZXIvcHJvdG8vbm90aWZpY2F0aW9uYgZwcm90bzMKkgcKJXByb3RvL25vdGlmaWNhdGlvbi9zdWJzY3JpcHRpb24ucHJvdG8SFmJ1Y2tldGVlci5ub3RpZmljYXRpb24aInByb3RvL25vdGlmaWNhdGlvbi9yZWNpcGllbnQucHJvdG8i8wUKDFN1YnNjcmlwdGlvbhIOCgJpZBgBIAEoCVICaWQSHQoKY3JlYXRlZF9hdBgCIAEoA1IJY3JlYXRlZEF0Eh0KCnVwZGF0ZWRfYXQYAyABKANSCXVwZGF0ZWRBdBIaCghkaXNhYmxlZBgEIAEoCFIIZGlzYWJsZWQSUgoMc291cmNlX3R5cGVzGAUgAygOMi8uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb24uU291cmNlVHlwZVILc291cmNlVHlwZXMSPwoJcmVjaXBpZW50GAYgASgLMiEuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5SZWNpcGllbnRSCXJlY2lwaWVudBISCgRuYW1lGAcgASgJUgRuYW1lIs8DCgpTb3VyY2VUeXBlEhgKFERPTUFJTl9FVkVOVF9GRUFUVVJFEAASFQoRRE9NQUlOX0VWRU5UX0dPQUwQARIbChdET01BSU5fRVZFTlRfRVhQRVJJTUVOVBACEhgKFERPTUFJTl9FVkVOVF9BQ0NPVU5UEAMSFwoTRE9NQUlOX0VWRU5UX0FQSUtFWRAEEhgKFERPTUFJTl9FVkVOVF9TRUdNRU5UEAUSHAoYRE9NQUlOX0VWRU5UX0VOVklST05NRU5UEAYSHgoaRE9NQUlOX0VWRU5UX0FETUlOX0FDQ09VTlQQBxIdChlET01BSU5fRVZFTlRfQVVUT09QU19SVUxFEAgSFQoRRE9NQUlOX0VWRU5UX1BVU0gQCRIdChlET01BSU5fRVZFTlRfU1VCU0NSSVBUSU9OEAoSIwofRE9NQUlOX0VWRU5UX0FETUlOX1NVQlNDUklQVElPThALEhgKFERPTUFJTl9FVkVOVF9QUk9KRUNUEAwSGAoURE9NQUlOX0VWRU5UX1dFQkhPT0sQDRIRCg1GRUFUVVJFX1NUQUxFEGQSFwoSRVhQRVJJTUVOVF9SVU5OSU5HEMgBEg4KCU1BVV9DT1VOVBCsAkIvWi1naXRodWIuY29tL2NhLWRwL2J1Y2tldGVlci9wcm90by9ub3RpZmljYXRpb25iBnByb3RvMwrTCgogcHJvdG8vbm90aWZpY2F0aW9uL2NvbW1hbmQucHJvdG8SFmJ1Y2tldGVlci5ub3RpZmljYXRpb24aJXByb3RvL25vdGlmaWNhdGlvbi9zdWJzY3JpcHRpb24ucHJvdG8aInByb3RvL25vdGlmaWNhdGlvbi9yZWNpcGllbnQucHJvdG8iyQEKHkNyZWF0ZUFkbWluU3Vic2NyaXB0aW9uQ29tbWFuZBJSCgxzb3VyY2VfdHlwZXMYASADKA4yLy5idWNrZXRlZXIubm90aWZpY2F0aW9uLlN1YnNjcmlwdGlvbi5Tb3VyY2VUeXBlUgtzb3VyY2VUeXBlcxI/CglyZWNpcGllbnQYAiABKAsyIS5idWNrZXRlZXIubm90aWZpY2F0aW9uLlJlY2lwaWVudFIJcmVjaXBpZW50EhIKBG5hbWUYAyABKAlSBG5hbWUifAomQWRkQWRtaW5TdWJzY3JpcHRpb25Tb3VyY2VUeXBlc0NvbW1hbmQSUgoMc291cmNlX3R5cGVzGAEgAygOMi8uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb24uU291cmNlVHlwZVILc291cmNlVHlwZXMifwopRGVsZXRlQWRtaW5TdWJzY3JpcHRpb25Tb3VyY2VUeXBlc0NvbW1hbmQSUgoMc291cmNlX3R5cGVzGAEgAygOMi8uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb24uU291cmNlVHlwZVILc291cmNlVHlwZXMiIAoeRW5hYmxlQWRtaW5TdWJzY3JpcHRpb25Db21tYW5kIiEKH0Rpc2FibGVBZG1pblN1YnNjcmlwdGlvbkNvbW1hbmQiIAoeRGVsZXRlQWRtaW5TdWJzY3JpcHRpb25Db21tYW5kIjQKHlJlbmFtZUFkbWluU3Vic2NyaXB0aW9uQ29tbWFuZBISCgRuYW1lGAEgASgJUgRuYW1lIsQBChlDcmVhdGVTdWJzY3JpcHRpb25Db21tYW5kElIKDHNvdXJjZV90eXBlcxgBIAMoDjIvLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uLlNvdXJjZVR5cGVSC3NvdXJjZVR5cGVzEj8KCXJlY2lwaWVudBgCIAEoCzIhLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uUmVjaXBpZW50UglyZWNpcGllbnQSEgoEbmFtZRgDIAEoCVIEbmFtZSJrChVBZGRTb3VyY2VUeXBlc0NvbW1hbmQSUgoMc291cmNlX3R5cGVzGAEgAygOMi8uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb24uU291cmNlVHlwZVILc291cmNlVHlwZXMibgoYRGVsZXRlU291cmNlVHlwZXNDb21tYW5kElIKDHNvdXJjZV90eXBlcxgBIAMoDjIvLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uLlNvdXJjZVR5cGVSC3NvdXJjZVR5cGVzIhsKGUVuYWJsZVN1YnNjcmlwdGlvbkNvbW1hbmQiHAoaRGlzYWJsZVN1YnNjcmlwdGlvbkNvbW1hbmQiGwoZRGVsZXRlU3Vic2NyaXB0aW9uQ29tbWFuZCIvChlSZW5hbWVTdWJzY3JpcHRpb25Db21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWVCL1otZ2l0aHViLmNvbS9jYS1kcC9idWNrZXRlZXIvcHJvdG8vbm90aWZpY2F0aW9uYgZwcm90bzMKuTkKIHByb3RvL25vdGlmaWNhdGlvbi9zZXJ2aWNlLnByb3RvEhZidWNrZXRlZXIubm90aWZpY2F0aW9uGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aJXByb3RvL25vdGlmaWNhdGlvbi9zdWJzY3JpcHRpb24ucHJvdG8aIHByb3RvL25vdGlmaWNhdGlvbi9jb21tYW5kLnByb3RvIi0KG0dldEFkbWluU3Vic2NyaXB0aW9uUmVxdWVzdBIOCgJpZBgBIAEoCVICaWQiaAocR2V0QWRtaW5TdWJzY3JpcHRpb25SZXNwb25zZRJICgxzdWJzY3JpcHRpb24YASABKAsyJC5idWNrZXRlZXIubm90aWZpY2F0aW9uLlN1YnNjcmlwdGlvblIMc3Vic2NyaXB0aW9uIrcECh1MaXN0QWRtaW5TdWJzY3JpcHRpb25zUmVxdWVzdBIbCglwYWdlX3NpemUYASABKANSCHBhZ2VTaXplEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yElIKDHNvdXJjZV90eXBlcxgDIAMoDjIvLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uLlNvdXJjZVR5cGVSC3NvdXJjZVR5cGVzElgKCG9yZGVyX2J5GAQgASgOMj0uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5MaXN0QWRtaW5TdWJzY3JpcHRpb25zUmVxdWVzdC5PcmRlckJ5UgdvcmRlckJ5Em0KD29yZGVyX2RpcmVjdGlvbhgFIAEoDjJELmJ1Y2tldGVlci5ub3RpZmljYXRpb24uTGlzdEFkbWluU3Vic2NyaXB0aW9uc1JlcXVlc3QuT3JkZXJEaXJlY3Rpb25SDm9yZGVyRGlyZWN0aW9uEiUKDnNlYXJjaF9rZXl3b3JkGAYgASgJUg1zZWFyY2hLZXl3b3JkEjYKCGRpc2FibGVkGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZVIIZGlzYWJsZWQiQAoHT3JkZXJCeRILCgdERUZBVUxUEAASCAoETkFNRRABEg4KCkNSRUFURURfQVQQAhIOCgpVUERBVEVEX0FUEAMiIwoOT3JkZXJEaXJlY3Rpb24SBwoDQVNDEAASCAoEREVTQxABIqUBCh5MaXN0QWRtaW5TdWJzY3JpcHRpb25zUmVzcG9uc2USSgoNc3Vic2NyaXB0aW9ucxgBIAMoCzIkLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uUg1zdWJzY3JpcHRpb25zEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEh8KC3RvdGFsX2NvdW50GAMgASgDUgp0b3RhbENvdW50Iq8BCiRMaXN0RW5hYmxlZEFkbWluU3Vic2NyaXB0aW9uc1JlcXVlc3QSGwoJcGFnZV9zaXplGAEgASgDUghwYWdlU2l6ZRIWCgZjdXJzb3IYAiABKAlSBmN1cnNvchJSCgxzb3VyY2VfdHlwZXMYAyADKA4yLy5idWNrZXRlZXIubm90aWZpY2F0aW9uLlN1YnNjcmlwdGlvbi5Tb3VyY2VUeXBlUgtzb3VyY2VUeXBlcyKLAQolTGlzdEVuYWJsZWRBZG1pblN1YnNjcmlwdGlvbnNSZXNwb25zZRJKCg1zdWJzY3JpcHRpb25zGAEgAygLMiQuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb25SDXN1YnNjcmlwdGlvbnMSFgoGY3Vyc29yGAIgASgJUgZjdXJzb3IicgoeQ3JlYXRlQWRtaW5TdWJzY3JpcHRpb25SZXF1ZXN0ElAKB2NvbW1hbmQYASABKAsyNi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkNyZWF0ZUFkbWluU3Vic2NyaXB0aW9uQ29tbWFuZFIHY29tbWFuZCIhCh9DcmVhdGVBZG1pblN1YnNjcmlwdGlvblJlc3BvbnNlIoIBCh5EZWxldGVBZG1pblN1YnNjcmlwdGlvblJlcXVlc3QSDgoCaWQYASABKAlSAmlkElAKB2NvbW1hbmQYAiABKAsyNi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRlbGV0ZUFkbWluU3Vic2NyaXB0aW9uQ29tbWFuZFIHY29tbWFuZCIhCh9EZWxldGVBZG1pblN1YnNjcmlwdGlvblJlc3BvbnNlIoIBCh5FbmFibGVBZG1pblN1YnNjcmlwdGlvblJlcXVlc3QSDgoCaWQYASABKAlSAmlkElAKB2NvbW1hbmQYAiABKAsyNi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkVuYWJsZUFkbWluU3Vic2NyaXB0aW9uQ29tbWFuZFIHY29tbWFuZCIhCh9FbmFibGVBZG1pblN1YnNjcmlwdGlvblJlc3BvbnNlIoQBCh9EaXNhYmxlQWRtaW5TdWJzY3JpcHRpb25SZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZBJRCgdjb21tYW5kGAIgASgLMjcuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5EaXNhYmxlQWRtaW5TdWJzY3JpcHRpb25Db21tYW5kUgdjb21tYW5kIiIKIERpc2FibGVBZG1pblN1YnNjcmlwdGlvblJlc3BvbnNlIqQDCh5VcGRhdGVBZG1pblN1YnNjcmlwdGlvblJlcXVlc3QSDgoCaWQYASABKAlSAmlkEncKGGFkZF9zb3VyY2VfdHlwZXNfY29tbWFuZBgCIAEoCzI+LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uQWRkQWRtaW5TdWJzY3JpcHRpb25Tb3VyY2VUeXBlc0NvbW1hbmRSFWFkZFNvdXJjZVR5cGVzQ29tbWFuZBKAAQobZGVsZXRlX3NvdXJjZV90eXBlc19jb21tYW5kGAMgASgLMkEuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5EZWxldGVBZG1pblN1YnNjcmlwdGlvblNvdXJjZVR5cGVzQ29tbWFuZFIYZGVsZXRlU291cmNlVHlwZXNDb21tYW5kEnYKG3JlbmFtZV9zdWJzY3JpcHRpb25fY29tbWFuZBgEIAEoCzI2LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uUmVuYW1lQWRtaW5TdWJzY3JpcHRpb25Db21tYW5kUhlyZW5hbWVTdWJzY3JpcHRpb25Db21tYW5kIiEKH1VwZGF0ZUFkbWluU3Vic2NyaXB0aW9uUmVzcG9uc2UiXQoWR2V0U3Vic2NyaXB0aW9uUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEg4KAmlkGAIgASgJUgJpZCJjChdHZXRTdWJzY3JpcHRpb25SZXNwb25zZRJICgxzdWJzY3JpcHRpb24YASABKAsyJC5idWNrZXRlZXIubm90aWZpY2F0aW9uLlN1YnNjcmlwdGlvblIMc3Vic2NyaXB0aW9uIt0EChhMaXN0U3Vic2NyaXB0aW9uc1JlcXVlc3QSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRIbCglwYWdlX3NpemUYAiABKANSCHBhZ2VTaXplEhYKBmN1cnNvchgDIAEoCVIGY3Vyc29yElIKDHNvdXJjZV90eXBlcxgEIAMoDjIvLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uLlNvdXJjZVR5cGVSC3NvdXJjZVR5cGVzElMKCG9yZGVyX2J5GAUgASgOMjguYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5MaXN0U3Vic2NyaXB0aW9uc1JlcXVlc3QuT3JkZXJCeVIHb3JkZXJCeRJoCg9vcmRlcl9kaXJlY3Rpb24YBiABKA4yPy5idWNrZXRlZXIubm90aWZpY2F0aW9uLkxpc3RTdWJzY3JpcHRpb25zUmVxdWVzdC5PcmRlckRpcmVjdGlvblIOb3JkZXJEaXJlY3Rpb24SJQoOc2VhcmNoX2tleXdvcmQYByABKAlSDXNlYXJjaEtleXdvcmQSNgoIZGlzYWJsZWQYCCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlUghkaXNhYmxlZCJACgdPcmRlckJ5EgsKB0RFRkFVTFQQABIICgROQU1FEAESDgoKQ1JFQVRFRF9BVBACEg4KClVQREFURURfQVQQAyIjCg5PcmRlckRpcmVjdGlvbhIHCgNBU0MQABIICgRERVNDEAEioAEKGUxpc3RTdWJzY3JpcHRpb25zUmVzcG9uc2USSgoNc3Vic2NyaXB0aW9ucxgBIAMoCzIkLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uUg1zdWJzY3JpcHRpb25zEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEh8KC3RvdGFsX2NvdW50GAMgASgDUgp0b3RhbENvdW50It8BCh9MaXN0RW5hYmxlZFN1YnNjcmlwdGlvbnNSZXF1ZXN0EjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgBIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USGwoJcGFnZV9zaXplGAIgASgDUghwYWdlU2l6ZRIWCgZjdXJzb3IYAyABKAlSBmN1cnNvchJSCgxzb3VyY2VfdHlwZXMYBCADKA4yLy5idWNrZXRlZXIubm90aWZpY2F0aW9uLlN1YnNjcmlwdGlvbi5Tb3VyY2VUeXBlUgtzb3VyY2VUeXBlcyKGAQogTGlzdEVuYWJsZWRTdWJzY3JpcHRpb25zUmVzcG9uc2USSgoNc3Vic2NyaXB0aW9ucxgBIAMoCzIkLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uUg1zdWJzY3JpcHRpb25zEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yIp0BChlDcmVhdGVTdWJzY3JpcHRpb25SZXF1ZXN0EjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgBIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USSwoHY29tbWFuZBgCIAEoCzIxLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uQ3JlYXRlU3Vic2NyaXB0aW9uQ29tbWFuZFIHY29tbWFuZCIcChpDcmVhdGVTdWJzY3JpcHRpb25SZXNwb25zZSKtAQoZRGVsZXRlU3Vic2NyaXB0aW9uUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEg4KAmlkGAIgASgJUgJpZBJLCgdjb21tYW5kGAMgASgLMjEuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5EZWxldGVTdWJzY3JpcHRpb25Db21tYW5kUgdjb21tYW5kIhwKGkRlbGV0ZVN1YnNjcmlwdGlvblJlc3BvbnNlIq0BChlFbmFibGVTdWJzY3JpcHRpb25SZXF1ZXN0EjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgBIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USDgoCaWQYAiABKAlSAmlkEksKB2NvbW1hbmQYAyABKAsyMS5idWNrZXRlZXIubm90aWZpY2F0aW9uLkVuYWJsZVN1YnNjcmlwdGlvbkNvbW1hbmRSB2NvbW1hbmQiHAoaRW5hYmxlU3Vic2NyaXB0aW9uUmVzcG9uc2UirwEKGkRpc2FibGVTdWJzY3JpcHRpb25SZXF1ZXN0EjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgBIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USDgoCaWQYAiABKAlSAmlkEkwKB2NvbW1hbmQYAyABKAsyMi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRpc2FibGVTdWJzY3JpcHRpb25Db21tYW5kUgdjb21tYW5kIh0KG0Rpc2FibGVTdWJzY3JpcHRpb25SZXNwb25zZSKsAwoZVXBkYXRlU3Vic2NyaXB0aW9uUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEg4KAmlkGAIgASgJUgJpZBJmChhhZGRfc291cmNlX3R5cGVzX2NvbW1hbmQYAyABKAsyLS5idWNrZXRlZXIubm90aWZpY2F0aW9uLkFkZFNvdXJjZVR5cGVzQ29tbWFuZFIVYWRkU291cmNlVHlwZXNDb21tYW5kEm8KG2RlbGV0ZV9zb3VyY2VfdHlwZXNfY29tbWFuZBgEIAEoCzIwLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRGVsZXRlU291cmNlVHlwZXNDb21tYW5kUhhkZWxldGVTb3VyY2VUeXBlc0NvbW1hbmQScQobcmVuYW1lX3N1YnNjcmlwdGlvbl9jb21tYW5kGAUgASgLMjEuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5SZW5hbWVTdWJzY3JpcHRpb25Db21tYW5kUhlyZW5hbWVTdWJzY3JpcHRpb25Db21tYW5kIhwKGlVwZGF0ZVN1YnNjcmlwdGlvblJlc3BvbnNlMpkRChNOb3RpZmljYXRpb25TZXJ2aWNlEoMBChRHZXRBZG1pblN1YnNjcmlwdGlvbhIzLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uR2V0QWRtaW5TdWJzY3JpcHRpb25SZXF1ZXN0GjQuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5HZXRBZG1pblN1YnNjcmlwdGlvblJlc3BvbnNlIgASiQEKFkxpc3RBZG1pblN1YnNjcmlwdGlvbnMSNS5idWNrZXRlZXIubm90aWZpY2F0aW9uLkxpc3RBZG1pblN1YnNjcmlwdGlvbnNSZXF1ZXN0GjYuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5MaXN0QWRtaW5TdWJzY3JpcHRpb25zUmVzcG9uc2UiABKeAQodTGlzdEVuYWJsZWRBZG1pblN1YnNjcmlwdGlvbnMSPC5idWNrZXRlZXIubm90aWZpY2F0aW9uLkxpc3RFbmFibGVkQWRtaW5TdWJzY3JpcHRpb25zUmVxdWVzdBo9LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uTGlzdEVuYWJsZWRBZG1pblN1YnNjcmlwdGlvbnNSZXNwb25zZSIAEowBChdDcmVhdGVBZG1pblN1YnNjcmlwdGlvbhI2LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uQ3JlYXRlQWRtaW5TdWJzY3JpcHRpb25SZXF1ZXN0GjcuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5DcmVhdGVBZG1pblN1YnNjcmlwdGlvblJlc3BvbnNlIgASjAEKF0RlbGV0ZUFkbWluU3Vic2NyaXB0aW9uEjYuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5EZWxldGVBZG1pblN1YnNjcmlwdGlvblJlcXVlc3QaNy5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRlbGV0ZUFkbWluU3Vic2NyaXB0aW9uUmVzcG9uc2UiABKMAQoXRW5hYmxlQWRtaW5TdWJzY3JpcHRpb24SNi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkVuYWJsZUFkbWluU3Vic2NyaXB0aW9uUmVxdWVzdBo3LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRW5hYmxlQWRtaW5TdWJzY3JpcHRpb25SZXNwb25zZSIAEo8BChhEaXNhYmxlQWRtaW5TdWJzY3JpcHRpb24SNy5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRpc2FibGVBZG1pblN1YnNjcmlwdGlvblJlcXVlc3QaOC5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRpc2FibGVBZG1pblN1YnNjcmlwdGlvblJlc3BvbnNlIgASjAEKF1VwZGF0ZUFkbWluU3Vic2NyaXB0aW9uEjYuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5VcGRhdGVBZG1pblN1YnNjcmlwdGlvblJlcXVlc3QaNy5idWNrZXRlZXIubm90aWZpY2F0aW9uLlVwZGF0ZUFkbWluU3Vic2NyaXB0aW9uUmVzcG9uc2UiABJ0Cg9HZXRTdWJzY3JpcHRpb24SLi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkdldFN1YnNjcmlwdGlvblJlcXVlc3QaLy5idWNrZXRlZXIubm90aWZpY2F0aW9uLkdldFN1YnNjcmlwdGlvblJlc3BvbnNlIgASegoRTGlzdFN1YnNjcmlwdGlvbnMSMC5idWNrZXRlZXIubm90aWZpY2F0aW9uLkxpc3RTdWJzY3JpcHRpb25zUmVxdWVzdBoxLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uTGlzdFN1YnNjcmlwdGlvbnNSZXNwb25zZSIAEo8BChhMaXN0RW5hYmxlZFN1YnNjcmlwdGlvbnMSNy5idWNrZXRlZXIubm90aWZpY2F0aW9uLkxpc3RFbmFibGVkU3Vic2NyaXB0aW9uc1JlcXVlc3QaOC5idWNrZXRlZXIubm90aWZpY2F0aW9uLkxpc3RFbmFibGVkU3Vic2NyaXB0aW9uc1Jlc3BvbnNlIgASfQoSQ3JlYXRlU3Vic2NyaXB0aW9uEjEuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5DcmVhdGVTdWJzY3JpcHRpb25SZXF1ZXN0GjIuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5DcmVhdGVTdWJzY3JpcHRpb25SZXNwb25zZSIAEn0KEkRlbGV0ZVN1YnNjcmlwdGlvbhIxLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRGVsZXRlU3Vic2NyaXB0aW9uUmVxdWVzdBoyLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRGVsZXRlU3Vic2NyaXB0aW9uUmVzcG9uc2UiABJ9ChJFbmFibGVTdWJzY3JpcHRpb24SMS5idWNrZXRlZXIubm90aWZpY2F0aW9uLkVuYWJsZVN1YnNjcmlwdGlvblJlcXVlc3QaMi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkVuYWJsZVN1YnNjcmlwdGlvblJlc3BvbnNlIgASgAEKE0Rpc2FibGVTdWJzY3JpcHRpb24SMi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRpc2FibGVTdWJzY3JpcHRpb25SZXF1ZXN0GjMuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5EaXNhYmxlU3Vic2NyaXB0aW9uUmVzcG9uc2UiABJ9ChJVcGRhdGVTdWJzY3JpcHRpb24SMS5idWNrZXRlZXIubm90aWZpY2F0aW9uLlVwZGF0ZVN1YnNjcmlwdGlvblJlcXVlc3QaMi5idWNrZXRlZXIubm90aWZpY2F0aW9uLlVwZGF0ZVN1YnNjcmlwdGlvblJlc3BvbnNlIgBCL1otZ2l0aHViLmNvbS9jYS1kcC9idWNrZXRlZXIvcHJvdG8vbm90aWZpY2F0aW9uYgZwcm90bzM="
  pushDescriptor: "CpECChVwcm90by9wdXNoL3B1c2gucHJvdG8SDmJ1Y2tldGVlci5wdXNoIrYBCgRQdXNoEg4KAmlkGAEgASgJUgJpZBIeCgtmY21fYXBpX2tleRgCIAEoCVIJZmNtQXBpS2V5EhIKBHRhZ3MYAyADKAlSBHRhZ3MSGAoHZGVsZXRlZBgEIAEoCFIHZGVsZXRlZBISCgRuYW1lGAUgASgJUgRuYW1lEh0KCmNyZWF0ZWRfYXQYBiABKANSCWNyZWF0ZWRBdBIdCgp1cGRhdGVkX2F0GAcgASgDUgl1cGRhdGVkQXRCJ1olZ2l0aHViLmNvbS9jYS1kcC9idWNrZXRlZXIvcHJvdG8vcHVzaGIGcHJvdG8zCs0CChhwcm90by9wdXNoL2NvbW1hbmQucHJvdG8SDmJ1Y2tldGVlci5wdXNoIlsKEUNyZWF0ZVB1c2hDb21tYW5kEh4KC2ZjbV9hcGlfa2V5GAEgASgJUglmY21BcGlLZXkSEgoEdGFncxgCIAMoCVIEdGFncxISCgRuYW1lGAMgASgJUgRuYW1lIigKEkFkZFB1c2hUYWdzQ29tbWFuZBISCgR0YWdzGAEgAygJUgR0YWdzIisKFURlbGV0ZVB1c2hUYWdzQ29tbWFuZBISCgR0YWdzGAEgAygJUgR0YWdzIhMKEURlbGV0ZVB1c2hDb21tYW5kIicKEVJlbmFtZVB1c2hDb21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWVCJ1olZ2l0aHViLmNvbS9jYS1kcC9idWNrZXRlZXIvcHJvdG8vcHVzaGIGcHJvdG8zCusNChhwcm90by9wdXNoL3NlcnZpY2UucHJvdG8SDmJ1Y2tldGVlci5wdXNoGhVwcm90by9wdXNoL3B1c2gucHJvdG8aGHByb3RvL3B1c2gvY29tbWFuZC5wcm90byKFAQoRQ3JlYXRlUHVzaFJlcXVlc3QSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRI7Cgdjb21tYW5kGAIgASgLMiEuYnVja2V0ZWVyLnB1c2guQ3JlYXRlUHVzaENvbW1hbmRSB2NvbW1hbmQiFAoSQ3JlYXRlUHVzaFJlc3BvbnNlIqwDChFMaXN0UHVzaGVzUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEhsKCXBhZ2Vfc2l6ZRgCIAEoA1IIcGFnZVNpemUSFgoGY3Vyc29yGAMgASgJUgZjdXJzb3ISRAoIb3JkZXJfYnkYBCABKA4yKS5idWNrZXRlZXIucHVzaC5MaXN0UHVzaGVzUmVxdWVzdC5PcmRlckJ5UgdvcmRlckJ5ElkKD29yZGVyX2RpcmVjdGlvbhgFIAEoDjIwLmJ1Y2tldGVlci5wdXNoLkxpc3RQdXNoZXNSZXF1ZXN0Lk9yZGVyRGlyZWN0aW9uUg5vcmRlckRpcmVjdGlvbhIlCg5zZWFyY2hfa2V5d29yZBgGIAEoCVINc2VhcmNoS2V5d29yZCJACgdPcmRlckJ5EgsKB0RFRkFVTFQQABIICgROQU1FEAESDgoKQ1JFQVRFRF9BVBACEg4KClVQREFURURfQVQQAyIjCg5PcmRlckRpcmVjdGlvbhIHCgNBU0MQABIICgRERVNDEAEiewoSTGlzdFB1c2hlc1Jlc3BvbnNlEiwKBnB1c2hlcxgBIAMoCzIULmJ1Y2tldGVlci5wdXNoLlB1c2hSBnB1c2hlcxIWCgZjdXJzb3IYAiABKAlSBmN1cnNvchIfCgt0b3RhbF9jb3VudBgDIAEoA1IKdG90YWxDb3VudCKVAQoRRGVsZXRlUHVzaFJlcXVlc3QSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRIOCgJpZBgCIAEoCVICaWQSOwoHY29tbWFuZBgDIAEoCzIhLmJ1Y2tldGVlci5wdXNoLkRlbGV0ZVB1c2hDb21tYW5kUgdjb21tYW5kIhQKEkRlbGV0ZVB1c2hSZXNwb25zZSLiAgoRVXBkYXRlUHVzaFJlcXVlc3QSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRIOCgJpZBgCIAEoCVICaWQSVQoVYWRkX3B1c2hfdGFnc19jb21tYW5kGAMgASgLMiIuYnVja2V0ZWVyLnB1c2guQWRkUHVzaFRhZ3NDb21tYW5kUhJhZGRQdXNoVGFnc0NvbW1hbmQSXgoYZGVsZXRlX3B1c2hfdGFnc19jb21tYW5kGAQgASgLMiUuYnVja2V0ZWVyLnB1c2guRGVsZXRlUHVzaFRhZ3NDb21tYW5kUhVkZWxldGVQdXNoVGFnc0NvbW1hbmQSUQoTcmVuYW1lX3B1c2hfY29tbWFuZBgFIAEoCzIhLmJ1Y2tldGVlci5wdXNoLlJlbmFtZVB1c2hDb21tYW5kUhFyZW5hbWVQdXNoQ29tbWFuZCIUChJVcGRhdGVQdXNoUmVzcG9uc2Uy6QIKC1B1c2hTZXJ2aWNlElUKCkxpc3RQdXNoZXMSIS5idWNrZXRlZXIucHVzaC5MaXN0UHVzaGVzUmVxdWVzdBoiLmJ1Y2tldGVlci5wdXNoLkxpc3RQdXNoZXNSZXNwb25zZSIAElUKCkNyZWF0ZVB1c2gSIS5idWNrZXRlZXIucHVzaC5DcmVhdGVQdXNoUmVxdWVzdBoiLmJ1Y2tldGVlci5wdXNoLkNyZWF0ZVB1c2hSZXNwb25zZSIAElUKCkRlbGV0ZVB1c2gSIS5idWNrZXRlZXIucHVzaC5EZWxldGVQdXNoUmVxdWVzdBoiLmJ1Y2tldGVlci5wdXNoLkRlbGV0ZVB1c2hSZXNwb25zZSIAElUKClVwZGF0ZVB1c2gSIS5idWNrZXRlZXIucHVzaC5VcGRhdGVQdXNoUmVxdWVzdBoiLmJ1Y2tldGVlci5wdXNoLlVwZGF0ZVB1c2hSZXNwb25zZSIAQidaJWdpdGh1Yi5jb20vY2EtZHAvYnVja2V0ZWVyL3Byb3RvL3B1c2hiBnByb3RvMw=="
  userDescriptor: "CrkEChVwcm90by91c2VyL3VzZXIucHJvdG8SDmJ1Y2tldGVlci51c2VyIt4DCgRVc2VyEg4KAmlkGAEgASgJUgJpZBIyCgRkYXRhGAIgAygLMh4uYnVja2V0ZWVyLnVzZXIuVXNlci5EYXRhRW50cnlSBGRhdGESRQoLdGFnZ2VkX2RhdGEYAyADKAsyJC5idWNrZXRlZXIudXNlci5Vc2VyLlRhZ2dlZERhdGFFbnRyeVIKdGFnZ2VkRGF0YRIbCglsYXN0X3NlZW4YBCABKANSCGxhc3RTZWVuEh0KCmNyZWF0ZWRfYXQYBSABKANSCWNyZWF0ZWRBdBp8CgREYXRhEjoKBXZhbHVlGAEgAygLMiQuYnVja2V0ZWVyLnVzZXIuVXNlci5EYXRhLlZhbHVlRW50cnlSBXZhbHVlGjgKClZhbHVlRW50cnkSEAoDa2V5GAEgASgJUgNrZXkSFAoFdmFsdWUYAiABKAlSBXZhbHVlOgI4ARo3CglEYXRhRW50cnkSEAoDa2V5GAEgASgJUgNrZXkSFAoFdmFsdWUYAiABKAlSBXZhbHVlOgI4ARpYCg9UYWdnZWREYXRhRW50cnkSEAoDa2V5GAEgASgJUgNrZXkSLwoFdmFsdWUYAiABKAsyGS5idWNrZXRlZXIudXNlci5Vc2VyLkRhdGFSBXZhbHVlOgI4AUInWiVnaXRodWIuY29tL2NhLWRwL2J1Y2tldGVlci9wcm90by91c2VyYgZwcm90bzMK3wcKGHByb3RvL3VzZXIvc2VydmljZS5wcm90bxIOYnVja2V0ZWVyLnVzZXIaFXByb3RvL3VzZXIvdXNlci5wcm90byJeCg5HZXRVc2VyUmVxdWVzdBIXCgd1c2VyX2lkGAEgASgJUgZ1c2VySWQSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAIgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZSI7Cg9HZXRVc2VyUmVzcG9uc2USKAoEdXNlchgBIAEoCzIULmJ1Y2tldGVlci51c2VyLlVzZXJSBHVzZXIiwgMKEExpc3RVc2Vyc1JlcXVlc3QSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRIbCglwYWdlX3NpemUYAiABKANSCHBhZ2VTaXplEhYKBmN1cnNvchgDIAEoCVIGY3Vyc29yEkMKCG9yZGVyX2J5GAQgASgOMiguYnVja2V0ZWVyLnVzZXIuTGlzdFVzZXJzUmVxdWVzdC5PcmRlckJ5UgdvcmRlckJ5ElgKD29yZGVyX2RpcmVjdGlvbhgFIAEoDjIvLmJ1Y2tldGVlci51c2VyLkxpc3RVc2Vyc1JlcXVlc3QuT3JkZXJEaXJlY3Rpb25SDm9yZGVyRGlyZWN0aW9uEiUKDnNlYXJjaF9rZXl3b3JkGAYgASgJUg1zZWFyY2hLZXl3b3JkEhIKBGZyb20YByABKANSBGZyb20SDgoCdG8YCCABKANSAnRvIjUKB09yZGVyQnkSCwoHREVGQVVMVBAAEg4KCkNSRUFURURfQVQQARINCglMQVNUX1NFRU4QAiIjCg5PcmRlckRpcmVjdGlvbhIHCgNBU0MQABIICgRERVNDEAEiVwoRTGlzdFVzZXJzUmVzcG9uc2USKgoFdXNlcnMYASADKAsyFC5idWNrZXRlZXIudXNlci5Vc2VyUgV1c2VycxIWCgZjdXJzb3IYAiABKAlSBmN1cnNvcjKvAQoLVXNlclNlcnZpY2USTAoHR2V0VXNlchIeLmJ1Y2tldGVlci51c2VyLkdldFVzZXJSZXF1ZXN0Gh8uYnVja2V0ZWVyLnVzZXIuR2V0VXNlclJlc3BvbnNlIgASUgoJTGlzdFVzZXJzEiAuYnVja2V0ZWVyLnVzZXIuTGlzdFVzZXJzUmVxdWVzdBohLmJ1Y2tldGVlci51c2VyLkxpc3RVc2Vyc1Jlc3BvbnNlIgBCJ1olZ2l0aHViLmNvbS9jYS1kcC9idWNrZXRlZXIvcHJvdG8vdXNlcmIGcHJvdG8z"
  config:

service:
  type: LoadBalancer
  loadBalancerIP:
  port: 443

health:
  initialDelaySeconds: 10
  periodSeconds: 10
  failureThreshold: 10

resources: {}

affinity: {}

nodeSelector: {}

pdb:
  enabled:
  maxUnavailable: 50%

hpa:
  enabled:
  minReplicas:
  maxReplicas:
  metrics:
    cpu:
      targetAverageUtilization:

tolerations: []
