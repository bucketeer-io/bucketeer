// Copyright 2023 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: proto/event/client/event.proto

package client

import (
	feature "github.com/bucketeer-io/bucketeer/proto/feature"
	user "github.com/bucketeer-io/bucketeer/proto/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SourceId int32

const (
	SourceId_UNKNOWN SourceId = 0
	SourceId_ANDROID SourceId = 1
	SourceId_IOS     SourceId = 2
	// Deprecated: Do not use.
	SourceId_WEB         SourceId = 3
	SourceId_GO_SERVER   SourceId = 5
	SourceId_NODE_SERVER SourceId = 6
	SourceId_JAVASCRIPT  SourceId = 7
)

// Enum value maps for SourceId.
var (
	SourceId_name = map[int32]string{
		0: "UNKNOWN",
		1: "ANDROID",
		2: "IOS",
		3: "WEB",
		5: "GO_SERVER",
		6: "NODE_SERVER",
		7: "JAVASCRIPT",
	}
	SourceId_value = map[string]int32{
		"UNKNOWN":     0,
		"ANDROID":     1,
		"IOS":         2,
		"WEB":         3,
		"GO_SERVER":   5,
		"NODE_SERVER": 6,
		"JAVASCRIPT":  7,
	}
)

func (x SourceId) Enum() *SourceId {
	p := new(SourceId)
	*p = x
	return p
}

func (x SourceId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceId) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_event_client_event_proto_enumTypes[0].Descriptor()
}

func (SourceId) Type() protoreflect.EnumType {
	return &file_proto_event_client_event_proto_enumTypes[0]
}

func (x SourceId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceId.Descriptor instead.
func (SourceId) EnumDescriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{0}
}

type ApiId int32

const (
	ApiId_UNKNOWN_API     ApiId = 0
	ApiId_GET_EVALUATION  ApiId = 1
	ApiId_GET_EVALUATIONS ApiId = 2
	ApiId_REGISTER_EVENTS ApiId = 3
)

// Enum value maps for ApiId.
var (
	ApiId_name = map[int32]string{
		0: "UNKNOWN_API",
		1: "GET_EVALUATION",
		2: "GET_EVALUATIONS",
		3: "REGISTER_EVENTS",
	}
	ApiId_value = map[string]int32{
		"UNKNOWN_API":     0,
		"GET_EVALUATION":  1,
		"GET_EVALUATIONS": 2,
		"REGISTER_EVENTS": 3,
	}
)

func (x ApiId) Enum() *ApiId {
	p := new(ApiId)
	*p = x
	return p
}

func (x ApiId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiId) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_event_client_event_proto_enumTypes[1].Descriptor()
}

func (ApiId) Type() protoreflect.EnumType {
	return &file_proto_event_client_event_proto_enumTypes[1]
}

func (x ApiId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApiId.Descriptor instead.
func (ApiId) EnumDescriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{1}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Event                *anypb.Any `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	EnvironmentNamespace string     `protobuf:"bytes,3,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"` // SDK doens't need to set this field. It's set by gateway service.
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetEvent() *anypb.Any {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Event) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type EvaluationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      int64             `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FeatureId      string            `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	FeatureVersion int32             `protobuf:"varint,3,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	UserId         string            `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VariationId    string            `protobuf:"bytes,5,opt,name=variation_id,json=variationId,proto3" json:"variation_id,omitempty"`
	User           *user.User        `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Reason         *feature.Reason   `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	Tag            string            `protobuf:"bytes,8,opt,name=tag,proto3" json:"tag,omitempty"`
	SourceId       SourceId          `protobuf:"varint,9,opt,name=source_id,json=sourceId,proto3,enum=bucketeer.event.client.SourceId" json:"source_id,omitempty"`
	SdkVersion     string            `protobuf:"bytes,10,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	Metadata       map[string]string `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EvaluationEvent) Reset() {
	*x = EvaluationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationEvent) ProtoMessage() {}

func (x *EvaluationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationEvent.ProtoReflect.Descriptor instead.
func (*EvaluationEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{1}
}

func (x *EvaluationEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EvaluationEvent) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *EvaluationEvent) GetFeatureVersion() int32 {
	if x != nil {
		return x.FeatureVersion
	}
	return 0
}

func (x *EvaluationEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EvaluationEvent) GetVariationId() string {
	if x != nil {
		return x.VariationId
	}
	return ""
}

func (x *EvaluationEvent) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *EvaluationEvent) GetReason() *feature.Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *EvaluationEvent) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *EvaluationEvent) GetSourceId() SourceId {
	if x != nil {
		return x.SourceId
	}
	return SourceId_UNKNOWN
}

func (x *EvaluationEvent) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *EvaluationEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GoalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64      `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	GoalId    string     `protobuf:"bytes,2,opt,name=goal_id,json=goalId,proto3" json:"goal_id,omitempty"`
	UserId    string     `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Value     float64    `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
	User      *user.User `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Deprecated: Do not use.
	Evaluations []*feature.Evaluation `protobuf:"bytes,6,rep,name=evaluations,proto3" json:"evaluations,omitempty"`
	Tag         string                `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
	SourceId    SourceId              `protobuf:"varint,8,opt,name=source_id,json=sourceId,proto3,enum=bucketeer.event.client.SourceId" json:"source_id,omitempty"`
	SdkVersion  string                `protobuf:"bytes,9,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	Metadata    map[string]string     `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GoalEvent) Reset() {
	*x = GoalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalEvent) ProtoMessage() {}

func (x *GoalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalEvent.ProtoReflect.Descriptor instead.
func (*GoalEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{2}
}

func (x *GoalEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GoalEvent) GetGoalId() string {
	if x != nil {
		return x.GoalId
	}
	return ""
}

func (x *GoalEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GoalEvent) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GoalEvent) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

// Deprecated: Do not use.
func (x *GoalEvent) GetEvaluations() []*feature.Evaluation {
	if x != nil {
		return x.Evaluations
	}
	return nil
}

func (x *GoalEvent) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *GoalEvent) GetSourceId() SourceId {
	if x != nil {
		return x.SourceId
	}
	return SourceId_UNKNOWN
}

func (x *GoalEvent) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *GoalEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64             `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Event      *anypb.Any        `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	SourceId   SourceId          `protobuf:"varint,3,opt,name=source_id,json=sourceId,proto3,enum=bucketeer.event.client.SourceId" json:"source_id,omitempty"`
	SdkVersion string            `protobuf:"bytes,4,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	Metadata   map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetricsEvent) Reset() {
	*x = MetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsEvent) ProtoMessage() {}

func (x *MetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsEvent.ProtoReflect.Descriptor instead.
func (*MetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{3}
}

func (x *MetricsEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MetricsEvent) GetEvent() *anypb.Any {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *MetricsEvent) GetSourceId() SourceId {
	if x != nil {
		return x.SourceId
	}
	return SourceId_UNKNOWN
}

func (x *MetricsEvent) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *MetricsEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Deprecated: Do not use.
type GetEvaluationLatencyMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels   map[string]string    `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *GetEvaluationLatencyMetricsEvent) Reset() {
	*x = GetEvaluationLatencyMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationLatencyMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationLatencyMetricsEvent) ProtoMessage() {}

func (x *GetEvaluationLatencyMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationLatencyMetricsEvent.ProtoReflect.Descriptor instead.
func (*GetEvaluationLatencyMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{4}
}

func (x *GetEvaluationLatencyMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetEvaluationLatencyMetricsEvent) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// Deprecated: Do not use.
type GetEvaluationSizeMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels   map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SizeByte int32             `protobuf:"varint,2,opt,name=size_byte,json=sizeByte,proto3" json:"size_byte,omitempty"`
}

func (x *GetEvaluationSizeMetricsEvent) Reset() {
	*x = GetEvaluationSizeMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationSizeMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationSizeMetricsEvent) ProtoMessage() {}

func (x *GetEvaluationSizeMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationSizeMetricsEvent.ProtoReflect.Descriptor instead.
func (*GetEvaluationSizeMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{5}
}

func (x *GetEvaluationSizeMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetEvaluationSizeMetricsEvent) GetSizeByte() int32 {
	if x != nil {
		return x.SizeByte
	}
	return 0
}

type LatencyMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deprecated: Do not use.
	Duration      *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	LatencySecond float64              `protobuf:"fixed64,4,opt,name=latency_second,json=latencySecond,proto3" json:"latency_second,omitempty"`
}

func (x *LatencyMetricsEvent) Reset() {
	*x = LatencyMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyMetricsEvent) ProtoMessage() {}

func (x *LatencyMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyMetricsEvent.ProtoReflect.Descriptor instead.
func (*LatencyMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{6}
}

func (x *LatencyMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *LatencyMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Deprecated: Do not use.
func (x *LatencyMetricsEvent) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *LatencyMetricsEvent) GetLatencySecond() float64 {
	if x != nil {
		return x.LatencySecond
	}
	return 0
}

type SizeMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId    ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels   map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SizeByte int32             `protobuf:"varint,3,opt,name=size_byte,json=sizeByte,proto3" json:"size_byte,omitempty"`
}

func (x *SizeMetricsEvent) Reset() {
	*x = SizeMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SizeMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SizeMetricsEvent) ProtoMessage() {}

func (x *SizeMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SizeMetricsEvent.ProtoReflect.Descriptor instead.
func (*SizeMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{7}
}

func (x *SizeMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *SizeMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SizeMetricsEvent) GetSizeByte() int32 {
	if x != nil {
		return x.SizeByte
	}
	return 0
}

// Deprecated: Do not use.
type TimeoutErrorCountMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *TimeoutErrorCountMetricsEvent) Reset() {
	*x = TimeoutErrorCountMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutErrorCountMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutErrorCountMetricsEvent) ProtoMessage() {}

func (x *TimeoutErrorCountMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutErrorCountMetricsEvent.ProtoReflect.Descriptor instead.
func (*TimeoutErrorCountMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{8}
}

func (x *TimeoutErrorCountMetricsEvent) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// Deprecated: Do not use.
type InternalErrorCountMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *InternalErrorCountMetricsEvent) Reset() {
	*x = InternalErrorCountMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalErrorCountMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalErrorCountMetricsEvent) ProtoMessage() {}

func (x *InternalErrorCountMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalErrorCountMetricsEvent.ProtoReflect.Descriptor instead.
func (*InternalErrorCountMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{9}
}

func (x *InternalErrorCountMetricsEvent) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// HTTP Mapping: 400 Bad Request
type BadRequestErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BadRequestErrorMetricsEvent) Reset() {
	*x = BadRequestErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadRequestErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadRequestErrorMetricsEvent) ProtoMessage() {}

func (x *BadRequestErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadRequestErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*BadRequestErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{10}
}

func (x *BadRequestErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *BadRequestErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// HTTP Mapping: 401 Unauthorized
type UnauthorizedErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UnauthorizedErrorMetricsEvent) Reset() {
	*x = UnauthorizedErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnauthorizedErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnauthorizedErrorMetricsEvent) ProtoMessage() {}

func (x *UnauthorizedErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnauthorizedErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*UnauthorizedErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{11}
}

func (x *UnauthorizedErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *UnauthorizedErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// HTTP Mapping: 403 Forbidden
type ForbiddenErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ForbiddenErrorMetricsEvent) Reset() {
	*x = ForbiddenErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbiddenErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbiddenErrorMetricsEvent) ProtoMessage() {}

func (x *ForbiddenErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbiddenErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*ForbiddenErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{12}
}

func (x *ForbiddenErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *ForbiddenErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// HTTP Mapping: 404 Not Found
type NotFoundErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NotFoundErrorMetricsEvent) Reset() {
	*x = NotFoundErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotFoundErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotFoundErrorMetricsEvent) ProtoMessage() {}

func (x *NotFoundErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotFoundErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*NotFoundErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{13}
}

func (x *NotFoundErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *NotFoundErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// HTTP Mapping: 499 Client Closed Request
type ClientClosedRequestErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClientClosedRequestErrorMetricsEvent) Reset() {
	*x = ClientClosedRequestErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientClosedRequestErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientClosedRequestErrorMetricsEvent) ProtoMessage() {}

func (x *ClientClosedRequestErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientClosedRequestErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*ClientClosedRequestErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{14}
}

func (x *ClientClosedRequestErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *ClientClosedRequestErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// HTTP Mapping: 500 Internal Server Error
type InternalServerErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InternalServerErrorMetricsEvent) Reset() {
	*x = InternalServerErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalServerErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalServerErrorMetricsEvent) ProtoMessage() {}

func (x *InternalServerErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalServerErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*InternalServerErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{15}
}

func (x *InternalServerErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *InternalServerErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// HTTP Mapping: 503 Service Unavailable
type ServiceUnavailableErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServiceUnavailableErrorMetricsEvent) Reset() {
	*x = ServiceUnavailableErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceUnavailableErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceUnavailableErrorMetricsEvent) ProtoMessage() {}

func (x *ServiceUnavailableErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceUnavailableErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*ServiceUnavailableErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{16}
}

func (x *ServiceUnavailableErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *ServiceUnavailableErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type TimeoutErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimeoutErrorMetricsEvent) Reset() {
	*x = TimeoutErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutErrorMetricsEvent) ProtoMessage() {}

func (x *TimeoutErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*TimeoutErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{17}
}

func (x *TimeoutErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *TimeoutErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type InternalErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InternalErrorMetricsEvent) Reset() {
	*x = InternalErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalErrorMetricsEvent) ProtoMessage() {}

func (x *InternalErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*InternalErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{18}
}

func (x *InternalErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *InternalErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type NetworkErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NetworkErrorMetricsEvent) Reset() {
	*x = NetworkErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkErrorMetricsEvent) ProtoMessage() {}

func (x *NetworkErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*NetworkErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{19}
}

func (x *NetworkErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *NetworkErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type InternalSdkErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InternalSdkErrorMetricsEvent) Reset() {
	*x = InternalSdkErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalSdkErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalSdkErrorMetricsEvent) ProtoMessage() {}

func (x *InternalSdkErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalSdkErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*InternalSdkErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{20}
}

func (x *InternalSdkErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *InternalSdkErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UnknownErrorMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId  ApiId             `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3,enum=bucketeer.event.client.ApiId" json:"api_id,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UnknownErrorMetricsEvent) Reset() {
	*x = UnknownErrorMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownErrorMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownErrorMetricsEvent) ProtoMessage() {}

func (x *UnknownErrorMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownErrorMetricsEvent.ProtoReflect.Descriptor instead.
func (*UnknownErrorMetricsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{21}
}

func (x *UnknownErrorMetricsEvent) GetApiId() ApiId {
	if x != nil {
		return x.ApiId
	}
	return ApiId_UNKNOWN_API
}

func (x *UnknownErrorMetricsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type OpsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FeatureId      string `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	FeatureVersion int32  `protobuf:"varint,3,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	VariationId    string `protobuf:"bytes,4,opt,name=variation_id,json=variationId,proto3" json:"variation_id,omitempty"`
	GoalId         string `protobuf:"bytes,5,opt,name=goal_id,json=goalId,proto3" json:"goal_id,omitempty"`
	UserId         string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *OpsEvent) Reset() {
	*x = OpsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsEvent) ProtoMessage() {}

func (x *OpsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsEvent.ProtoReflect.Descriptor instead.
func (*OpsEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{22}
}

func (x *OpsEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OpsEvent) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *OpsEvent) GetFeatureVersion() int32 {
	if x != nil {
		return x.FeatureVersion
	}
	return 0
}

func (x *OpsEvent) GetVariationId() string {
	if x != nil {
		return x.VariationId
	}
	return ""
}

func (x *OpsEvent) GetGoalId() string {
	if x != nil {
		return x.GoalId
	}
	return ""
}

func (x *OpsEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserGoalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	GoalId    string  `protobuf:"bytes,2,opt,name=goal_id,json=goalId,proto3" json:"goal_id,omitempty"`
	Value     float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UserGoalEvent) Reset() {
	*x = UserGoalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_client_event_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGoalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGoalEvent) ProtoMessage() {}

func (x *UserGoalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_client_event_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGoalEvent.ProtoReflect.Descriptor instead.
func (*UserGoalEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_client_event_proto_rawDescGZIP(), []int{23}
}

func (x *UserGoalEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *UserGoalEvent) GetGoalId() string {
	if x != nil {
		return x.GoalId
	}
	return ""
}

func (x *UserGoalEvent) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_proto_event_client_event_proto protoreflect.FileDescriptor

var file_proto_event_client_event_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x92, 0x04, 0x0a, 0x0f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x03, 0x0a, 0x09, 0x47, 0x6f, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x6f, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6, 0x01, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x5c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xb9,
	0x02, 0x0a, 0x13, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x53,
	0x69, 0x7a, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05,
	0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x69, 0x7a, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x1d, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0x36, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xe7, 0x01, 0x0a, 0x1b, 0x42,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70,
	0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64,
	0x12, 0x57, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x1d, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe5, 0x01, 0x0a, 0x1a, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x64,
	0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x19, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x55,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf9, 0x01, 0x0a, 0x24, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x69,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12,
	0x60, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a,
	0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x64, 0x52,
	0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7,
	0x01, 0x0a, 0x23, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x70, 0x69, 0x49, 0x64, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a,
	0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70,
	0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64,
	0x12, 0x55, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05,
	0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x64, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x58, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x64, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x64, 0x52, 0x05,
	0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x6f, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5c,
	0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x6f, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x70, 0x0a, 0x08,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x03, 0x57,
	0x45, 0x42, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x4f, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x41, 0x56, 0x41,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x07, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x2a, 0x56,
	0x0a, 0x05, 0x41, 0x70, 0x69, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x54, 0x5f,
	0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x45, 0x54, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2d, 0x69,
	0x6f, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_event_client_event_proto_rawDescOnce sync.Once
	file_proto_event_client_event_proto_rawDescData = file_proto_event_client_event_proto_rawDesc
)

func file_proto_event_client_event_proto_rawDescGZIP() []byte {
	file_proto_event_client_event_proto_rawDescOnce.Do(func() {
		file_proto_event_client_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_event_client_event_proto_rawDescData)
	})
	return file_proto_event_client_event_proto_rawDescData
}

var file_proto_event_client_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_event_client_event_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_proto_event_client_event_proto_goTypes = []interface{}{
	(SourceId)(0),                                // 0: bucketeer.event.client.SourceId
	(ApiId)(0),                                   // 1: bucketeer.event.client.ApiId
	(*Event)(nil),                                // 2: bucketeer.event.client.Event
	(*EvaluationEvent)(nil),                      // 3: bucketeer.event.client.EvaluationEvent
	(*GoalEvent)(nil),                            // 4: bucketeer.event.client.GoalEvent
	(*MetricsEvent)(nil),                         // 5: bucketeer.event.client.MetricsEvent
	(*GetEvaluationLatencyMetricsEvent)(nil),     // 6: bucketeer.event.client.GetEvaluationLatencyMetricsEvent
	(*GetEvaluationSizeMetricsEvent)(nil),        // 7: bucketeer.event.client.GetEvaluationSizeMetricsEvent
	(*LatencyMetricsEvent)(nil),                  // 8: bucketeer.event.client.LatencyMetricsEvent
	(*SizeMetricsEvent)(nil),                     // 9: bucketeer.event.client.SizeMetricsEvent
	(*TimeoutErrorCountMetricsEvent)(nil),        // 10: bucketeer.event.client.TimeoutErrorCountMetricsEvent
	(*InternalErrorCountMetricsEvent)(nil),       // 11: bucketeer.event.client.InternalErrorCountMetricsEvent
	(*BadRequestErrorMetricsEvent)(nil),          // 12: bucketeer.event.client.BadRequestErrorMetricsEvent
	(*UnauthorizedErrorMetricsEvent)(nil),        // 13: bucketeer.event.client.UnauthorizedErrorMetricsEvent
	(*ForbiddenErrorMetricsEvent)(nil),           // 14: bucketeer.event.client.ForbiddenErrorMetricsEvent
	(*NotFoundErrorMetricsEvent)(nil),            // 15: bucketeer.event.client.NotFoundErrorMetricsEvent
	(*ClientClosedRequestErrorMetricsEvent)(nil), // 16: bucketeer.event.client.ClientClosedRequestErrorMetricsEvent
	(*InternalServerErrorMetricsEvent)(nil),      // 17: bucketeer.event.client.InternalServerErrorMetricsEvent
	(*ServiceUnavailableErrorMetricsEvent)(nil),  // 18: bucketeer.event.client.ServiceUnavailableErrorMetricsEvent
	(*TimeoutErrorMetricsEvent)(nil),             // 19: bucketeer.event.client.TimeoutErrorMetricsEvent
	(*InternalErrorMetricsEvent)(nil),            // 20: bucketeer.event.client.InternalErrorMetricsEvent
	(*NetworkErrorMetricsEvent)(nil),             // 21: bucketeer.event.client.NetworkErrorMetricsEvent
	(*InternalSdkErrorMetricsEvent)(nil),         // 22: bucketeer.event.client.InternalSdkErrorMetricsEvent
	(*UnknownErrorMetricsEvent)(nil),             // 23: bucketeer.event.client.UnknownErrorMetricsEvent
	(*OpsEvent)(nil),                             // 24: bucketeer.event.client.OpsEvent
	(*UserGoalEvent)(nil),                        // 25: bucketeer.event.client.UserGoalEvent
	nil,                                          // 26: bucketeer.event.client.EvaluationEvent.MetadataEntry
	nil,                                          // 27: bucketeer.event.client.GoalEvent.MetadataEntry
	nil,                                          // 28: bucketeer.event.client.MetricsEvent.MetadataEntry
	nil,                                          // 29: bucketeer.event.client.GetEvaluationLatencyMetricsEvent.LabelsEntry
	nil,                                          // 30: bucketeer.event.client.GetEvaluationSizeMetricsEvent.LabelsEntry
	nil,                                          // 31: bucketeer.event.client.LatencyMetricsEvent.LabelsEntry
	nil,                                          // 32: bucketeer.event.client.SizeMetricsEvent.LabelsEntry
	nil,                                          // 33: bucketeer.event.client.BadRequestErrorMetricsEvent.LabelsEntry
	nil,                                          // 34: bucketeer.event.client.UnauthorizedErrorMetricsEvent.LabelsEntry
	nil,                                          // 35: bucketeer.event.client.ForbiddenErrorMetricsEvent.LabelsEntry
	nil,                                          // 36: bucketeer.event.client.NotFoundErrorMetricsEvent.LabelsEntry
	nil,                                          // 37: bucketeer.event.client.ClientClosedRequestErrorMetricsEvent.LabelsEntry
	nil,                                          // 38: bucketeer.event.client.InternalServerErrorMetricsEvent.LabelsEntry
	nil,                                          // 39: bucketeer.event.client.ServiceUnavailableErrorMetricsEvent.LabelsEntry
	nil,                                          // 40: bucketeer.event.client.TimeoutErrorMetricsEvent.LabelsEntry
	nil,                                          // 41: bucketeer.event.client.InternalErrorMetricsEvent.LabelsEntry
	nil,                                          // 42: bucketeer.event.client.NetworkErrorMetricsEvent.LabelsEntry
	nil,                                          // 43: bucketeer.event.client.InternalSdkErrorMetricsEvent.LabelsEntry
	nil,                                          // 44: bucketeer.event.client.UnknownErrorMetricsEvent.LabelsEntry
	(*anypb.Any)(nil),                            // 45: google.protobuf.Any
	(*user.User)(nil),                            // 46: bucketeer.user.User
	(*feature.Reason)(nil),                       // 47: bucketeer.feature.Reason
	(*feature.Evaluation)(nil),                   // 48: bucketeer.feature.Evaluation
	(*durationpb.Duration)(nil),                  // 49: google.protobuf.Duration
}
var file_proto_event_client_event_proto_depIdxs = []int32{
	45, // 0: bucketeer.event.client.Event.event:type_name -> google.protobuf.Any
	46, // 1: bucketeer.event.client.EvaluationEvent.user:type_name -> bucketeer.user.User
	47, // 2: bucketeer.event.client.EvaluationEvent.reason:type_name -> bucketeer.feature.Reason
	0,  // 3: bucketeer.event.client.EvaluationEvent.source_id:type_name -> bucketeer.event.client.SourceId
	26, // 4: bucketeer.event.client.EvaluationEvent.metadata:type_name -> bucketeer.event.client.EvaluationEvent.MetadataEntry
	46, // 5: bucketeer.event.client.GoalEvent.user:type_name -> bucketeer.user.User
	48, // 6: bucketeer.event.client.GoalEvent.evaluations:type_name -> bucketeer.feature.Evaluation
	0,  // 7: bucketeer.event.client.GoalEvent.source_id:type_name -> bucketeer.event.client.SourceId
	27, // 8: bucketeer.event.client.GoalEvent.metadata:type_name -> bucketeer.event.client.GoalEvent.MetadataEntry
	45, // 9: bucketeer.event.client.MetricsEvent.event:type_name -> google.protobuf.Any
	0,  // 10: bucketeer.event.client.MetricsEvent.source_id:type_name -> bucketeer.event.client.SourceId
	28, // 11: bucketeer.event.client.MetricsEvent.metadata:type_name -> bucketeer.event.client.MetricsEvent.MetadataEntry
	29, // 12: bucketeer.event.client.GetEvaluationLatencyMetricsEvent.labels:type_name -> bucketeer.event.client.GetEvaluationLatencyMetricsEvent.LabelsEntry
	49, // 13: bucketeer.event.client.GetEvaluationLatencyMetricsEvent.duration:type_name -> google.protobuf.Duration
	30, // 14: bucketeer.event.client.GetEvaluationSizeMetricsEvent.labels:type_name -> bucketeer.event.client.GetEvaluationSizeMetricsEvent.LabelsEntry
	1,  // 15: bucketeer.event.client.LatencyMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	31, // 16: bucketeer.event.client.LatencyMetricsEvent.labels:type_name -> bucketeer.event.client.LatencyMetricsEvent.LabelsEntry
	49, // 17: bucketeer.event.client.LatencyMetricsEvent.duration:type_name -> google.protobuf.Duration
	1,  // 18: bucketeer.event.client.SizeMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	32, // 19: bucketeer.event.client.SizeMetricsEvent.labels:type_name -> bucketeer.event.client.SizeMetricsEvent.LabelsEntry
	1,  // 20: bucketeer.event.client.BadRequestErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	33, // 21: bucketeer.event.client.BadRequestErrorMetricsEvent.labels:type_name -> bucketeer.event.client.BadRequestErrorMetricsEvent.LabelsEntry
	1,  // 22: bucketeer.event.client.UnauthorizedErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	34, // 23: bucketeer.event.client.UnauthorizedErrorMetricsEvent.labels:type_name -> bucketeer.event.client.UnauthorizedErrorMetricsEvent.LabelsEntry
	1,  // 24: bucketeer.event.client.ForbiddenErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	35, // 25: bucketeer.event.client.ForbiddenErrorMetricsEvent.labels:type_name -> bucketeer.event.client.ForbiddenErrorMetricsEvent.LabelsEntry
	1,  // 26: bucketeer.event.client.NotFoundErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	36, // 27: bucketeer.event.client.NotFoundErrorMetricsEvent.labels:type_name -> bucketeer.event.client.NotFoundErrorMetricsEvent.LabelsEntry
	1,  // 28: bucketeer.event.client.ClientClosedRequestErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	37, // 29: bucketeer.event.client.ClientClosedRequestErrorMetricsEvent.labels:type_name -> bucketeer.event.client.ClientClosedRequestErrorMetricsEvent.LabelsEntry
	1,  // 30: bucketeer.event.client.InternalServerErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	38, // 31: bucketeer.event.client.InternalServerErrorMetricsEvent.labels:type_name -> bucketeer.event.client.InternalServerErrorMetricsEvent.LabelsEntry
	1,  // 32: bucketeer.event.client.ServiceUnavailableErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	39, // 33: bucketeer.event.client.ServiceUnavailableErrorMetricsEvent.labels:type_name -> bucketeer.event.client.ServiceUnavailableErrorMetricsEvent.LabelsEntry
	1,  // 34: bucketeer.event.client.TimeoutErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	40, // 35: bucketeer.event.client.TimeoutErrorMetricsEvent.labels:type_name -> bucketeer.event.client.TimeoutErrorMetricsEvent.LabelsEntry
	1,  // 36: bucketeer.event.client.InternalErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	41, // 37: bucketeer.event.client.InternalErrorMetricsEvent.labels:type_name -> bucketeer.event.client.InternalErrorMetricsEvent.LabelsEntry
	1,  // 38: bucketeer.event.client.NetworkErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	42, // 39: bucketeer.event.client.NetworkErrorMetricsEvent.labels:type_name -> bucketeer.event.client.NetworkErrorMetricsEvent.LabelsEntry
	1,  // 40: bucketeer.event.client.InternalSdkErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	43, // 41: bucketeer.event.client.InternalSdkErrorMetricsEvent.labels:type_name -> bucketeer.event.client.InternalSdkErrorMetricsEvent.LabelsEntry
	1,  // 42: bucketeer.event.client.UnknownErrorMetricsEvent.api_id:type_name -> bucketeer.event.client.ApiId
	44, // 43: bucketeer.event.client.UnknownErrorMetricsEvent.labels:type_name -> bucketeer.event.client.UnknownErrorMetricsEvent.LabelsEntry
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_proto_event_client_event_proto_init() }
func file_proto_event_client_event_proto_init() {
	if File_proto_event_client_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_event_client_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvaluationLatencyMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvaluationSizeMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SizeMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutErrorCountMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalErrorCountMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadRequestErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnauthorizedErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbiddenErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotFoundErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientClosedRequestErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalServerErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceUnavailableErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalSdkErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownErrorMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_client_event_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGoalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_event_client_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_event_client_event_proto_goTypes,
		DependencyIndexes: file_proto_event_client_event_proto_depIdxs,
		EnumInfos:         file_proto_event_client_event_proto_enumTypes,
		MessageInfos:      file_proto_event_client_event_proto_msgTypes,
	}.Build()
	File_proto_event_client_event_proto = out.File
	file_proto_event_client_event_proto_rawDesc = nil
	file_proto_event_client_event_proto_goTypes = nil
	file_proto_event_client_event_proto_depIdxs = nil
}
