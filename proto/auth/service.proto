// Copyright 2024 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.auth;
option go_package = "github.com/bucketeer-io/bucketeer/proto/auth";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/auth/token.proto";

enum AuthType {
  AUTH_TYPE_UNSPECIFIED = 0;
  AUTH_TYPE_USER_PASSWORD = 1 [deprecated = true];
  AUTH_TYPE_GOOGLE = 2;
  AUTH_TYPE_GITHUB = 3;
}

message GetAuthenticationURLRequest {
  string state = 1;
  string redirect_url = 2;
  AuthType type = 3;
}

message GetAuthenticationURLResponse {
  string url = 1;
}

message ExchangeTokenRequest {
  string code = 1;
  string redirect_url = 2;
  AuthType type = 3;
}

message ExchangeTokenResponse {
  Token token = 1;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  Token token = 1;
}

message SignInRequest {
  string email = 1;
  string password = 2;
}

message SignInResponse {
  Token token = 1;
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: { title: "Bucketeer Web Service" version: "1.0" }
  schemes: HTTPS
  host: "ENDPOINT"
  consumes: "application/json"
  produces: "application/json"
  tags: [ { name: "Authentication" } ]
  responses: {
    key: "503"
    value: {
      description: "Returned for internal errors."
      schema: { json_schema: { ref: ".google.rpc.Status" } }
      examples: {
        key: "application/json"
        value: '{ "code": 13, "message": "internal", "details": [] }'
      }
    }
  }
};

service AuthService {
  rpc ExchangeToken(ExchangeTokenRequest) returns (ExchangeTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/exchange_token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Exchange Token",
      description: "Exchange the token from the OAuth provider to the Bucketeer token.\nCurrently, we only support Google.",
      tags: "Authentication",
      operation_id: "web.v1.auth.exchange_token",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc GetAuthenticationURL(GetAuthenticationURLRequest)
      returns (GetAuthenticationURLResponse) {
    option (google.api.http) = {
      post: "/v1/auth/authentication_url"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Authentication URL",
      description: "The OAuth credentials must be configured on the server to call this API. It will return the Authentication URL.\nCurrently, we only support Google.",
      tags: "Authentication",
      operation_id: "web.v1.auth.authentication_url",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
    };
  }

  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/refresh_token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Refresh Token",
      description: "Refresh the Bucketeer token maintained by the web console.",
      tags: "Authentication",
      operation_id: "web.v1.auth.refresh_token",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc SignIn(SignInRequest) returns (SignInResponse) {
    option (google.api.http) = {
      post: "/v1/auth/signin"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Sign In",
      description: "Sign in on the web console using an email and password.",
      tags: "Authentication",
      operation_id: "web.v1.auth.signin",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
}
