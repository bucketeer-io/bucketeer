// source: proto/coderef/service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var proto_coderef_code_reference_pb = require('../../proto/coderef/code_reference_pb.js');
goog.object.extend(proto, proto_coderef_code_reference_pb);
var proto_coderef_command_pb = require('../../proto/coderef/command_pb.js');
goog.object.extend(proto, proto_coderef_command_pb);
goog.exportSymbol(
  'proto.bucketeer.coderef.CreateCodeReferenceRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.CreateCodeReferenceResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.DeleteCodeReferenceRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.DeleteCodeReferenceResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.GetCodeReferenceRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.GetCodeReferenceResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.ListCodeReferencesRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.ListCodeReferencesRequest.OrderBy',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.ListCodeReferencesRequest.OrderDirection',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.ListCodeReferencesResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.UpdateCodeReferenceRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.coderef.UpdateCodeReferenceResponse',
  null,
  global
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.GetCodeReferenceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.coderef.GetCodeReferenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.GetCodeReferenceRequest.displayName =
    'proto.bucketeer.coderef.GetCodeReferenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.GetCodeReferenceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.coderef.GetCodeReferenceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.GetCodeReferenceResponse.displayName =
    'proto.bucketeer.coderef.GetCodeReferenceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.ListCodeReferencesRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.coderef.ListCodeReferencesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.ListCodeReferencesRequest.displayName =
    'proto.bucketeer.coderef.ListCodeReferencesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.ListCodeReferencesResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.bucketeer.coderef.ListCodeReferencesResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.bucketeer.coderef.ListCodeReferencesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.ListCodeReferencesResponse.displayName =
    'proto.bucketeer.coderef.ListCodeReferencesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.coderef.CreateCodeReferenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.CreateCodeReferenceRequest.displayName =
    'proto.bucketeer.coderef.CreateCodeReferenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.CreateCodeReferenceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.bucketeer.coderef.CreateCodeReferenceResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.CreateCodeReferenceResponse.displayName =
    'proto.bucketeer.coderef.CreateCodeReferenceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.coderef.UpdateCodeReferenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.UpdateCodeReferenceRequest.displayName =
    'proto.bucketeer.coderef.UpdateCodeReferenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.UpdateCodeReferenceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.bucketeer.coderef.UpdateCodeReferenceResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.UpdateCodeReferenceResponse.displayName =
    'proto.bucketeer.coderef.UpdateCodeReferenceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.DeleteCodeReferenceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.coderef.DeleteCodeReferenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.DeleteCodeReferenceRequest.displayName =
    'proto.bucketeer.coderef.DeleteCodeReferenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.coderef.DeleteCodeReferenceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.bucketeer.coderef.DeleteCodeReferenceResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.coderef.DeleteCodeReferenceResponse.displayName =
    'proto.bucketeer.coderef.DeleteCodeReferenceResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.GetCodeReferenceRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.GetCodeReferenceRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.GetCodeReferenceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.GetCodeReferenceRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        environmentId: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.GetCodeReferenceRequest}
 */
proto.bucketeer.coderef.GetCodeReferenceRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.coderef.GetCodeReferenceRequest();
  return proto.bucketeer.coderef.GetCodeReferenceRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.GetCodeReferenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.GetCodeReferenceRequest}
 */
proto.bucketeer.coderef.GetCodeReferenceRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setEnvironmentId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.GetCodeReferenceRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.GetCodeReferenceRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.GetCodeReferenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.GetCodeReferenceRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getEnvironmentId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional string id = 1;
 * @return {string}
 */
proto.bucketeer.coderef.GetCodeReferenceRequest.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.GetCodeReferenceRequest} returns this
 */
proto.bucketeer.coderef.GetCodeReferenceRequest.prototype.setId = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string environment_id = 2;
 * @return {string}
 */
proto.bucketeer.coderef.GetCodeReferenceRequest.prototype.getEnvironmentId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.GetCodeReferenceRequest} returns this
 */
proto.bucketeer.coderef.GetCodeReferenceRequest.prototype.setEnvironmentId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.GetCodeReferenceResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.GetCodeReferenceResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.GetCodeReferenceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.GetCodeReferenceResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        codeReference:
          (f = msg.getCodeReference()) &&
          proto_coderef_code_reference_pb.CodeReference.toObject(
            includeInstance,
            f
          )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.GetCodeReferenceResponse}
 */
proto.bucketeer.coderef.GetCodeReferenceResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.coderef.GetCodeReferenceResponse();
  return proto.bucketeer.coderef.GetCodeReferenceResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.GetCodeReferenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.GetCodeReferenceResponse}
 */
proto.bucketeer.coderef.GetCodeReferenceResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_coderef_code_reference_pb.CodeReference();
          reader.readMessage(
            value,
            proto_coderef_code_reference_pb.CodeReference
              .deserializeBinaryFromReader
          );
          msg.setCodeReference(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.GetCodeReferenceResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.GetCodeReferenceResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.GetCodeReferenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.GetCodeReferenceResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getCodeReference();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto_coderef_code_reference_pb.CodeReference.serializeBinaryToWriter
      );
    }
  };

/**
 * optional CodeReference code_reference = 1;
 * @return {?proto.bucketeer.coderef.CodeReference}
 */
proto.bucketeer.coderef.GetCodeReferenceResponse.prototype.getCodeReference =
  function () {
    return /** @type{?proto.bucketeer.coderef.CodeReference} */ (
      jspb.Message.getWrapperField(
        this,
        proto_coderef_code_reference_pb.CodeReference,
        1
      )
    );
  };

/**
 * @param {?proto.bucketeer.coderef.CodeReference|undefined} value
 * @return {!proto.bucketeer.coderef.GetCodeReferenceResponse} returns this
 */
proto.bucketeer.coderef.GetCodeReferenceResponse.prototype.setCodeReference =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.coderef.GetCodeReferenceResponse} returns this
 */
proto.bucketeer.coderef.GetCodeReferenceResponse.prototype.clearCodeReference =
  function () {
    return this.setCodeReference(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.coderef.GetCodeReferenceResponse.prototype.hasCodeReference =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.ListCodeReferencesRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.ListCodeReferencesRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.ListCodeReferencesRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        environmentId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        featureId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        repositoryName: jspb.Message.getFieldWithDefault(msg, 3, ''),
        repositoryOwner: jspb.Message.getFieldWithDefault(msg, 4, ''),
        repositoryType: jspb.Message.getFieldWithDefault(msg, 5, 0),
        repositoryBranch: jspb.Message.getFieldWithDefault(msg, 6, ''),
        cursor: jspb.Message.getFieldWithDefault(msg, 7, ''),
        pageSize: jspb.Message.getFieldWithDefault(msg, 8, 0),
        orderBy: jspb.Message.getFieldWithDefault(msg, 9, 0),
        orderDirection: jspb.Message.getFieldWithDefault(msg, 10, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.coderef.ListCodeReferencesRequest();
  return proto.bucketeer.coderef.ListCodeReferencesRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.ListCodeReferencesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setEnvironmentId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setFeatureId(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setRepositoryName(value);
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setRepositoryOwner(value);
          break;
        case 5:
          var value =
            /** @type {!proto.bucketeer.coderef.CodeReference.RepositoryType} */ (
              reader.readEnum()
            );
          msg.setRepositoryType(value);
          break;
        case 6:
          var value = /** @type {string} */ (reader.readString());
          msg.setRepositoryBranch(value);
          break;
        case 7:
          var value = /** @type {string} */ (reader.readString());
          msg.setCursor(value);
          break;
        case 8:
          var value = /** @type {number} */ (reader.readInt64());
          msg.setPageSize(value);
          break;
        case 9:
          var value =
            /** @type {!proto.bucketeer.coderef.ListCodeReferencesRequest.OrderBy} */ (
              reader.readEnum()
            );
          msg.setOrderBy(value);
          break;
        case 10:
          var value =
            /** @type {!proto.bucketeer.coderef.ListCodeReferencesRequest.OrderDirection} */ (
              reader.readEnum()
            );
          msg.setOrderDirection(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.ListCodeReferencesRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.ListCodeReferencesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getEnvironmentId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getFeatureId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getRepositoryName();
    if (f.length > 0) {
      writer.writeString(3, f);
    }
    f = message.getRepositoryOwner();
    if (f.length > 0) {
      writer.writeString(4, f);
    }
    f = message.getRepositoryType();
    if (f !== 0.0) {
      writer.writeEnum(5, f);
    }
    f = message.getRepositoryBranch();
    if (f.length > 0) {
      writer.writeString(6, f);
    }
    f = message.getCursor();
    if (f.length > 0) {
      writer.writeString(7, f);
    }
    f = message.getPageSize();
    if (f !== 0) {
      writer.writeInt64(8, f);
    }
    f = message.getOrderBy();
    if (f !== 0.0) {
      writer.writeEnum(9, f);
    }
    f = message.getOrderDirection();
    if (f !== 0.0) {
      writer.writeEnum(10, f);
    }
  };

/**
 * @enum {number}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.OrderBy = {
  DEFAULT: 0,
  CREATED_AT: 1,
  UPDATED_AT: 2
};

/**
 * @enum {number}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.OrderDirection = {
  ASC: 0,
  DESC: 1
};

/**
 * optional string environment_id = 1;
 * @return {string}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.getEnvironmentId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.setEnvironmentId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string feature_id = 2;
 * @return {string}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.getFeatureId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.setFeatureId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional string repository_name = 3;
 * @return {string}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.getRepositoryName =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 3, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.setRepositoryName =
  function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
  };

/**
 * optional string repository_owner = 4;
 * @return {string}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.getRepositoryOwner =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 4, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.setRepositoryOwner =
  function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
  };

/**
 * optional CodeReference.RepositoryType repository_type = 5;
 * @return {!proto.bucketeer.coderef.CodeReference.RepositoryType}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.getRepositoryType =
  function () {
    return /** @type {!proto.bucketeer.coderef.CodeReference.RepositoryType} */ (
      jspb.Message.getFieldWithDefault(this, 5, 0)
    );
  };

/**
 * @param {!proto.bucketeer.coderef.CodeReference.RepositoryType} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.setRepositoryType =
  function (value) {
    return jspb.Message.setProto3EnumField(this, 5, value);
  };

/**
 * optional string repository_branch = 6;
 * @return {string}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.getRepositoryBranch =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 6, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.setRepositoryBranch =
  function (value) {
    return jspb.Message.setProto3StringField(this, 6, value);
  };

/**
 * optional string cursor = 7;
 * @return {string}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.getCursor =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 7, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.setCursor =
  function (value) {
    return jspb.Message.setProto3StringField(this, 7, value);
  };

/**
 * optional int64 page_size = 8;
 * @return {number}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.getPageSize =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
  };

/**
 * @param {number} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.setPageSize =
  function (value) {
    return jspb.Message.setProto3IntField(this, 8, value);
  };

/**
 * optional OrderBy order_by = 9;
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest.OrderBy}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.getOrderBy =
  function () {
    return /** @type {!proto.bucketeer.coderef.ListCodeReferencesRequest.OrderBy} */ (
      jspb.Message.getFieldWithDefault(this, 9, 0)
    );
  };

/**
 * @param {!proto.bucketeer.coderef.ListCodeReferencesRequest.OrderBy} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.setOrderBy =
  function (value) {
    return jspb.Message.setProto3EnumField(this, 9, value);
  };

/**
 * optional OrderDirection order_direction = 10;
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest.OrderDirection}
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.getOrderDirection =
  function () {
    return /** @type {!proto.bucketeer.coderef.ListCodeReferencesRequest.OrderDirection} */ (
      jspb.Message.getFieldWithDefault(this, 10, 0)
    );
  };

/**
 * @param {!proto.bucketeer.coderef.ListCodeReferencesRequest.OrderDirection} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesRequest} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesRequest.prototype.setOrderDirection =
  function (value) {
    return jspb.Message.setProto3EnumField(this, 10, value);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.ListCodeReferencesResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.ListCodeReferencesResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.ListCodeReferencesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.ListCodeReferencesResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        codeReferencesList: jspb.Message.toObjectList(
          msg.getCodeReferencesList(),
          proto_coderef_code_reference_pb.CodeReference.toObject,
          includeInstance
        ),
        cursor: jspb.Message.getFieldWithDefault(msg, 2, ''),
        totalCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.ListCodeReferencesResponse}
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.coderef.ListCodeReferencesResponse();
    return proto.bucketeer.coderef.ListCodeReferencesResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.ListCodeReferencesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.ListCodeReferencesResponse}
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_coderef_code_reference_pb.CodeReference();
          reader.readMessage(
            value,
            proto_coderef_code_reference_pb.CodeReference
              .deserializeBinaryFromReader
          );
          msg.addCodeReferences(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setCursor(value);
          break;
        case 3:
          var value = /** @type {number} */ (reader.readInt64());
          msg.setTotalCount(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.ListCodeReferencesResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.ListCodeReferencesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getCodeReferencesList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        1,
        f,
        proto_coderef_code_reference_pb.CodeReference.serializeBinaryToWriter
      );
    }
    f = message.getCursor();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getTotalCount();
    if (f !== 0) {
      writer.writeInt64(3, f);
    }
  };

/**
 * repeated CodeReference code_references = 1;
 * @return {!Array<!proto.bucketeer.coderef.CodeReference>}
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.prototype.getCodeReferencesList =
  function () {
    return /** @type{!Array<!proto.bucketeer.coderef.CodeReference>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto_coderef_code_reference_pb.CodeReference,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.bucketeer.coderef.CodeReference>} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesResponse} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.prototype.setCodeReferencesList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.bucketeer.coderef.CodeReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.coderef.CodeReference}
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.prototype.addCodeReferences =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.bucketeer.coderef.CodeReference,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.coderef.ListCodeReferencesResponse} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.prototype.clearCodeReferencesList =
  function () {
    return this.setCodeReferencesList([]);
  };

/**
 * optional string cursor = 2;
 * @return {string}
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.prototype.getCursor =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesResponse} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.prototype.setCursor =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional int64 total_count = 3;
 * @return {number}
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.prototype.getTotalCount =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
  };

/**
 * @param {number} value
 * @return {!proto.bucketeer.coderef.ListCodeReferencesResponse} returns this
 */
proto.bucketeer.coderef.ListCodeReferencesResponse.prototype.setTotalCount =
  function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.CreateCodeReferenceRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.CreateCodeReferenceRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.CreateCodeReferenceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.CreateCodeReferenceRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        command:
          (f = msg.getCommand()) &&
          proto_coderef_command_pb.CreateCodeReferenceCommand.toObject(
            includeInstance,
            f
          ),
        environmentId: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceRequest}
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.coderef.CreateCodeReferenceRequest();
    return proto.bucketeer.coderef.CreateCodeReferenceRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.CreateCodeReferenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceRequest}
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_coderef_command_pb.CreateCodeReferenceCommand();
          reader.readMessage(
            value,
            proto_coderef_command_pb.CreateCodeReferenceCommand
              .deserializeBinaryFromReader
          );
          msg.setCommand(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setEnvironmentId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.CreateCodeReferenceRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.CreateCodeReferenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getCommand();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto_coderef_command_pb.CreateCodeReferenceCommand
          .serializeBinaryToWriter
      );
    }
    f = message.getEnvironmentId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional CreateCodeReferenceCommand command = 1;
 * @return {?proto.bucketeer.coderef.CreateCodeReferenceCommand}
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest.prototype.getCommand =
  function () {
    return /** @type{?proto.bucketeer.coderef.CreateCodeReferenceCommand} */ (
      jspb.Message.getWrapperField(
        this,
        proto_coderef_command_pb.CreateCodeReferenceCommand,
        1
      )
    );
  };

/**
 * @param {?proto.bucketeer.coderef.CreateCodeReferenceCommand|undefined} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceRequest} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest.prototype.setCommand =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceRequest} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest.prototype.clearCommand =
  function () {
    return this.setCommand(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest.prototype.hasCommand =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional string environment_id = 2;
 * @return {string}
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest.prototype.getEnvironmentId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceRequest} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceRequest.prototype.setEnvironmentId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.CreateCodeReferenceResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.CreateCodeReferenceResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.CreateCodeReferenceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.CreateCodeReferenceResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        codeReference:
          (f = msg.getCodeReference()) &&
          proto_coderef_code_reference_pb.CodeReference.toObject(
            includeInstance,
            f
          )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceResponse}
 */
proto.bucketeer.coderef.CreateCodeReferenceResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.coderef.CreateCodeReferenceResponse();
    return proto.bucketeer.coderef.CreateCodeReferenceResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.CreateCodeReferenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceResponse}
 */
proto.bucketeer.coderef.CreateCodeReferenceResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_coderef_code_reference_pb.CodeReference();
          reader.readMessage(
            value,
            proto_coderef_code_reference_pb.CodeReference
              .deserializeBinaryFromReader
          );
          msg.setCodeReference(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.CreateCodeReferenceResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.CreateCodeReferenceResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.CreateCodeReferenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.CreateCodeReferenceResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getCodeReference();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto_coderef_code_reference_pb.CodeReference.serializeBinaryToWriter
      );
    }
  };

/**
 * optional CodeReference code_reference = 1;
 * @return {?proto.bucketeer.coderef.CodeReference}
 */
proto.bucketeer.coderef.CreateCodeReferenceResponse.prototype.getCodeReference =
  function () {
    return /** @type{?proto.bucketeer.coderef.CodeReference} */ (
      jspb.Message.getWrapperField(
        this,
        proto_coderef_code_reference_pb.CodeReference,
        1
      )
    );
  };

/**
 * @param {?proto.bucketeer.coderef.CodeReference|undefined} value
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceResponse} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceResponse.prototype.setCodeReference =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.coderef.CreateCodeReferenceResponse} returns this
 */
proto.bucketeer.coderef.CreateCodeReferenceResponse.prototype.clearCodeReference =
  function () {
    return this.setCodeReference(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.coderef.CreateCodeReferenceResponse.prototype.hasCodeReference =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.UpdateCodeReferenceRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.UpdateCodeReferenceRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.UpdateCodeReferenceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.UpdateCodeReferenceRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        command:
          (f = msg.getCommand()) &&
          proto_coderef_command_pb.UpdateCodeReferenceCommand.toObject(
            includeInstance,
            f
          ),
        environmentId: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceRequest}
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.coderef.UpdateCodeReferenceRequest();
    return proto.bucketeer.coderef.UpdateCodeReferenceRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.UpdateCodeReferenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceRequest}
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_coderef_command_pb.UpdateCodeReferenceCommand();
          reader.readMessage(
            value,
            proto_coderef_command_pb.UpdateCodeReferenceCommand
              .deserializeBinaryFromReader
          );
          msg.setCommand(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setEnvironmentId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.UpdateCodeReferenceRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.UpdateCodeReferenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getCommand();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto_coderef_command_pb.UpdateCodeReferenceCommand
          .serializeBinaryToWriter
      );
    }
    f = message.getEnvironmentId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional UpdateCodeReferenceCommand command = 1;
 * @return {?proto.bucketeer.coderef.UpdateCodeReferenceCommand}
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest.prototype.getCommand =
  function () {
    return /** @type{?proto.bucketeer.coderef.UpdateCodeReferenceCommand} */ (
      jspb.Message.getWrapperField(
        this,
        proto_coderef_command_pb.UpdateCodeReferenceCommand,
        1
      )
    );
  };

/**
 * @param {?proto.bucketeer.coderef.UpdateCodeReferenceCommand|undefined} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceRequest} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest.prototype.setCommand =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceRequest} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest.prototype.clearCommand =
  function () {
    return this.setCommand(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest.prototype.hasCommand =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional string environment_id = 2;
 * @return {string}
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest.prototype.getEnvironmentId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceRequest} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceRequest.prototype.setEnvironmentId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.UpdateCodeReferenceResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.UpdateCodeReferenceResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.UpdateCodeReferenceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.UpdateCodeReferenceResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        codeReference:
          (f = msg.getCodeReference()) &&
          proto_coderef_code_reference_pb.CodeReference.toObject(
            includeInstance,
            f
          )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceResponse}
 */
proto.bucketeer.coderef.UpdateCodeReferenceResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.coderef.UpdateCodeReferenceResponse();
    return proto.bucketeer.coderef.UpdateCodeReferenceResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.UpdateCodeReferenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceResponse}
 */
proto.bucketeer.coderef.UpdateCodeReferenceResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_coderef_code_reference_pb.CodeReference();
          reader.readMessage(
            value,
            proto_coderef_code_reference_pb.CodeReference
              .deserializeBinaryFromReader
          );
          msg.setCodeReference(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.UpdateCodeReferenceResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.UpdateCodeReferenceResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.UpdateCodeReferenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.UpdateCodeReferenceResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getCodeReference();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto_coderef_code_reference_pb.CodeReference.serializeBinaryToWriter
      );
    }
  };

/**
 * optional CodeReference code_reference = 1;
 * @return {?proto.bucketeer.coderef.CodeReference}
 */
proto.bucketeer.coderef.UpdateCodeReferenceResponse.prototype.getCodeReference =
  function () {
    return /** @type{?proto.bucketeer.coderef.CodeReference} */ (
      jspb.Message.getWrapperField(
        this,
        proto_coderef_code_reference_pb.CodeReference,
        1
      )
    );
  };

/**
 * @param {?proto.bucketeer.coderef.CodeReference|undefined} value
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceResponse} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceResponse.prototype.setCodeReference =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.coderef.UpdateCodeReferenceResponse} returns this
 */
proto.bucketeer.coderef.UpdateCodeReferenceResponse.prototype.clearCodeReference =
  function () {
    return this.setCodeReference(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.coderef.UpdateCodeReferenceResponse.prototype.hasCodeReference =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.DeleteCodeReferenceRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.DeleteCodeReferenceRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.DeleteCodeReferenceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.DeleteCodeReferenceRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        command:
          (f = msg.getCommand()) &&
          proto_coderef_command_pb.DeleteCodeReferenceCommand.toObject(
            includeInstance,
            f
          )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.DeleteCodeReferenceRequest}
 */
proto.bucketeer.coderef.DeleteCodeReferenceRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.coderef.DeleteCodeReferenceRequest();
    return proto.bucketeer.coderef.DeleteCodeReferenceRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.DeleteCodeReferenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.DeleteCodeReferenceRequest}
 */
proto.bucketeer.coderef.DeleteCodeReferenceRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_coderef_command_pb.DeleteCodeReferenceCommand();
          reader.readMessage(
            value,
            proto_coderef_command_pb.DeleteCodeReferenceCommand
              .deserializeBinaryFromReader
          );
          msg.setCommand(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.DeleteCodeReferenceRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.DeleteCodeReferenceRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.DeleteCodeReferenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.DeleteCodeReferenceRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getCommand();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto_coderef_command_pb.DeleteCodeReferenceCommand
          .serializeBinaryToWriter
      );
    }
  };

/**
 * optional DeleteCodeReferenceCommand command = 1;
 * @return {?proto.bucketeer.coderef.DeleteCodeReferenceCommand}
 */
proto.bucketeer.coderef.DeleteCodeReferenceRequest.prototype.getCommand =
  function () {
    return /** @type{?proto.bucketeer.coderef.DeleteCodeReferenceCommand} */ (
      jspb.Message.getWrapperField(
        this,
        proto_coderef_command_pb.DeleteCodeReferenceCommand,
        1
      )
    );
  };

/**
 * @param {?proto.bucketeer.coderef.DeleteCodeReferenceCommand|undefined} value
 * @return {!proto.bucketeer.coderef.DeleteCodeReferenceRequest} returns this
 */
proto.bucketeer.coderef.DeleteCodeReferenceRequest.prototype.setCommand =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.coderef.DeleteCodeReferenceRequest} returns this
 */
proto.bucketeer.coderef.DeleteCodeReferenceRequest.prototype.clearCommand =
  function () {
    return this.setCommand(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.coderef.DeleteCodeReferenceRequest.prototype.hasCommand =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.coderef.DeleteCodeReferenceResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.coderef.DeleteCodeReferenceResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.coderef.DeleteCodeReferenceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.coderef.DeleteCodeReferenceResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.coderef.DeleteCodeReferenceResponse}
 */
proto.bucketeer.coderef.DeleteCodeReferenceResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.coderef.DeleteCodeReferenceResponse();
    return proto.bucketeer.coderef.DeleteCodeReferenceResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.coderef.DeleteCodeReferenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.coderef.DeleteCodeReferenceResponse}
 */
proto.bucketeer.coderef.DeleteCodeReferenceResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.coderef.DeleteCodeReferenceResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.coderef.DeleteCodeReferenceResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.coderef.DeleteCodeReferenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.coderef.DeleteCodeReferenceResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
  };

goog.object.extend(exports, proto.bucketeer.coderef);
