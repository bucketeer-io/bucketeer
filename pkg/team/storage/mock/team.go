// Code generated by MockGen. DO NOT EDIT.
// Source: team.go
//
// Generated by this command:
//
//	mockgen -source=team.go -package=mock -destination=./mock/team.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	domain "github.com/bucketeer-io/bucketeer/pkg/team/domain"
	team "github.com/bucketeer-io/bucketeer/proto/team"
)

// MockTeamStorage is a mock of TeamStorage interface.
type MockTeamStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTeamStorageMockRecorder
}

// MockTeamStorageMockRecorder is the mock recorder for MockTeamStorage.
type MockTeamStorageMockRecorder struct {
	mock *MockTeamStorage
}

// NewMockTeamStorage creates a new mock instance.
func NewMockTeamStorage(ctrl *gomock.Controller) *MockTeamStorage {
	mock := &MockTeamStorage{ctrl: ctrl}
	mock.recorder = &MockTeamStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamStorage) EXPECT() *MockTeamStorageMockRecorder {
	return m.recorder
}

// DeleteTeam mocks base method.
func (m *MockTeamStorage) DeleteTeam(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockTeamStorageMockRecorder) DeleteTeam(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockTeamStorage)(nil).DeleteTeam), ctx, id)
}

// GetTeam mocks base method.
func (m *MockTeamStorage) GetTeam(ctx context.Context, id, organizationID string) (*domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, id, organizationID)
	ret0, _ := ret[0].(*domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockTeamStorageMockRecorder) GetTeam(ctx, id, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockTeamStorage)(nil).GetTeam), ctx, id, organizationID)
}

// ListTeams mocks base method.
func (m *MockTeamStorage) ListTeams(ctx context.Context, options *mysql.ListOptions) ([]*team.Team, int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", ctx, options)
	ret0, _ := ret[0].([]*team.Team)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockTeamStorageMockRecorder) ListTeams(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockTeamStorage)(nil).ListTeams), ctx, options)
}

// UpsertTeam mocks base method.
func (m *MockTeamStorage) UpsertTeam(ctx context.Context, team *domain.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTeam", ctx, team)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTeam indicates an expected call of UpsertTeam.
func (mr *MockTeamStorageMockRecorder) UpsertTeam(ctx, team any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTeam", reflect.TypeOf((*MockTeamStorage)(nil).UpsertTeam), ctx, team)
}
