// Copyright 2022 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: proto/experiment/service.proto

package experiment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListGoalsRequest_OrderBy int32

const (
	ListGoalsRequest_DEFAULT    ListGoalsRequest_OrderBy = 0
	ListGoalsRequest_NAME       ListGoalsRequest_OrderBy = 1
	ListGoalsRequest_CREATED_AT ListGoalsRequest_OrderBy = 2
	ListGoalsRequest_UPDATED_AT ListGoalsRequest_OrderBy = 3
)

// Enum value maps for ListGoalsRequest_OrderBy.
var (
	ListGoalsRequest_OrderBy_name = map[int32]string{
		0: "DEFAULT",
		1: "NAME",
		2: "CREATED_AT",
		3: "UPDATED_AT",
	}
	ListGoalsRequest_OrderBy_value = map[string]int32{
		"DEFAULT":    0,
		"NAME":       1,
		"CREATED_AT": 2,
		"UPDATED_AT": 3,
	}
)

func (x ListGoalsRequest_OrderBy) Enum() *ListGoalsRequest_OrderBy {
	p := new(ListGoalsRequest_OrderBy)
	*p = x
	return p
}

func (x ListGoalsRequest_OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListGoalsRequest_OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_experiment_service_proto_enumTypes[0].Descriptor()
}

func (ListGoalsRequest_OrderBy) Type() protoreflect.EnumType {
	return &file_proto_experiment_service_proto_enumTypes[0]
}

func (x ListGoalsRequest_OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListGoalsRequest_OrderBy.Descriptor instead.
func (ListGoalsRequest_OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{2, 0}
}

type ListGoalsRequest_OrderDirection int32

const (
	ListGoalsRequest_ASC  ListGoalsRequest_OrderDirection = 0
	ListGoalsRequest_DESC ListGoalsRequest_OrderDirection = 1
)

// Enum value maps for ListGoalsRequest_OrderDirection.
var (
	ListGoalsRequest_OrderDirection_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	ListGoalsRequest_OrderDirection_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x ListGoalsRequest_OrderDirection) Enum() *ListGoalsRequest_OrderDirection {
	p := new(ListGoalsRequest_OrderDirection)
	*p = x
	return p
}

func (x ListGoalsRequest_OrderDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListGoalsRequest_OrderDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_experiment_service_proto_enumTypes[1].Descriptor()
}

func (ListGoalsRequest_OrderDirection) Type() protoreflect.EnumType {
	return &file_proto_experiment_service_proto_enumTypes[1]
}

func (x ListGoalsRequest_OrderDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListGoalsRequest_OrderDirection.Descriptor instead.
func (ListGoalsRequest_OrderDirection) EnumDescriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{2, 1}
}

type ListExperimentsRequest_OrderBy int32

const (
	ListExperimentsRequest_DEFAULT    ListExperimentsRequest_OrderBy = 0
	ListExperimentsRequest_NAME       ListExperimentsRequest_OrderBy = 1
	ListExperimentsRequest_CREATED_AT ListExperimentsRequest_OrderBy = 2
	ListExperimentsRequest_UPDATED_AT ListExperimentsRequest_OrderBy = 3
)

// Enum value maps for ListExperimentsRequest_OrderBy.
var (
	ListExperimentsRequest_OrderBy_name = map[int32]string{
		0: "DEFAULT",
		1: "NAME",
		2: "CREATED_AT",
		3: "UPDATED_AT",
	}
	ListExperimentsRequest_OrderBy_value = map[string]int32{
		"DEFAULT":    0,
		"NAME":       1,
		"CREATED_AT": 2,
		"UPDATED_AT": 3,
	}
)

func (x ListExperimentsRequest_OrderBy) Enum() *ListExperimentsRequest_OrderBy {
	p := new(ListExperimentsRequest_OrderBy)
	*p = x
	return p
}

func (x ListExperimentsRequest_OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListExperimentsRequest_OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_experiment_service_proto_enumTypes[2].Descriptor()
}

func (ListExperimentsRequest_OrderBy) Type() protoreflect.EnumType {
	return &file_proto_experiment_service_proto_enumTypes[2]
}

func (x ListExperimentsRequest_OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListExperimentsRequest_OrderBy.Descriptor instead.
func (ListExperimentsRequest_OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{14, 0}
}

type ListExperimentsRequest_OrderDirection int32

const (
	ListExperimentsRequest_ASC  ListExperimentsRequest_OrderDirection = 0
	ListExperimentsRequest_DESC ListExperimentsRequest_OrderDirection = 1
)

// Enum value maps for ListExperimentsRequest_OrderDirection.
var (
	ListExperimentsRequest_OrderDirection_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	ListExperimentsRequest_OrderDirection_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x ListExperimentsRequest_OrderDirection) Enum() *ListExperimentsRequest_OrderDirection {
	p := new(ListExperimentsRequest_OrderDirection)
	*p = x
	return p
}

func (x ListExperimentsRequest_OrderDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListExperimentsRequest_OrderDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_experiment_service_proto_enumTypes[3].Descriptor()
}

func (ListExperimentsRequest_OrderDirection) Type() protoreflect.EnumType {
	return &file_proto_experiment_service_proto_enumTypes[3]
}

func (x ListExperimentsRequest_OrderDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListExperimentsRequest_OrderDirection.Descriptor instead.
func (ListExperimentsRequest_OrderDirection) EnumDescriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{14, 1}
}

type GetGoalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentNamespace string `protobuf:"bytes,2,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *GetGoalRequest) Reset() {
	*x = GetGoalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoalRequest) ProtoMessage() {}

func (x *GetGoalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoalRequest.ProtoReflect.Descriptor instead.
func (*GetGoalRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetGoalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGoalRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type GetGoalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goal *Goal `protobuf:"bytes,1,opt,name=goal,proto3" json:"goal,omitempty"`
}

func (x *GetGoalResponse) Reset() {
	*x = GetGoalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoalResponse) ProtoMessage() {}

func (x *GetGoalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoalResponse.ProtoReflect.Descriptor instead.
func (*GetGoalResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetGoalResponse) GetGoal() *Goal {
	if x != nil {
		return x.Goal
	}
	return nil
}

type ListGoalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize             int64                           `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Cursor               string                          `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	EnvironmentNamespace string                          `protobuf:"bytes,3,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	OrderBy              ListGoalsRequest_OrderBy        `protobuf:"varint,4,opt,name=order_by,json=orderBy,proto3,enum=bucketeer.experiment.ListGoalsRequest_OrderBy" json:"order_by,omitempty"`
	OrderDirection       ListGoalsRequest_OrderDirection `protobuf:"varint,5,opt,name=order_direction,json=orderDirection,proto3,enum=bucketeer.experiment.ListGoalsRequest_OrderDirection" json:"order_direction,omitempty"`
	SearchKeyword        string                          `protobuf:"bytes,6,opt,name=search_keyword,json=searchKeyword,proto3" json:"search_keyword,omitempty"`
	IsInUseStatus        *wrapperspb.BoolValue           `protobuf:"bytes,7,opt,name=is_in_use_status,json=isInUseStatus,proto3" json:"is_in_use_status,omitempty"`
	Archived             *wrapperspb.BoolValue           `protobuf:"bytes,8,opt,name=archived,proto3" json:"archived,omitempty"`
}

func (x *ListGoalsRequest) Reset() {
	*x = ListGoalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGoalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGoalsRequest) ProtoMessage() {}

func (x *ListGoalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGoalsRequest.ProtoReflect.Descriptor instead.
func (*ListGoalsRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListGoalsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGoalsRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListGoalsRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *ListGoalsRequest) GetOrderBy() ListGoalsRequest_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return ListGoalsRequest_DEFAULT
}

func (x *ListGoalsRequest) GetOrderDirection() ListGoalsRequest_OrderDirection {
	if x != nil {
		return x.OrderDirection
	}
	return ListGoalsRequest_ASC
}

func (x *ListGoalsRequest) GetSearchKeyword() string {
	if x != nil {
		return x.SearchKeyword
	}
	return ""
}

func (x *ListGoalsRequest) GetIsInUseStatus() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsInUseStatus
	}
	return nil
}

func (x *ListGoalsRequest) GetArchived() *wrapperspb.BoolValue {
	if x != nil {
		return x.Archived
	}
	return nil
}

type ListGoalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goals      []*Goal `protobuf:"bytes,1,rep,name=goals,proto3" json:"goals,omitempty"`
	Cursor     string  `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	TotalCount int64   `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListGoalsResponse) Reset() {
	*x = ListGoalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGoalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGoalsResponse) ProtoMessage() {}

func (x *ListGoalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGoalsResponse.ProtoReflect.Descriptor instead.
func (*ListGoalsResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListGoalsResponse) GetGoals() []*Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *ListGoalsResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListGoalsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CreateGoalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command              *CreateGoalCommand `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	EnvironmentNamespace string             `protobuf:"bytes,2,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *CreateGoalRequest) Reset() {
	*x = CreateGoalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoalRequest) ProtoMessage() {}

func (x *CreateGoalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoalRequest.ProtoReflect.Descriptor instead.
func (*CreateGoalRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateGoalRequest) GetCommand() *CreateGoalCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CreateGoalRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type CreateGoalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateGoalResponse) Reset() {
	*x = CreateGoalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoalResponse) ProtoMessage() {}

func (x *CreateGoalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoalResponse.ProtoReflect.Descriptor instead.
func (*CreateGoalResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{5}
}

type ArchiveGoalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Command              *ArchiveGoalCommand `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	EnvironmentNamespace string              `protobuf:"bytes,3,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *ArchiveGoalRequest) Reset() {
	*x = ArchiveGoalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveGoalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveGoalRequest) ProtoMessage() {}

func (x *ArchiveGoalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveGoalRequest.ProtoReflect.Descriptor instead.
func (*ArchiveGoalRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{6}
}

func (x *ArchiveGoalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArchiveGoalRequest) GetCommand() *ArchiveGoalCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ArchiveGoalRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type ArchiveGoalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArchiveGoalResponse) Reset() {
	*x = ArchiveGoalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveGoalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveGoalResponse) ProtoMessage() {}

func (x *ArchiveGoalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveGoalResponse.ProtoReflect.Descriptor instead.
func (*ArchiveGoalResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{7}
}

type DeleteGoalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Command              *DeleteGoalCommand `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	EnvironmentNamespace string             `protobuf:"bytes,3,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *DeleteGoalRequest) Reset() {
	*x = DeleteGoalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoalRequest) ProtoMessage() {}

func (x *DeleteGoalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoalRequest.ProtoReflect.Descriptor instead.
func (*DeleteGoalRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteGoalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteGoalRequest) GetCommand() *DeleteGoalCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *DeleteGoalRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type DeleteGoalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGoalResponse) Reset() {
	*x = DeleteGoalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoalResponse) ProtoMessage() {}

func (x *DeleteGoalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoalResponse.ProtoReflect.Descriptor instead.
func (*DeleteGoalResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{9}
}

type UpdateGoalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RenameCommand            *RenameGoalCommand            `protobuf:"bytes,2,opt,name=rename_command,json=renameCommand,proto3" json:"rename_command,omitempty"`
	ChangeDescriptionCommand *ChangeDescriptionGoalCommand `protobuf:"bytes,3,opt,name=change_description_command,json=changeDescriptionCommand,proto3" json:"change_description_command,omitempty"`
	EnvironmentNamespace     string                        `protobuf:"bytes,4,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *UpdateGoalRequest) Reset() {
	*x = UpdateGoalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoalRequest) ProtoMessage() {}

func (x *UpdateGoalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoalRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoalRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateGoalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateGoalRequest) GetRenameCommand() *RenameGoalCommand {
	if x != nil {
		return x.RenameCommand
	}
	return nil
}

func (x *UpdateGoalRequest) GetChangeDescriptionCommand() *ChangeDescriptionGoalCommand {
	if x != nil {
		return x.ChangeDescriptionCommand
	}
	return nil
}

func (x *UpdateGoalRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type UpdateGoalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGoalResponse) Reset() {
	*x = UpdateGoalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoalResponse) ProtoMessage() {}

func (x *UpdateGoalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoalResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoalResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{11}
}

type GetExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentNamespace string `protobuf:"bytes,2,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *GetExperimentRequest) Reset() {
	*x = GetExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentRequest) ProtoMessage() {}

func (x *GetExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetExperimentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetExperimentRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type GetExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *GetExperimentResponse) Reset() {
	*x = GetExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentResponse) ProtoMessage() {}

func (x *GetExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentResponse.ProtoReflect.Descriptor instead.
func (*GetExperimentResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetExperimentResponse) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type ListExperimentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId            string                                `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	FeatureVersion       *wrapperspb.Int32Value                `protobuf:"bytes,2,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	From                 int64                                 `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	To                   int64                                 `protobuf:"varint,4,opt,name=to,proto3" json:"to,omitempty"`
	PageSize             int64                                 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Cursor               string                                `protobuf:"bytes,6,opt,name=cursor,proto3" json:"cursor,omitempty"`
	EnvironmentNamespace string                                `protobuf:"bytes,7,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	Status               *wrapperspb.Int32Value                `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"` // [deprecated = true];
	Maintainer           string                                `protobuf:"bytes,9,opt,name=maintainer,proto3" json:"maintainer,omitempty"`
	OrderBy              ListExperimentsRequest_OrderBy        `protobuf:"varint,10,opt,name=order_by,json=orderBy,proto3,enum=bucketeer.experiment.ListExperimentsRequest_OrderBy" json:"order_by,omitempty"`
	OrderDirection       ListExperimentsRequest_OrderDirection `protobuf:"varint,11,opt,name=order_direction,json=orderDirection,proto3,enum=bucketeer.experiment.ListExperimentsRequest_OrderDirection" json:"order_direction,omitempty"`
	SearchKeyword        string                                `protobuf:"bytes,12,opt,name=search_keyword,json=searchKeyword,proto3" json:"search_keyword,omitempty"`
	Archived             *wrapperspb.BoolValue                 `protobuf:"bytes,13,opt,name=archived,proto3" json:"archived,omitempty"`
	Statuses             []Experiment_Status                   `protobuf:"varint,14,rep,packed,name=statuses,proto3,enum=bucketeer.experiment.Experiment_Status" json:"statuses,omitempty"`
}

func (x *ListExperimentsRequest) Reset() {
	*x = ListExperimentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExperimentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExperimentsRequest) ProtoMessage() {}

func (x *ListExperimentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExperimentsRequest.ProtoReflect.Descriptor instead.
func (*ListExperimentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListExperimentsRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *ListExperimentsRequest) GetFeatureVersion() *wrapperspb.Int32Value {
	if x != nil {
		return x.FeatureVersion
	}
	return nil
}

func (x *ListExperimentsRequest) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *ListExperimentsRequest) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *ListExperimentsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListExperimentsRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListExperimentsRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *ListExperimentsRequest) GetStatus() *wrapperspb.Int32Value {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListExperimentsRequest) GetMaintainer() string {
	if x != nil {
		return x.Maintainer
	}
	return ""
}

func (x *ListExperimentsRequest) GetOrderBy() ListExperimentsRequest_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return ListExperimentsRequest_DEFAULT
}

func (x *ListExperimentsRequest) GetOrderDirection() ListExperimentsRequest_OrderDirection {
	if x != nil {
		return x.OrderDirection
	}
	return ListExperimentsRequest_ASC
}

func (x *ListExperimentsRequest) GetSearchKeyword() string {
	if x != nil {
		return x.SearchKeyword
	}
	return ""
}

func (x *ListExperimentsRequest) GetArchived() *wrapperspb.BoolValue {
	if x != nil {
		return x.Archived
	}
	return nil
}

func (x *ListExperimentsRequest) GetStatuses() []Experiment_Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type ListExperimentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiments []*Experiment `protobuf:"bytes,1,rep,name=experiments,proto3" json:"experiments,omitempty"`
	Cursor      string        `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	TotalCount  int64         `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListExperimentsResponse) Reset() {
	*x = ListExperimentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExperimentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExperimentsResponse) ProtoMessage() {}

func (x *ListExperimentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExperimentsResponse.ProtoReflect.Descriptor instead.
func (*ListExperimentsResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListExperimentsResponse) GetExperiments() []*Experiment {
	if x != nil {
		return x.Experiments
	}
	return nil
}

func (x *ListExperimentsResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListExperimentsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CreateExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command              *CreateExperimentCommand `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	EnvironmentNamespace string                   `protobuf:"bytes,2,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *CreateExperimentRequest) Reset() {
	*x = CreateExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentRequest) ProtoMessage() {}

func (x *CreateExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentRequest.ProtoReflect.Descriptor instead.
func (*CreateExperimentRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{16}
}

func (x *CreateExperimentRequest) GetCommand() *CreateExperimentCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CreateExperimentRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type CreateExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *CreateExperimentResponse) Reset() {
	*x = CreateExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentResponse) ProtoMessage() {}

func (x *CreateExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentResponse.ProtoReflect.Descriptor instead.
func (*CreateExperimentResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{17}
}

func (x *CreateExperimentResponse) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type UpdateExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// [deprecated = true];
	EnvironmentNamespace          string                              `protobuf:"bytes,4,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	ChangeExperimentPeriodCommand *ChangeExperimentPeriodCommand      `protobuf:"bytes,5,opt,name=change_experiment_period_command,json=changeExperimentPeriodCommand,proto3" json:"change_experiment_period_command,omitempty"`
	ChangeNameCommand             *ChangeExperimentNameCommand        `protobuf:"bytes,6,opt,name=change_name_command,json=changeNameCommand,proto3" json:"change_name_command,omitempty"`
	ChangeDescriptionCommand      *ChangeExperimentDescriptionCommand `protobuf:"bytes,7,opt,name=change_description_command,json=changeDescriptionCommand,proto3" json:"change_description_command,omitempty"`
}

func (x *UpdateExperimentRequest) Reset() {
	*x = UpdateExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperimentRequest) ProtoMessage() {}

func (x *UpdateExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperimentRequest.ProtoReflect.Descriptor instead.
func (*UpdateExperimentRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateExperimentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateExperimentRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *UpdateExperimentRequest) GetChangeExperimentPeriodCommand() *ChangeExperimentPeriodCommand {
	if x != nil {
		return x.ChangeExperimentPeriodCommand
	}
	return nil
}

func (x *UpdateExperimentRequest) GetChangeNameCommand() *ChangeExperimentNameCommand {
	if x != nil {
		return x.ChangeNameCommand
	}
	return nil
}

func (x *UpdateExperimentRequest) GetChangeDescriptionCommand() *ChangeExperimentDescriptionCommand {
	if x != nil {
		return x.ChangeDescriptionCommand
	}
	return nil
}

type UpdateExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateExperimentResponse) Reset() {
	*x = UpdateExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperimentResponse) ProtoMessage() {}

func (x *UpdateExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperimentResponse.ProtoReflect.Descriptor instead.
func (*UpdateExperimentResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{19}
}

type StartExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentNamespace string                  `protobuf:"bytes,1,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	Id                   string                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Command              *StartExperimentCommand `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *StartExperimentRequest) Reset() {
	*x = StartExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartExperimentRequest) ProtoMessage() {}

func (x *StartExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartExperimentRequest.ProtoReflect.Descriptor instead.
func (*StartExperimentRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{20}
}

func (x *StartExperimentRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *StartExperimentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StartExperimentRequest) GetCommand() *StartExperimentCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

type StartExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartExperimentResponse) Reset() {
	*x = StartExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartExperimentResponse) ProtoMessage() {}

func (x *StartExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartExperimentResponse.ProtoReflect.Descriptor instead.
func (*StartExperimentResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{21}
}

type FinishExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentNamespace string                   `protobuf:"bytes,1,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	Id                   string                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Command              *FinishExperimentCommand `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *FinishExperimentRequest) Reset() {
	*x = FinishExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishExperimentRequest) ProtoMessage() {}

func (x *FinishExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishExperimentRequest.ProtoReflect.Descriptor instead.
func (*FinishExperimentRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{22}
}

func (x *FinishExperimentRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *FinishExperimentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FinishExperimentRequest) GetCommand() *FinishExperimentCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

type FinishExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinishExperimentResponse) Reset() {
	*x = FinishExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishExperimentResponse) ProtoMessage() {}

func (x *FinishExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishExperimentResponse.ProtoReflect.Descriptor instead.
func (*FinishExperimentResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{23}
}

type StopExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Command              *StopExperimentCommand `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	EnvironmentNamespace string                 `protobuf:"bytes,3,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *StopExperimentRequest) Reset() {
	*x = StopExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopExperimentRequest) ProtoMessage() {}

func (x *StopExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopExperimentRequest.ProtoReflect.Descriptor instead.
func (*StopExperimentRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{24}
}

func (x *StopExperimentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StopExperimentRequest) GetCommand() *StopExperimentCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *StopExperimentRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type StopExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopExperimentResponse) Reset() {
	*x = StopExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopExperimentResponse) ProtoMessage() {}

func (x *StopExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopExperimentResponse.ProtoReflect.Descriptor instead.
func (*StopExperimentResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{25}
}

type ArchiveExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Command              *ArchiveExperimentCommand `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	EnvironmentNamespace string                    `protobuf:"bytes,3,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *ArchiveExperimentRequest) Reset() {
	*x = ArchiveExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveExperimentRequest) ProtoMessage() {}

func (x *ArchiveExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveExperimentRequest.ProtoReflect.Descriptor instead.
func (*ArchiveExperimentRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{26}
}

func (x *ArchiveExperimentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArchiveExperimentRequest) GetCommand() *ArchiveExperimentCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ArchiveExperimentRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type ArchiveExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArchiveExperimentResponse) Reset() {
	*x = ArchiveExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveExperimentResponse) ProtoMessage() {}

func (x *ArchiveExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveExperimentResponse.ProtoReflect.Descriptor instead.
func (*ArchiveExperimentResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{27}
}

type DeleteExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Command              *DeleteExperimentCommand `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	EnvironmentNamespace string                   `protobuf:"bytes,3,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *DeleteExperimentRequest) Reset() {
	*x = DeleteExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentRequest) ProtoMessage() {}

func (x *DeleteExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentRequest.ProtoReflect.Descriptor instead.
func (*DeleteExperimentRequest) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteExperimentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteExperimentRequest) GetCommand() *DeleteExperimentCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *DeleteExperimentRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type DeleteExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteExperimentResponse) Reset() {
	*x = DeleteExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_experiment_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentResponse) ProtoMessage() {}

func (x *DeleteExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_experiment_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentResponse.ProtoReflect.Descriptor instead.
func (*DeleteExperimentResponse) Descriptor() ([]byte, []int) {
	return file_proto_experiment_service_proto_rawDescGZIP(), []int{29}
}

var File_proto_experiment_service_proto protoreflect.FileDescriptor

var file_proto_experiment_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x41, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c,
	0x22, 0xb2, 0x04, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x49, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x5e, 0x0a, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x6f, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x22, 0x40,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x03,
	0x22, 0x23, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x01, 0x22, 0x7e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x6f,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33,
	0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9b, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x14,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0d, 0x72, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x70, 0x0a, 0x1a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x15,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xa2, 0x06, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x4f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x64, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x36, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x40, 0x0a,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x03, 0x22,
	0x23, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45,
	0x53, 0x43, 0x10, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x97, 0x01,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc3, 0x03, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x1d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x61, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x76, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x1a, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa3, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa9, 0x01, 0x0a, 0x18, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x1b, 0x0a, 0x19,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33,
	0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xe7, 0x0c, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x61, 0x6c,
	0x12, 0x24, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x6f, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x27, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c,
	0x12, 0x27, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x47, 0x6f, 0x61, 0x6c, 0x12, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x6f, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x27, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2a, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x0e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x11,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_experiment_service_proto_rawDescOnce sync.Once
	file_proto_experiment_service_proto_rawDescData = file_proto_experiment_service_proto_rawDesc
)

func file_proto_experiment_service_proto_rawDescGZIP() []byte {
	file_proto_experiment_service_proto_rawDescOnce.Do(func() {
		file_proto_experiment_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_experiment_service_proto_rawDescData)
	})
	return file_proto_experiment_service_proto_rawDescData
}

var file_proto_experiment_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_experiment_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_proto_experiment_service_proto_goTypes = []interface{}{
	(ListGoalsRequest_OrderBy)(0),              // 0: bucketeer.experiment.ListGoalsRequest.OrderBy
	(ListGoalsRequest_OrderDirection)(0),       // 1: bucketeer.experiment.ListGoalsRequest.OrderDirection
	(ListExperimentsRequest_OrderBy)(0),        // 2: bucketeer.experiment.ListExperimentsRequest.OrderBy
	(ListExperimentsRequest_OrderDirection)(0), // 3: bucketeer.experiment.ListExperimentsRequest.OrderDirection
	(*GetGoalRequest)(nil),                     // 4: bucketeer.experiment.GetGoalRequest
	(*GetGoalResponse)(nil),                    // 5: bucketeer.experiment.GetGoalResponse
	(*ListGoalsRequest)(nil),                   // 6: bucketeer.experiment.ListGoalsRequest
	(*ListGoalsResponse)(nil),                  // 7: bucketeer.experiment.ListGoalsResponse
	(*CreateGoalRequest)(nil),                  // 8: bucketeer.experiment.CreateGoalRequest
	(*CreateGoalResponse)(nil),                 // 9: bucketeer.experiment.CreateGoalResponse
	(*ArchiveGoalRequest)(nil),                 // 10: bucketeer.experiment.ArchiveGoalRequest
	(*ArchiveGoalResponse)(nil),                // 11: bucketeer.experiment.ArchiveGoalResponse
	(*DeleteGoalRequest)(nil),                  // 12: bucketeer.experiment.DeleteGoalRequest
	(*DeleteGoalResponse)(nil),                 // 13: bucketeer.experiment.DeleteGoalResponse
	(*UpdateGoalRequest)(nil),                  // 14: bucketeer.experiment.UpdateGoalRequest
	(*UpdateGoalResponse)(nil),                 // 15: bucketeer.experiment.UpdateGoalResponse
	(*GetExperimentRequest)(nil),               // 16: bucketeer.experiment.GetExperimentRequest
	(*GetExperimentResponse)(nil),              // 17: bucketeer.experiment.GetExperimentResponse
	(*ListExperimentsRequest)(nil),             // 18: bucketeer.experiment.ListExperimentsRequest
	(*ListExperimentsResponse)(nil),            // 19: bucketeer.experiment.ListExperimentsResponse
	(*CreateExperimentRequest)(nil),            // 20: bucketeer.experiment.CreateExperimentRequest
	(*CreateExperimentResponse)(nil),           // 21: bucketeer.experiment.CreateExperimentResponse
	(*UpdateExperimentRequest)(nil),            // 22: bucketeer.experiment.UpdateExperimentRequest
	(*UpdateExperimentResponse)(nil),           // 23: bucketeer.experiment.UpdateExperimentResponse
	(*StartExperimentRequest)(nil),             // 24: bucketeer.experiment.StartExperimentRequest
	(*StartExperimentResponse)(nil),            // 25: bucketeer.experiment.StartExperimentResponse
	(*FinishExperimentRequest)(nil),            // 26: bucketeer.experiment.FinishExperimentRequest
	(*FinishExperimentResponse)(nil),           // 27: bucketeer.experiment.FinishExperimentResponse
	(*StopExperimentRequest)(nil),              // 28: bucketeer.experiment.StopExperimentRequest
	(*StopExperimentResponse)(nil),             // 29: bucketeer.experiment.StopExperimentResponse
	(*ArchiveExperimentRequest)(nil),           // 30: bucketeer.experiment.ArchiveExperimentRequest
	(*ArchiveExperimentResponse)(nil),          // 31: bucketeer.experiment.ArchiveExperimentResponse
	(*DeleteExperimentRequest)(nil),            // 32: bucketeer.experiment.DeleteExperimentRequest
	(*DeleteExperimentResponse)(nil),           // 33: bucketeer.experiment.DeleteExperimentResponse
	(*Goal)(nil),                               // 34: bucketeer.experiment.Goal
	(*wrapperspb.BoolValue)(nil),               // 35: google.protobuf.BoolValue
	(*CreateGoalCommand)(nil),                  // 36: bucketeer.experiment.CreateGoalCommand
	(*ArchiveGoalCommand)(nil),                 // 37: bucketeer.experiment.ArchiveGoalCommand
	(*DeleteGoalCommand)(nil),                  // 38: bucketeer.experiment.DeleteGoalCommand
	(*RenameGoalCommand)(nil),                  // 39: bucketeer.experiment.RenameGoalCommand
	(*ChangeDescriptionGoalCommand)(nil),       // 40: bucketeer.experiment.ChangeDescriptionGoalCommand
	(*Experiment)(nil),                         // 41: bucketeer.experiment.Experiment
	(*wrapperspb.Int32Value)(nil),              // 42: google.protobuf.Int32Value
	(Experiment_Status)(0),                     // 43: bucketeer.experiment.Experiment.Status
	(*CreateExperimentCommand)(nil),            // 44: bucketeer.experiment.CreateExperimentCommand
	(*ChangeExperimentPeriodCommand)(nil),      // 45: bucketeer.experiment.ChangeExperimentPeriodCommand
	(*ChangeExperimentNameCommand)(nil),        // 46: bucketeer.experiment.ChangeExperimentNameCommand
	(*ChangeExperimentDescriptionCommand)(nil), // 47: bucketeer.experiment.ChangeExperimentDescriptionCommand
	(*StartExperimentCommand)(nil),             // 48: bucketeer.experiment.StartExperimentCommand
	(*FinishExperimentCommand)(nil),            // 49: bucketeer.experiment.FinishExperimentCommand
	(*StopExperimentCommand)(nil),              // 50: bucketeer.experiment.StopExperimentCommand
	(*ArchiveExperimentCommand)(nil),           // 51: bucketeer.experiment.ArchiveExperimentCommand
	(*DeleteExperimentCommand)(nil),            // 52: bucketeer.experiment.DeleteExperimentCommand
}
var file_proto_experiment_service_proto_depIdxs = []int32{
	34, // 0: bucketeer.experiment.GetGoalResponse.goal:type_name -> bucketeer.experiment.Goal
	0,  // 1: bucketeer.experiment.ListGoalsRequest.order_by:type_name -> bucketeer.experiment.ListGoalsRequest.OrderBy
	1,  // 2: bucketeer.experiment.ListGoalsRequest.order_direction:type_name -> bucketeer.experiment.ListGoalsRequest.OrderDirection
	35, // 3: bucketeer.experiment.ListGoalsRequest.is_in_use_status:type_name -> google.protobuf.BoolValue
	35, // 4: bucketeer.experiment.ListGoalsRequest.archived:type_name -> google.protobuf.BoolValue
	34, // 5: bucketeer.experiment.ListGoalsResponse.goals:type_name -> bucketeer.experiment.Goal
	36, // 6: bucketeer.experiment.CreateGoalRequest.command:type_name -> bucketeer.experiment.CreateGoalCommand
	37, // 7: bucketeer.experiment.ArchiveGoalRequest.command:type_name -> bucketeer.experiment.ArchiveGoalCommand
	38, // 8: bucketeer.experiment.DeleteGoalRequest.command:type_name -> bucketeer.experiment.DeleteGoalCommand
	39, // 9: bucketeer.experiment.UpdateGoalRequest.rename_command:type_name -> bucketeer.experiment.RenameGoalCommand
	40, // 10: bucketeer.experiment.UpdateGoalRequest.change_description_command:type_name -> bucketeer.experiment.ChangeDescriptionGoalCommand
	41, // 11: bucketeer.experiment.GetExperimentResponse.experiment:type_name -> bucketeer.experiment.Experiment
	42, // 12: bucketeer.experiment.ListExperimentsRequest.feature_version:type_name -> google.protobuf.Int32Value
	42, // 13: bucketeer.experiment.ListExperimentsRequest.status:type_name -> google.protobuf.Int32Value
	2,  // 14: bucketeer.experiment.ListExperimentsRequest.order_by:type_name -> bucketeer.experiment.ListExperimentsRequest.OrderBy
	3,  // 15: bucketeer.experiment.ListExperimentsRequest.order_direction:type_name -> bucketeer.experiment.ListExperimentsRequest.OrderDirection
	35, // 16: bucketeer.experiment.ListExperimentsRequest.archived:type_name -> google.protobuf.BoolValue
	43, // 17: bucketeer.experiment.ListExperimentsRequest.statuses:type_name -> bucketeer.experiment.Experiment.Status
	41, // 18: bucketeer.experiment.ListExperimentsResponse.experiments:type_name -> bucketeer.experiment.Experiment
	44, // 19: bucketeer.experiment.CreateExperimentRequest.command:type_name -> bucketeer.experiment.CreateExperimentCommand
	41, // 20: bucketeer.experiment.CreateExperimentResponse.experiment:type_name -> bucketeer.experiment.Experiment
	45, // 21: bucketeer.experiment.UpdateExperimentRequest.change_experiment_period_command:type_name -> bucketeer.experiment.ChangeExperimentPeriodCommand
	46, // 22: bucketeer.experiment.UpdateExperimentRequest.change_name_command:type_name -> bucketeer.experiment.ChangeExperimentNameCommand
	47, // 23: bucketeer.experiment.UpdateExperimentRequest.change_description_command:type_name -> bucketeer.experiment.ChangeExperimentDescriptionCommand
	48, // 24: bucketeer.experiment.StartExperimentRequest.command:type_name -> bucketeer.experiment.StartExperimentCommand
	49, // 25: bucketeer.experiment.FinishExperimentRequest.command:type_name -> bucketeer.experiment.FinishExperimentCommand
	50, // 26: bucketeer.experiment.StopExperimentRequest.command:type_name -> bucketeer.experiment.StopExperimentCommand
	51, // 27: bucketeer.experiment.ArchiveExperimentRequest.command:type_name -> bucketeer.experiment.ArchiveExperimentCommand
	52, // 28: bucketeer.experiment.DeleteExperimentRequest.command:type_name -> bucketeer.experiment.DeleteExperimentCommand
	4,  // 29: bucketeer.experiment.ExperimentService.GetGoal:input_type -> bucketeer.experiment.GetGoalRequest
	6,  // 30: bucketeer.experiment.ExperimentService.ListGoals:input_type -> bucketeer.experiment.ListGoalsRequest
	8,  // 31: bucketeer.experiment.ExperimentService.CreateGoal:input_type -> bucketeer.experiment.CreateGoalRequest
	14, // 32: bucketeer.experiment.ExperimentService.UpdateGoal:input_type -> bucketeer.experiment.UpdateGoalRequest
	10, // 33: bucketeer.experiment.ExperimentService.ArchiveGoal:input_type -> bucketeer.experiment.ArchiveGoalRequest
	12, // 34: bucketeer.experiment.ExperimentService.DeleteGoal:input_type -> bucketeer.experiment.DeleteGoalRequest
	16, // 35: bucketeer.experiment.ExperimentService.GetExperiment:input_type -> bucketeer.experiment.GetExperimentRequest
	18, // 36: bucketeer.experiment.ExperimentService.ListExperiments:input_type -> bucketeer.experiment.ListExperimentsRequest
	20, // 37: bucketeer.experiment.ExperimentService.CreateExperiment:input_type -> bucketeer.experiment.CreateExperimentRequest
	22, // 38: bucketeer.experiment.ExperimentService.UpdateExperiment:input_type -> bucketeer.experiment.UpdateExperimentRequest
	24, // 39: bucketeer.experiment.ExperimentService.StartExperiment:input_type -> bucketeer.experiment.StartExperimentRequest
	26, // 40: bucketeer.experiment.ExperimentService.FinishExperiment:input_type -> bucketeer.experiment.FinishExperimentRequest
	28, // 41: bucketeer.experiment.ExperimentService.StopExperiment:input_type -> bucketeer.experiment.StopExperimentRequest
	30, // 42: bucketeer.experiment.ExperimentService.ArchiveExperiment:input_type -> bucketeer.experiment.ArchiveExperimentRequest
	32, // 43: bucketeer.experiment.ExperimentService.DeleteExperiment:input_type -> bucketeer.experiment.DeleteExperimentRequest
	5,  // 44: bucketeer.experiment.ExperimentService.GetGoal:output_type -> bucketeer.experiment.GetGoalResponse
	7,  // 45: bucketeer.experiment.ExperimentService.ListGoals:output_type -> bucketeer.experiment.ListGoalsResponse
	9,  // 46: bucketeer.experiment.ExperimentService.CreateGoal:output_type -> bucketeer.experiment.CreateGoalResponse
	15, // 47: bucketeer.experiment.ExperimentService.UpdateGoal:output_type -> bucketeer.experiment.UpdateGoalResponse
	11, // 48: bucketeer.experiment.ExperimentService.ArchiveGoal:output_type -> bucketeer.experiment.ArchiveGoalResponse
	13, // 49: bucketeer.experiment.ExperimentService.DeleteGoal:output_type -> bucketeer.experiment.DeleteGoalResponse
	17, // 50: bucketeer.experiment.ExperimentService.GetExperiment:output_type -> bucketeer.experiment.GetExperimentResponse
	19, // 51: bucketeer.experiment.ExperimentService.ListExperiments:output_type -> bucketeer.experiment.ListExperimentsResponse
	21, // 52: bucketeer.experiment.ExperimentService.CreateExperiment:output_type -> bucketeer.experiment.CreateExperimentResponse
	23, // 53: bucketeer.experiment.ExperimentService.UpdateExperiment:output_type -> bucketeer.experiment.UpdateExperimentResponse
	25, // 54: bucketeer.experiment.ExperimentService.StartExperiment:output_type -> bucketeer.experiment.StartExperimentResponse
	27, // 55: bucketeer.experiment.ExperimentService.FinishExperiment:output_type -> bucketeer.experiment.FinishExperimentResponse
	29, // 56: bucketeer.experiment.ExperimentService.StopExperiment:output_type -> bucketeer.experiment.StopExperimentResponse
	31, // 57: bucketeer.experiment.ExperimentService.ArchiveExperiment:output_type -> bucketeer.experiment.ArchiveExperimentResponse
	33, // 58: bucketeer.experiment.ExperimentService.DeleteExperiment:output_type -> bucketeer.experiment.DeleteExperimentResponse
	44, // [44:59] is the sub-list for method output_type
	29, // [29:44] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_proto_experiment_service_proto_init() }
func file_proto_experiment_service_proto_init() {
	if File_proto_experiment_service_proto != nil {
		return
	}
	file_proto_experiment_command_proto_init()
	file_proto_experiment_goal_proto_init()
	file_proto_experiment_experiment_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_experiment_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGoalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGoalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveGoalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveGoalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExperimentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExperimentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_experiment_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_experiment_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_experiment_service_proto_goTypes,
		DependencyIndexes: file_proto_experiment_service_proto_depIdxs,
		EnumInfos:         file_proto_experiment_service_proto_enumTypes,
		MessageInfos:      file_proto_experiment_service_proto_msgTypes,
	}.Build()
	File_proto_experiment_service_proto = out.File
	file_proto_experiment_service_proto_rawDesc = nil
	file_proto_experiment_service_proto_goTypes = nil
	file_proto_experiment_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExperimentServiceClient is the client API for ExperimentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExperimentServiceClient interface {
	GetGoal(ctx context.Context, in *GetGoalRequest, opts ...grpc.CallOption) (*GetGoalResponse, error)
	ListGoals(ctx context.Context, in *ListGoalsRequest, opts ...grpc.CallOption) (*ListGoalsResponse, error)
	CreateGoal(ctx context.Context, in *CreateGoalRequest, opts ...grpc.CallOption) (*CreateGoalResponse, error)
	UpdateGoal(ctx context.Context, in *UpdateGoalRequest, opts ...grpc.CallOption) (*UpdateGoalResponse, error)
	ArchiveGoal(ctx context.Context, in *ArchiveGoalRequest, opts ...grpc.CallOption) (*ArchiveGoalResponse, error)
	DeleteGoal(ctx context.Context, in *DeleteGoalRequest, opts ...grpc.CallOption) (*DeleteGoalResponse, error)
	GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentResponse, error)
	ListExperiments(ctx context.Context, in *ListExperimentsRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error)
	CreateExperiment(ctx context.Context, in *CreateExperimentRequest, opts ...grpc.CallOption) (*CreateExperimentResponse, error)
	UpdateExperiment(ctx context.Context, in *UpdateExperimentRequest, opts ...grpc.CallOption) (*UpdateExperimentResponse, error)
	StartExperiment(ctx context.Context, in *StartExperimentRequest, opts ...grpc.CallOption) (*StartExperimentResponse, error)
	FinishExperiment(ctx context.Context, in *FinishExperimentRequest, opts ...grpc.CallOption) (*FinishExperimentResponse, error)
	StopExperiment(ctx context.Context, in *StopExperimentRequest, opts ...grpc.CallOption) (*StopExperimentResponse, error)
	ArchiveExperiment(ctx context.Context, in *ArchiveExperimentRequest, opts ...grpc.CallOption) (*ArchiveExperimentResponse, error)
	DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentResponse, error)
}

type experimentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentServiceClient(cc grpc.ClientConnInterface) ExperimentServiceClient {
	return &experimentServiceClient{cc}
}

func (c *experimentServiceClient) GetGoal(ctx context.Context, in *GetGoalRequest, opts ...grpc.CallOption) (*GetGoalResponse, error) {
	out := new(GetGoalResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/GetGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ListGoals(ctx context.Context, in *ListGoalsRequest, opts ...grpc.CallOption) (*ListGoalsResponse, error) {
	out := new(ListGoalsResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/ListGoals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) CreateGoal(ctx context.Context, in *CreateGoalRequest, opts ...grpc.CallOption) (*CreateGoalResponse, error) {
	out := new(CreateGoalResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/CreateGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateGoal(ctx context.Context, in *UpdateGoalRequest, opts ...grpc.CallOption) (*UpdateGoalResponse, error) {
	out := new(UpdateGoalResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/UpdateGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ArchiveGoal(ctx context.Context, in *ArchiveGoalRequest, opts ...grpc.CallOption) (*ArchiveGoalResponse, error) {
	out := new(ArchiveGoalResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/ArchiveGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteGoal(ctx context.Context, in *DeleteGoalRequest, opts ...grpc.CallOption) (*DeleteGoalResponse, error) {
	out := new(DeleteGoalResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/DeleteGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentResponse, error) {
	out := new(GetExperimentResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/GetExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ListExperiments(ctx context.Context, in *ListExperimentsRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error) {
	out := new(ListExperimentsResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/ListExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) CreateExperiment(ctx context.Context, in *CreateExperimentRequest, opts ...grpc.CallOption) (*CreateExperimentResponse, error) {
	out := new(CreateExperimentResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/CreateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateExperiment(ctx context.Context, in *UpdateExperimentRequest, opts ...grpc.CallOption) (*UpdateExperimentResponse, error) {
	out := new(UpdateExperimentResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/UpdateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StartExperiment(ctx context.Context, in *StartExperimentRequest, opts ...grpc.CallOption) (*StartExperimentResponse, error) {
	out := new(StartExperimentResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/StartExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) FinishExperiment(ctx context.Context, in *FinishExperimentRequest, opts ...grpc.CallOption) (*FinishExperimentResponse, error) {
	out := new(FinishExperimentResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/FinishExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StopExperiment(ctx context.Context, in *StopExperimentRequest, opts ...grpc.CallOption) (*StopExperimentResponse, error) {
	out := new(StopExperimentResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/StopExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ArchiveExperiment(ctx context.Context, in *ArchiveExperimentRequest, opts ...grpc.CallOption) (*ArchiveExperimentResponse, error) {
	out := new(ArchiveExperimentResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/ArchiveExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentResponse, error) {
	out := new(DeleteExperimentResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.experiment.ExperimentService/DeleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperimentServiceServer is the server API for ExperimentService service.
type ExperimentServiceServer interface {
	GetGoal(context.Context, *GetGoalRequest) (*GetGoalResponse, error)
	ListGoals(context.Context, *ListGoalsRequest) (*ListGoalsResponse, error)
	CreateGoal(context.Context, *CreateGoalRequest) (*CreateGoalResponse, error)
	UpdateGoal(context.Context, *UpdateGoalRequest) (*UpdateGoalResponse, error)
	ArchiveGoal(context.Context, *ArchiveGoalRequest) (*ArchiveGoalResponse, error)
	DeleteGoal(context.Context, *DeleteGoalRequest) (*DeleteGoalResponse, error)
	GetExperiment(context.Context, *GetExperimentRequest) (*GetExperimentResponse, error)
	ListExperiments(context.Context, *ListExperimentsRequest) (*ListExperimentsResponse, error)
	CreateExperiment(context.Context, *CreateExperimentRequest) (*CreateExperimentResponse, error)
	UpdateExperiment(context.Context, *UpdateExperimentRequest) (*UpdateExperimentResponse, error)
	StartExperiment(context.Context, *StartExperimentRequest) (*StartExperimentResponse, error)
	FinishExperiment(context.Context, *FinishExperimentRequest) (*FinishExperimentResponse, error)
	StopExperiment(context.Context, *StopExperimentRequest) (*StopExperimentResponse, error)
	ArchiveExperiment(context.Context, *ArchiveExperimentRequest) (*ArchiveExperimentResponse, error)
	DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentResponse, error)
}

// UnimplementedExperimentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExperimentServiceServer struct {
}

func (*UnimplementedExperimentServiceServer) GetGoal(context.Context, *GetGoalRequest) (*GetGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoal not implemented")
}
func (*UnimplementedExperimentServiceServer) ListGoals(context.Context, *ListGoalsRequest) (*ListGoalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoals not implemented")
}
func (*UnimplementedExperimentServiceServer) CreateGoal(context.Context, *CreateGoalRequest) (*CreateGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoal not implemented")
}
func (*UnimplementedExperimentServiceServer) UpdateGoal(context.Context, *UpdateGoalRequest) (*UpdateGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoal not implemented")
}
func (*UnimplementedExperimentServiceServer) ArchiveGoal(context.Context, *ArchiveGoalRequest) (*ArchiveGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveGoal not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteGoal(context.Context, *DeleteGoalRequest) (*DeleteGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoal not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperiment(context.Context, *GetExperimentRequest) (*GetExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) ListExperiments(context.Context, *ListExperimentsRequest) (*ListExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) CreateExperiment(context.Context, *CreateExperimentRequest) (*CreateExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) UpdateExperiment(context.Context, *UpdateExperimentRequest) (*UpdateExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) StartExperiment(context.Context, *StartExperimentRequest) (*StartExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) FinishExperiment(context.Context, *FinishExperimentRequest) (*FinishExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) StopExperiment(context.Context, *StopExperimentRequest) (*StopExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) ArchiveExperiment(context.Context, *ArchiveExperimentRequest) (*ArchiveExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiment not implemented")
}

func RegisterExperimentServiceServer(s *grpc.Server, srv ExperimentServiceServer) {
	s.RegisterService(&_ExperimentService_serviceDesc, srv)
}

func _ExperimentService_GetGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/GetGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetGoal(ctx, req.(*GetGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ListGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/ListGoals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListGoals(ctx, req.(*ListGoalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_CreateGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).CreateGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/CreateGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).CreateGoal(ctx, req.(*CreateGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/UpdateGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateGoal(ctx, req.(*UpdateGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ArchiveGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ArchiveGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/ArchiveGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ArchiveGoal(ctx, req.(*ArchiveGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/DeleteGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteGoal(ctx, req.(*DeleteGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/GetExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperiment(ctx, req.(*GetExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ListExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExperimentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/ListExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListExperiments(ctx, req.(*ListExperimentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_CreateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/CreateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, req.(*CreateExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/UpdateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateExperiment(ctx, req.(*UpdateExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StartExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).StartExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/StartExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).StartExperiment(ctx, req.(*StartExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_FinishExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).FinishExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/FinishExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).FinishExperiment(ctx, req.(*FinishExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StopExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).StopExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/StopExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).StopExperiment(ctx, req.(*StopExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ArchiveExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ArchiveExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/ArchiveExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ArchiveExperiment(ctx, req.(*ArchiveExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.experiment.ExperimentService/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, req.(*DeleteExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExperimentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bucketeer.experiment.ExperimentService",
	HandlerType: (*ExperimentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoal",
			Handler:    _ExperimentService_GetGoal_Handler,
		},
		{
			MethodName: "ListGoals",
			Handler:    _ExperimentService_ListGoals_Handler,
		},
		{
			MethodName: "CreateGoal",
			Handler:    _ExperimentService_CreateGoal_Handler,
		},
		{
			MethodName: "UpdateGoal",
			Handler:    _ExperimentService_UpdateGoal_Handler,
		},
		{
			MethodName: "ArchiveGoal",
			Handler:    _ExperimentService_ArchiveGoal_Handler,
		},
		{
			MethodName: "DeleteGoal",
			Handler:    _ExperimentService_DeleteGoal_Handler,
		},
		{
			MethodName: "GetExperiment",
			Handler:    _ExperimentService_GetExperiment_Handler,
		},
		{
			MethodName: "ListExperiments",
			Handler:    _ExperimentService_ListExperiments_Handler,
		},
		{
			MethodName: "CreateExperiment",
			Handler:    _ExperimentService_CreateExperiment_Handler,
		},
		{
			MethodName: "UpdateExperiment",
			Handler:    _ExperimentService_UpdateExperiment_Handler,
		},
		{
			MethodName: "StartExperiment",
			Handler:    _ExperimentService_StartExperiment_Handler,
		},
		{
			MethodName: "FinishExperiment",
			Handler:    _ExperimentService_FinishExperiment_Handler,
		},
		{
			MethodName: "StopExperiment",
			Handler:    _ExperimentService_StopExperiment_Handler,
		},
		{
			MethodName: "ArchiveExperiment",
			Handler:    _ExperimentService_ArchiveExperiment_Handler,
		},
		{
			MethodName: "DeleteExperiment",
			Handler:    _ExperimentService_DeleteExperiment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/experiment/service.proto",
}
