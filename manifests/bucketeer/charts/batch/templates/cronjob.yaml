{{- if eq (include "batch.deploy" .) "true" }}
{{- range $.Values.cronjob.jobs }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "batch-server.fullname" $ }}-{{ .name}}
  namespace: {{ $.Values.namespace }}
  labels:
    app: {{ template "batch-server.name" $ }}
    chart: {{ template "batch-server.chart" $ }}
    release: {{ template "batch-server.fullname" $ }}
    heritage: {{ $.Release.Service }}
spec:
  concurrencyPolicy: Forbid
  timeZone: {{ $.Values.env.timezone }}
  schedule: "{{ .schedule }}"
  successfulJobsHistoryLimit: {{ $.Values.cronjob.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ $.Values.cronjob.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          volumes:
            - name: service-cert-secret
              secret:
                secretName: {{ template "service-cert-secret" $ }}
            - name: service-token-secret
              secret:
                secretName: {{ template "service-token-secret" $ }}
          containers:
            - name: {{ .name }}
              image: curlimages/curl:8.1.2
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: service-cert-secret
                  mountPath: /usr/local/certs/service
                  readOnly: true
                - name: service-token-secret
                  mountPath: /usr/local/service-token
                  readOnly: true
              env:
                - name: WEB_GATEWAY_ADDRESS
                  value: "{{ $.Values.cronjob.webGatewayAddress }}"
              command:
                - /bin/sh
              args:
                - -c
                - |
                  echo "Start {{ .name }} job."
                  ENDPOINT="${WEB_GATEWAY_ADDRESS}/bucketeer.batch.BatchService/ExecuteBatchJob"
                  TOKEN=`cat /usr/local/service-token/token`
                  
                  # Run the curl command in the background
                  echo "Starting asynchronous API call to ${ENDPOINT}"
                  curl -X POST -m 3600 --cacert /usr/local/certs/service/tls.crt -d '{"job": "{{ .jobId }}"}' -H "authorization: bearer ${TOKEN}" -H "Content-Type: application/json" -s -o /dev/null ${ENDPOINT} > /dev/null 2>&1 &
                  
                  # Store the process ID of the background curl process
                  CURL_PID=$!
                  
                  echo "{{ .name }} job submitted asynchronously with PID: ${CURL_PID}"
                  echo "CronJob completed successfully. The API call will continue running in the background."
                  
                  # Exit with success since we're just initiating the job, not waiting for it
                  exit 0
          restartPolicy: Never
{{- end }}
{{- end }}