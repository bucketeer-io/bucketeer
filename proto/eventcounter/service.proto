// Copyright 2023 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.eventcounter;
option go_package = "github.com/bucketeer-io/bucketeer/proto/eventcounter";

import "google/protobuf/wrappers.proto";

import "proto/eventcounter/experiment_result.proto";
import "proto/eventcounter/timeseries.proto";
import "proto/eventcounter/variation_count.proto";

message GetExperimentEvaluationCountRequest {
  string environment_namespace = 1;
  int64 start_at = 2;
  int64 end_at = 3;
  string feature_id = 4;
  int32 feature_version = 5;
  repeated string variation_ids = 6;
}

message GetExperimentEvaluationCountResponse {
  string feature_id = 1;
  int32 feature_version = 2;
  repeated VariationCount variation_counts = 3;
}

message GetEvaluationTimeseriesCountRequest {
  enum TimeRange {
    UNKNOWN = 0;
    TWENTY_FOUR_HOURS = 1;
    SEVEN_DAYS = 2;
    FOURTEEN_DAYS = 3;
    THIRTY_DAYS = 4;
  }
  string environment_namespace = 1;
  string feature_id = 2;
  TimeRange time_range = 3;
}

message GetEvaluationTimeseriesCountResponse {
  repeated VariationTimeseries user_counts = 1;
  repeated VariationTimeseries event_counts = 2;
}

message GetExperimentResultRequest {
  string environment_namespace = 1;
  string experiment_id = 2;
}

message GetExperimentResultResponse {
  ExperimentResult experiment_result = 1;
}

message ListExperimentResultsRequest {
  string feature_id = 1;
  google.protobuf.Int32Value feature_version = 2;
  string environment_namespace = 3;
}

message ListExperimentResultsResponse {
  map<string, ExperimentResult> results = 1;
}

message GetExperimentGoalCountRequest {
  string environment_namespace = 1;
  int64 start_at = 2;
  int64 end_at = 3;
  string goal_id = 4;
  string feature_id = 5;
  int32 feature_version = 6;
  repeated string variation_ids = 7;
}

message GetExperimentGoalCountResponse {
  string goal_id = 1;
  repeated VariationCount variation_counts = 2;
}

message GetOpsEvaluationUserCountRequest {
  string environment_namespace = 1;
  string ops_rule_id = 2;
  string clause_id = 3;
  string feature_id = 4;
  int32 feature_version = 5;
  string variation_id = 6;
}

message GetOpsEvaluationUserCountResponse {
  string ops_rule_id = 1;
  string clause_id = 2;
  int64 count = 3;
}

message GetOpsGoalUserCountRequest {
  string environment_namespace = 1;
  string ops_rule_id = 2;
  string clause_id = 3;
  string feature_id = 4;
  int32 feature_version = 5;
  string variation_id = 6;
}

message GetOpsGoalUserCountResponse {
  string ops_rule_id = 1;
  string clause_id = 2;
  int64 count = 3;
}

message GetMAUCountRequest {
  string environment_namespace = 1;
  string year_month = 2;
}

message GetMAUCountResponse {
  int64 event_count = 1;
  int64 user_count = 2;
}

service EventCounterService {
  rpc GetExperimentEvaluationCount(GetExperimentEvaluationCountRequest)
      returns (GetExperimentEvaluationCountResponse) {}

  rpc GetEvaluationTimeseriesCount(GetEvaluationTimeseriesCountRequest)
      returns (GetEvaluationTimeseriesCountResponse) {}

  rpc GetExperimentResult(GetExperimentResultRequest)
      returns (GetExperimentResultResponse) {}

  rpc ListExperimentResults(ListExperimentResultsRequest)
      returns (ListExperimentResultsResponse) {}

  rpc GetExperimentGoalCount(GetExperimentGoalCountRequest)
      returns (GetExperimentGoalCountResponse) {}

  rpc GetMAUCount(GetMAUCountRequest) returns (GetMAUCountResponse) {}

  rpc GetOpsEvaluationUserCount(GetOpsEvaluationUserCountRequest)
      returns (GetOpsEvaluationUserCountResponse) {}

  rpc GetOpsGoalUserCount(GetOpsGoalUserCountRequest)
      returns (GetOpsGoalUserCountResponse) {}
}
