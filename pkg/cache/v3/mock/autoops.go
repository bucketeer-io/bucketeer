// Code generated by MockGen. DO NOT EDIT.
// Source: autoops.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	autoops "github.com/bucketeer-io/bucketeer/proto/autoops"
)

// MockAutoOpsRulesCache is a mock of AutoOpsRulesCache interface.
type MockAutoOpsRulesCache struct {
	ctrl     *gomock.Controller
	recorder *MockAutoOpsRulesCacheMockRecorder
}

// MockAutoOpsRulesCacheMockRecorder is the mock recorder for MockAutoOpsRulesCache.
type MockAutoOpsRulesCacheMockRecorder struct {
	mock *MockAutoOpsRulesCache
}

// NewMockAutoOpsRulesCache creates a new mock instance.
func NewMockAutoOpsRulesCache(ctrl *gomock.Controller) *MockAutoOpsRulesCache {
	mock := &MockAutoOpsRulesCache{ctrl: ctrl}
	mock.recorder = &MockAutoOpsRulesCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutoOpsRulesCache) EXPECT() *MockAutoOpsRulesCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAutoOpsRulesCache) Get(environmentNamespace string) (*autoops.AutoOpsRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", environmentNamespace)
	ret0, _ := ret[0].(*autoops.AutoOpsRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAutoOpsRulesCacheMockRecorder) Get(environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAutoOpsRulesCache)(nil).Get), environmentNamespace)
}

// Put mocks base method.
func (m *MockAutoOpsRulesCache) Put(autoOps *autoops.AutoOpsRules, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", autoOps, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockAutoOpsRulesCacheMockRecorder) Put(autoOps, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockAutoOpsRulesCache)(nil).Put), autoOps, environmentNamespace)
}
