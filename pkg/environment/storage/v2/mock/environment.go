// Code generated by MockGen. DO NOT EDIT.
// Source: environment.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	domain "github.com/bucketeer-io/bucketeer/pkg/environment/domain"
	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	environment "github.com/bucketeer-io/bucketeer/proto/environment"
)

// MockEnvironmentStorage is a mock of EnvironmentStorage interface.
type MockEnvironmentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentStorageMockRecorder
}

// MockEnvironmentStorageMockRecorder is the mock recorder for MockEnvironmentStorage.
type MockEnvironmentStorageMockRecorder struct {
	mock *MockEnvironmentStorage
}

// NewMockEnvironmentStorage creates a new mock instance.
func NewMockEnvironmentStorage(ctrl *gomock.Controller) *MockEnvironmentStorage {
	mock := &MockEnvironmentStorage{ctrl: ctrl}
	mock.recorder = &MockEnvironmentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentStorage) EXPECT() *MockEnvironmentStorageMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method.
func (m *MockEnvironmentStorage) CreateEnvironment(ctx context.Context, e *domain.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockEnvironmentStorageMockRecorder) CreateEnvironment(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockEnvironmentStorage)(nil).CreateEnvironment), ctx, e)
}

// GetEnvironment mocks base method.
func (m *MockEnvironmentStorage) GetEnvironment(ctx context.Context, id string) (*domain.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", ctx, id)
	ret0, _ := ret[0].(*domain.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockEnvironmentStorageMockRecorder) GetEnvironment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockEnvironmentStorage)(nil).GetEnvironment), ctx, id)
}

// GetEnvironmentByNamespace mocks base method.
func (m *MockEnvironmentStorage) GetEnvironmentByNamespace(ctx context.Context, namespace string, deleted bool) (*domain.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentByNamespace", ctx, namespace, deleted)
	ret0, _ := ret[0].(*domain.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentByNamespace indicates an expected call of GetEnvironmentByNamespace.
func (mr *MockEnvironmentStorageMockRecorder) GetEnvironmentByNamespace(ctx, namespace, deleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentByNamespace", reflect.TypeOf((*MockEnvironmentStorage)(nil).GetEnvironmentByNamespace), ctx, namespace, deleted)
}

// ListEnvironments mocks base method.
func (m *MockEnvironmentStorage) ListEnvironments(ctx context.Context, whereParts []mysql.WherePart, orders []*mysql.Order, limit, offset int) ([]*environment.Environment, int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", ctx, whereParts, orders, limit, offset)
	ret0, _ := ret[0].([]*environment.Environment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListEnvironments indicates an expected call of ListEnvironments.
func (mr *MockEnvironmentStorageMockRecorder) ListEnvironments(ctx, whereParts, orders, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockEnvironmentStorage)(nil).ListEnvironments), ctx, whereParts, orders, limit, offset)
}

// UpdateEnvironment mocks base method.
func (m *MockEnvironmentStorage) UpdateEnvironment(ctx context.Context, e *domain.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment.
func (mr *MockEnvironmentStorageMockRecorder) UpdateEnvironment(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockEnvironmentStorage)(nil).UpdateEnvironment), ctx, e)
}
