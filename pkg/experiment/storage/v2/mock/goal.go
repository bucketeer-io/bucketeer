// Code generated by MockGen. DO NOT EDIT.
// Source: goal.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "github.com/bucketeer-io/bucketeer/pkg/experiment/domain"
	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	experiment "github.com/bucketeer-io/bucketeer/proto/experiment"
)

// MockGoalStorage is a mock of GoalStorage interface.
type MockGoalStorage struct {
	ctrl     *gomock.Controller
	recorder *MockGoalStorageMockRecorder
}

// MockGoalStorageMockRecorder is the mock recorder for MockGoalStorage.
type MockGoalStorageMockRecorder struct {
	mock *MockGoalStorage
}

// NewMockGoalStorage creates a new mock instance.
func NewMockGoalStorage(ctrl *gomock.Controller) *MockGoalStorage {
	mock := &MockGoalStorage{ctrl: ctrl}
	mock.recorder = &MockGoalStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoalStorage) EXPECT() *MockGoalStorageMockRecorder {
	return m.recorder
}

// CreateGoal mocks base method.
func (m *MockGoalStorage) CreateGoal(ctx context.Context, g *domain.Goal, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGoal", ctx, g, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGoal indicates an expected call of CreateGoal.
func (mr *MockGoalStorageMockRecorder) CreateGoal(ctx, g, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGoal", reflect.TypeOf((*MockGoalStorage)(nil).CreateGoal), ctx, g, environmentNamespace)
}

// GetGoal mocks base method.
func (m *MockGoalStorage) GetGoal(ctx context.Context, id, environmentNamespace string) (*domain.Goal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoal", ctx, id, environmentNamespace)
	ret0, _ := ret[0].(*domain.Goal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoal indicates an expected call of GetGoal.
func (mr *MockGoalStorageMockRecorder) GetGoal(ctx, id, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoal", reflect.TypeOf((*MockGoalStorage)(nil).GetGoal), ctx, id, environmentNamespace)
}

// ListGoals mocks base method.
func (m *MockGoalStorage) ListGoals(ctx context.Context, whereParts []mysql.WherePart, orders []*mysql.Order, limit, offset int, isInUseStatus *bool, environmentNamespace string) ([]*experiment.Goal, int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGoals", ctx, whereParts, orders, limit, offset, isInUseStatus, environmentNamespace)
	ret0, _ := ret[0].([]*experiment.Goal)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListGoals indicates an expected call of ListGoals.
func (mr *MockGoalStorageMockRecorder) ListGoals(ctx, whereParts, orders, limit, offset, isInUseStatus, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGoals", reflect.TypeOf((*MockGoalStorage)(nil).ListGoals), ctx, whereParts, orders, limit, offset, isInUseStatus, environmentNamespace)
}

// UpdateGoal mocks base method.
func (m *MockGoalStorage) UpdateGoal(ctx context.Context, g *domain.Goal, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGoal", ctx, g, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGoal indicates an expected call of UpdateGoal.
func (mr *MockGoalStorageMockRecorder) UpdateGoal(ctx, g, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGoal", reflect.TypeOf((*MockGoalStorage)(nil).UpdateGoal), ctx, g, environmentNamespace)
}
