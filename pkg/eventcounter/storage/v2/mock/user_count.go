// Code generated by MockGen. DO NOT EDIT.
// Source: user_count.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	eventcounter "github.com/bucketeer-io/bucketeer/proto/eventcounter"
)

// MockUserCountStorage is a mock of UserCountStorage interface.
type MockUserCountStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserCountStorageMockRecorder
}

// MockUserCountStorageMockRecorder is the mock recorder for MockUserCountStorage.
type MockUserCountStorageMockRecorder struct {
	mock *MockUserCountStorage
}

// NewMockUserCountStorage creates a new mock instance.
func NewMockUserCountStorage(ctrl *gomock.Controller) *MockUserCountStorage {
	mock := &MockUserCountStorage{ctrl: ctrl}
	mock.recorder = &MockUserCountStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCountStorage) EXPECT() *MockUserCountStorageMockRecorder {
	return m.recorder
}

// GetMAUCount mocks base method.
func (m *MockUserCountStorage) GetMAUCount(ctx context.Context, environmentNamespace, yearMonth string) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMAUCount", ctx, environmentNamespace, yearMonth)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMAUCount indicates an expected call of GetMAUCount.
func (mr *MockUserCountStorageMockRecorder) GetMAUCount(ctx, environmentNamespace, yearMonth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMAUCount", reflect.TypeOf((*MockUserCountStorage)(nil).GetMAUCount), ctx, environmentNamespace, yearMonth)
}

// GetMAUCounts mocks base method.
func (m *MockUserCountStorage) GetMAUCounts(ctx context.Context, yearMonth string) ([]*eventcounter.MAUSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMAUCounts", ctx, yearMonth)
	ret0, _ := ret[0].([]*eventcounter.MAUSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMAUCounts indicates an expected call of GetMAUCounts.
func (mr *MockUserCountStorageMockRecorder) GetMAUCounts(ctx, yearMonth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMAUCounts", reflect.TypeOf((*MockUserCountStorage)(nil).GetMAUCounts), ctx, yearMonth)
}

// GetMAUCountsGroupBySourceID mocks base method.
func (m *MockUserCountStorage) GetMAUCountsGroupBySourceID(ctx context.Context, yearMonth string) ([]*eventcounter.MAUSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMAUCountsGroupBySourceID", ctx, yearMonth)
	ret0, _ := ret[0].([]*eventcounter.MAUSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMAUCountsGroupBySourceID indicates an expected call of GetMAUCountsGroupBySourceID.
func (mr *MockUserCountStorageMockRecorder) GetMAUCountsGroupBySourceID(ctx, yearMonth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMAUCountsGroupBySourceID", reflect.TypeOf((*MockUserCountStorage)(nil).GetMAUCountsGroupBySourceID), ctx, yearMonth)
}
