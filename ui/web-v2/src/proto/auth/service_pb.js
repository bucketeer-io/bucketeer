// source: proto/auth/service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var proto_auth_token_pb = require('../../proto/auth/token_pb.js');
goog.object.extend(proto, proto_auth_token_pb);
goog.exportSymbol('proto.bucketeer.auth.AuthType', null, global);
goog.exportSymbol(
  'proto.bucketeer.auth.ExchangeBucketeerTokenRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.auth.ExchangeBucketeerTokenResponse',
  null,
  global
);
goog.exportSymbol('proto.bucketeer.auth.ExchangeTokenRequest', null, global);
goog.exportSymbol('proto.bucketeer.auth.ExchangeTokenResponse', null, global);
goog.exportSymbol('proto.bucketeer.auth.GetAuthCodeURLRequest', null, global);
goog.exportSymbol('proto.bucketeer.auth.GetAuthCodeURLResponse', null, global);
goog.exportSymbol(
  'proto.bucketeer.auth.GetAuthenticationURLRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.auth.GetAuthenticationURLResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.auth.RefreshBucketeerTokenRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.bucketeer.auth.RefreshBucketeerTokenResponse',
  null,
  global
);
goog.exportSymbol('proto.bucketeer.auth.RefreshTokenRequest', null, global);
goog.exportSymbol('proto.bucketeer.auth.RefreshTokenResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.GetAuthCodeURLRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.GetAuthCodeURLRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.GetAuthCodeURLRequest.displayName =
    'proto.bucketeer.auth.GetAuthCodeURLRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.GetAuthCodeURLResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.GetAuthCodeURLResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.GetAuthCodeURLResponse.displayName =
    'proto.bucketeer.auth.GetAuthCodeURLResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.ExchangeTokenRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.ExchangeTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.ExchangeTokenRequest.displayName =
    'proto.bucketeer.auth.ExchangeTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.ExchangeTokenResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.ExchangeTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.ExchangeTokenResponse.displayName =
    'proto.bucketeer.auth.ExchangeTokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.RefreshTokenRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.RefreshTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.RefreshTokenRequest.displayName =
    'proto.bucketeer.auth.RefreshTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.RefreshTokenResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.RefreshTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.RefreshTokenResponse.displayName =
    'proto.bucketeer.auth.RefreshTokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.GetAuthenticationURLRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.GetAuthenticationURLRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.GetAuthenticationURLRequest.displayName =
    'proto.bucketeer.auth.GetAuthenticationURLRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.GetAuthenticationURLResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.GetAuthenticationURLResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.GetAuthenticationURLResponse.displayName =
    'proto.bucketeer.auth.GetAuthenticationURLResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.ExchangeBucketeerTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.ExchangeBucketeerTokenRequest.displayName =
    'proto.bucketeer.auth.ExchangeBucketeerTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.ExchangeBucketeerTokenResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.bucketeer.auth.ExchangeBucketeerTokenResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.ExchangeBucketeerTokenResponse.displayName =
    'proto.bucketeer.auth.ExchangeBucketeerTokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.RefreshBucketeerTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.RefreshBucketeerTokenRequest.displayName =
    'proto.bucketeer.auth.RefreshBucketeerTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.auth.RefreshBucketeerTokenResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.auth.RefreshBucketeerTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.auth.RefreshBucketeerTokenResponse.displayName =
    'proto.bucketeer.auth.RefreshBucketeerTokenResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.GetAuthCodeURLRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.bucketeer.auth.GetAuthCodeURLRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.GetAuthCodeURLRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.GetAuthCodeURLRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        state: jspb.Message.getFieldWithDefault(msg, 1, ''),
        redirectUrl: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.GetAuthCodeURLRequest}
 */
proto.bucketeer.auth.GetAuthCodeURLRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.auth.GetAuthCodeURLRequest();
  return proto.bucketeer.auth.GetAuthCodeURLRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.GetAuthCodeURLRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.GetAuthCodeURLRequest}
 */
proto.bucketeer.auth.GetAuthCodeURLRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setState(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setRedirectUrl(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.GetAuthCodeURLRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.GetAuthCodeURLRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.GetAuthCodeURLRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.GetAuthCodeURLRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string state = 1;
 * @return {string}
 */
proto.bucketeer.auth.GetAuthCodeURLRequest.prototype.getState = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.GetAuthCodeURLRequest} returns this
 */
proto.bucketeer.auth.GetAuthCodeURLRequest.prototype.setState = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string redirect_url = 2;
 * @return {string}
 */
proto.bucketeer.auth.GetAuthCodeURLRequest.prototype.getRedirectUrl =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.GetAuthCodeURLRequest} returns this
 */
proto.bucketeer.auth.GetAuthCodeURLRequest.prototype.setRedirectUrl = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.GetAuthCodeURLResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.bucketeer.auth.GetAuthCodeURLResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.GetAuthCodeURLResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.GetAuthCodeURLResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        url: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.GetAuthCodeURLResponse}
 */
proto.bucketeer.auth.GetAuthCodeURLResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.auth.GetAuthCodeURLResponse();
  return proto.bucketeer.auth.GetAuthCodeURLResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.GetAuthCodeURLResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.GetAuthCodeURLResponse}
 */
proto.bucketeer.auth.GetAuthCodeURLResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUrl(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.GetAuthCodeURLResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.GetAuthCodeURLResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.GetAuthCodeURLResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.GetAuthCodeURLResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string url = 1;
 * @return {string}
 */
proto.bucketeer.auth.GetAuthCodeURLResponse.prototype.getUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.GetAuthCodeURLResponse} returns this
 */
proto.bucketeer.auth.GetAuthCodeURLResponse.prototype.setUrl = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.ExchangeTokenRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.bucketeer.auth.ExchangeTokenRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.ExchangeTokenRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.ExchangeTokenRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, ''),
        redirectUrl: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.ExchangeTokenRequest}
 */
proto.bucketeer.auth.ExchangeTokenRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.auth.ExchangeTokenRequest();
  return proto.bucketeer.auth.ExchangeTokenRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.ExchangeTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.ExchangeTokenRequest}
 */
proto.bucketeer.auth.ExchangeTokenRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setCode(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setRedirectUrl(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.ExchangeTokenRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.ExchangeTokenRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.ExchangeTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.ExchangeTokenRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string code = 1;
 * @return {string}
 */
proto.bucketeer.auth.ExchangeTokenRequest.prototype.getCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.ExchangeTokenRequest} returns this
 */
proto.bucketeer.auth.ExchangeTokenRequest.prototype.setCode = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string redirect_url = 2;
 * @return {string}
 */
proto.bucketeer.auth.ExchangeTokenRequest.prototype.getRedirectUrl =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.ExchangeTokenRequest} returns this
 */
proto.bucketeer.auth.ExchangeTokenRequest.prototype.setRedirectUrl = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.ExchangeTokenResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.bucketeer.auth.ExchangeTokenResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.ExchangeTokenResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.ExchangeTokenResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        token:
          (f = msg.getToken()) &&
          proto_auth_token_pb.Token.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.ExchangeTokenResponse}
 */
proto.bucketeer.auth.ExchangeTokenResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.auth.ExchangeTokenResponse();
  return proto.bucketeer.auth.ExchangeTokenResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.ExchangeTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.ExchangeTokenResponse}
 */
proto.bucketeer.auth.ExchangeTokenResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_auth_token_pb.Token();
          reader.readMessage(
            value,
            proto_auth_token_pb.Token.deserializeBinaryFromReader
          );
          msg.setToken(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.ExchangeTokenResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.ExchangeTokenResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.ExchangeTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.ExchangeTokenResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_auth_token_pb.Token.serializeBinaryToWriter
    );
  }
};

/**
 * optional Token token = 1;
 * @return {?proto.bucketeer.auth.Token}
 */
proto.bucketeer.auth.ExchangeTokenResponse.prototype.getToken = function () {
  return /** @type{?proto.bucketeer.auth.Token} */ (
    jspb.Message.getWrapperField(this, proto_auth_token_pb.Token, 1)
  );
};

/**
 * @param {?proto.bucketeer.auth.Token|undefined} value
 * @return {!proto.bucketeer.auth.ExchangeTokenResponse} returns this
 */
proto.bucketeer.auth.ExchangeTokenResponse.prototype.setToken = function (
  value
) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.auth.ExchangeTokenResponse} returns this
 */
proto.bucketeer.auth.ExchangeTokenResponse.prototype.clearToken = function () {
  return this.setToken(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.auth.ExchangeTokenResponse.prototype.hasToken = function () {
  return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.RefreshTokenRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.bucketeer.auth.RefreshTokenRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.RefreshTokenRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.RefreshTokenRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        refreshToken: jspb.Message.getFieldWithDefault(msg, 1, ''),
        redirectUrl: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.RefreshTokenRequest}
 */
proto.bucketeer.auth.RefreshTokenRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.auth.RefreshTokenRequest();
  return proto.bucketeer.auth.RefreshTokenRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.RefreshTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.RefreshTokenRequest}
 */
proto.bucketeer.auth.RefreshTokenRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setRefreshToken(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setRedirectUrl(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.RefreshTokenRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.RefreshTokenRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.RefreshTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.RefreshTokenRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getRefreshToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string refresh_token = 1;
 * @return {string}
 */
proto.bucketeer.auth.RefreshTokenRequest.prototype.getRefreshToken =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.RefreshTokenRequest} returns this
 */
proto.bucketeer.auth.RefreshTokenRequest.prototype.setRefreshToken = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string redirect_url = 2;
 * @return {string}
 */
proto.bucketeer.auth.RefreshTokenRequest.prototype.getRedirectUrl =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.RefreshTokenRequest} returns this
 */
proto.bucketeer.auth.RefreshTokenRequest.prototype.setRedirectUrl = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.RefreshTokenResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.bucketeer.auth.RefreshTokenResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.RefreshTokenResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.RefreshTokenResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        token:
          (f = msg.getToken()) &&
          proto_auth_token_pb.Token.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.RefreshTokenResponse}
 */
proto.bucketeer.auth.RefreshTokenResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.auth.RefreshTokenResponse();
  return proto.bucketeer.auth.RefreshTokenResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.RefreshTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.RefreshTokenResponse}
 */
proto.bucketeer.auth.RefreshTokenResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_auth_token_pb.Token();
          reader.readMessage(
            value,
            proto_auth_token_pb.Token.deserializeBinaryFromReader
          );
          msg.setToken(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.RefreshTokenResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.RefreshTokenResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.RefreshTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.RefreshTokenResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_auth_token_pb.Token.serializeBinaryToWriter
    );
  }
};

/**
 * optional Token token = 1;
 * @return {?proto.bucketeer.auth.Token}
 */
proto.bucketeer.auth.RefreshTokenResponse.prototype.getToken = function () {
  return /** @type{?proto.bucketeer.auth.Token} */ (
    jspb.Message.getWrapperField(this, proto_auth_token_pb.Token, 1)
  );
};

/**
 * @param {?proto.bucketeer.auth.Token|undefined} value
 * @return {!proto.bucketeer.auth.RefreshTokenResponse} returns this
 */
proto.bucketeer.auth.RefreshTokenResponse.prototype.setToken = function (
  value
) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.auth.RefreshTokenResponse} returns this
 */
proto.bucketeer.auth.RefreshTokenResponse.prototype.clearToken = function () {
  return this.setToken(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.auth.RefreshTokenResponse.prototype.hasToken = function () {
  return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.GetAuthenticationURLRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.auth.GetAuthenticationURLRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.GetAuthenticationURLRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.GetAuthenticationURLRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        state: jspb.Message.getFieldWithDefault(msg, 1, ''),
        redirectUrl: jspb.Message.getFieldWithDefault(msg, 2, ''),
        type: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.GetAuthenticationURLRequest}
 */
proto.bucketeer.auth.GetAuthenticationURLRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.auth.GetAuthenticationURLRequest();
  return proto.bucketeer.auth.GetAuthenticationURLRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.GetAuthenticationURLRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.GetAuthenticationURLRequest}
 */
proto.bucketeer.auth.GetAuthenticationURLRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setState(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setRedirectUrl(value);
          break;
        case 3:
          var value = /** @type {!proto.bucketeer.auth.AuthType} */ (
            reader.readEnum()
          );
          msg.setType(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.GetAuthenticationURLRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.GetAuthenticationURLRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.GetAuthenticationURLRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.GetAuthenticationURLRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getState();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getRedirectUrl();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getType();
    if (f !== 0.0) {
      writer.writeEnum(3, f);
    }
  };

/**
 * optional string state = 1;
 * @return {string}
 */
proto.bucketeer.auth.GetAuthenticationURLRequest.prototype.getState =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.GetAuthenticationURLRequest} returns this
 */
proto.bucketeer.auth.GetAuthenticationURLRequest.prototype.setState = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string redirect_url = 2;
 * @return {string}
 */
proto.bucketeer.auth.GetAuthenticationURLRequest.prototype.getRedirectUrl =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.GetAuthenticationURLRequest} returns this
 */
proto.bucketeer.auth.GetAuthenticationURLRequest.prototype.setRedirectUrl =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional AuthType type = 3;
 * @return {!proto.bucketeer.auth.AuthType}
 */
proto.bucketeer.auth.GetAuthenticationURLRequest.prototype.getType =
  function () {
    return /** @type {!proto.bucketeer.auth.AuthType} */ (
      jspb.Message.getFieldWithDefault(this, 3, 0)
    );
  };

/**
 * @param {!proto.bucketeer.auth.AuthType} value
 * @return {!proto.bucketeer.auth.GetAuthenticationURLRequest} returns this
 */
proto.bucketeer.auth.GetAuthenticationURLRequest.prototype.setType = function (
  value
) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.GetAuthenticationURLResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.auth.GetAuthenticationURLResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.GetAuthenticationURLResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.GetAuthenticationURLResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        url: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.GetAuthenticationURLResponse}
 */
proto.bucketeer.auth.GetAuthenticationURLResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.auth.GetAuthenticationURLResponse();
  return proto.bucketeer.auth.GetAuthenticationURLResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.GetAuthenticationURLResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.GetAuthenticationURLResponse}
 */
proto.bucketeer.auth.GetAuthenticationURLResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUrl(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.GetAuthenticationURLResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.GetAuthenticationURLResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.GetAuthenticationURLResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.GetAuthenticationURLResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUrl();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
  };

/**
 * optional string url = 1;
 * @return {string}
 */
proto.bucketeer.auth.GetAuthenticationURLResponse.prototype.getUrl =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.GetAuthenticationURLResponse} returns this
 */
proto.bucketeer.auth.GetAuthenticationURLResponse.prototype.setUrl = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.ExchangeBucketeerTokenRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.auth.ExchangeBucketeerTokenRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.ExchangeBucketeerTokenRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.ExchangeBucketeerTokenRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, ''),
        redirectUrl: jspb.Message.getFieldWithDefault(msg, 2, ''),
        type: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.ExchangeBucketeerTokenRequest}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.auth.ExchangeBucketeerTokenRequest();
    return proto.bucketeer.auth.ExchangeBucketeerTokenRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.ExchangeBucketeerTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.ExchangeBucketeerTokenRequest}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setCode(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setRedirectUrl(value);
          break;
        case 3:
          var value = /** @type {!proto.bucketeer.auth.AuthType} */ (
            reader.readEnum()
          );
          msg.setType(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.ExchangeBucketeerTokenRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.ExchangeBucketeerTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getCode();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getRedirectUrl();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getType();
    if (f !== 0.0) {
      writer.writeEnum(3, f);
    }
  };

/**
 * optional string code = 1;
 * @return {string}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest.prototype.getCode =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.ExchangeBucketeerTokenRequest} returns this
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest.prototype.setCode =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string redirect_url = 2;
 * @return {string}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest.prototype.getRedirectUrl =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.ExchangeBucketeerTokenRequest} returns this
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest.prototype.setRedirectUrl =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional AuthType type = 3;
 * @return {!proto.bucketeer.auth.AuthType}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest.prototype.getType =
  function () {
    return /** @type {!proto.bucketeer.auth.AuthType} */ (
      jspb.Message.getFieldWithDefault(this, 3, 0)
    );
  };

/**
 * @param {!proto.bucketeer.auth.AuthType} value
 * @return {!proto.bucketeer.auth.ExchangeBucketeerTokenRequest} returns this
 */
proto.bucketeer.auth.ExchangeBucketeerTokenRequest.prototype.setType =
  function (value) {
    return jspb.Message.setProto3EnumField(this, 3, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.ExchangeBucketeerTokenResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.auth.ExchangeBucketeerTokenResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.ExchangeBucketeerTokenResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.ExchangeBucketeerTokenResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        token:
          (f = msg.getToken()) &&
          proto_auth_token_pb.Token.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.ExchangeBucketeerTokenResponse}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.auth.ExchangeBucketeerTokenResponse();
    return proto.bucketeer.auth.ExchangeBucketeerTokenResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.ExchangeBucketeerTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.ExchangeBucketeerTokenResponse}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_auth_token_pb.Token();
          reader.readMessage(
            value,
            proto_auth_token_pb.Token.deserializeBinaryFromReader
          );
          msg.setToken(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.ExchangeBucketeerTokenResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.ExchangeBucketeerTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.ExchangeBucketeerTokenResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getToken();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto_auth_token_pb.Token.serializeBinaryToWriter
      );
    }
  };

/**
 * optional Token token = 1;
 * @return {?proto.bucketeer.auth.Token}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenResponse.prototype.getToken =
  function () {
    return /** @type{?proto.bucketeer.auth.Token} */ (
      jspb.Message.getWrapperField(this, proto_auth_token_pb.Token, 1)
    );
  };

/**
 * @param {?proto.bucketeer.auth.Token|undefined} value
 * @return {!proto.bucketeer.auth.ExchangeBucketeerTokenResponse} returns this
 */
proto.bucketeer.auth.ExchangeBucketeerTokenResponse.prototype.setToken =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.auth.ExchangeBucketeerTokenResponse} returns this
 */
proto.bucketeer.auth.ExchangeBucketeerTokenResponse.prototype.clearToken =
  function () {
    return this.setToken(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.auth.ExchangeBucketeerTokenResponse.prototype.hasToken =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.RefreshBucketeerTokenRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.auth.RefreshBucketeerTokenRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.RefreshBucketeerTokenRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.RefreshBucketeerTokenRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        refreshToken: jspb.Message.getFieldWithDefault(msg, 1, ''),
        redirectUrl: jspb.Message.getFieldWithDefault(msg, 2, ''),
        type: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.RefreshBucketeerTokenRequest}
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.auth.RefreshBucketeerTokenRequest();
  return proto.bucketeer.auth.RefreshBucketeerTokenRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.RefreshBucketeerTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.RefreshBucketeerTokenRequest}
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setRefreshToken(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setRedirectUrl(value);
          break;
        case 3:
          var value = /** @type {!proto.bucketeer.auth.AuthType} */ (
            reader.readEnum()
          );
          msg.setType(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.RefreshBucketeerTokenRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.RefreshBucketeerTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getRefreshToken();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getRedirectUrl();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getType();
    if (f !== 0.0) {
      writer.writeEnum(3, f);
    }
  };

/**
 * optional string refresh_token = 1;
 * @return {string}
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest.prototype.getRefreshToken =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.RefreshBucketeerTokenRequest} returns this
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest.prototype.setRefreshToken =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string redirect_url = 2;
 * @return {string}
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest.prototype.getRedirectUrl =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.bucketeer.auth.RefreshBucketeerTokenRequest} returns this
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest.prototype.setRedirectUrl =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional AuthType type = 3;
 * @return {!proto.bucketeer.auth.AuthType}
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest.prototype.getType =
  function () {
    return /** @type {!proto.bucketeer.auth.AuthType} */ (
      jspb.Message.getFieldWithDefault(this, 3, 0)
    );
  };

/**
 * @param {!proto.bucketeer.auth.AuthType} value
 * @return {!proto.bucketeer.auth.RefreshBucketeerTokenRequest} returns this
 */
proto.bucketeer.auth.RefreshBucketeerTokenRequest.prototype.setType = function (
  value
) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bucketeer.auth.RefreshBucketeerTokenResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bucketeer.auth.RefreshBucketeerTokenResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bucketeer.auth.RefreshBucketeerTokenResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bucketeer.auth.RefreshBucketeerTokenResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        token:
          (f = msg.getToken()) &&
          proto_auth_token_pb.Token.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.auth.RefreshBucketeerTokenResponse}
 */
proto.bucketeer.auth.RefreshBucketeerTokenResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.bucketeer.auth.RefreshBucketeerTokenResponse();
    return proto.bucketeer.auth.RefreshBucketeerTokenResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.auth.RefreshBucketeerTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.auth.RefreshBucketeerTokenResponse}
 */
proto.bucketeer.auth.RefreshBucketeerTokenResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto_auth_token_pb.Token();
          reader.readMessage(
            value,
            proto_auth_token_pb.Token.deserializeBinaryFromReader
          );
          msg.setToken(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.auth.RefreshBucketeerTokenResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.bucketeer.auth.RefreshBucketeerTokenResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.auth.RefreshBucketeerTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.auth.RefreshBucketeerTokenResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getToken();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto_auth_token_pb.Token.serializeBinaryToWriter
      );
    }
  };

/**
 * optional Token token = 1;
 * @return {?proto.bucketeer.auth.Token}
 */
proto.bucketeer.auth.RefreshBucketeerTokenResponse.prototype.getToken =
  function () {
    return /** @type{?proto.bucketeer.auth.Token} */ (
      jspb.Message.getWrapperField(this, proto_auth_token_pb.Token, 1)
    );
  };

/**
 * @param {?proto.bucketeer.auth.Token|undefined} value
 * @return {!proto.bucketeer.auth.RefreshBucketeerTokenResponse} returns this
 */
proto.bucketeer.auth.RefreshBucketeerTokenResponse.prototype.setToken =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.auth.RefreshBucketeerTokenResponse} returns this
 */
proto.bucketeer.auth.RefreshBucketeerTokenResponse.prototype.clearToken =
  function () {
    return this.setToken(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.auth.RefreshBucketeerTokenResponse.prototype.hasToken =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * @enum {number}
 */
proto.bucketeer.auth.AuthType = {
  AUTH_TYPE_UNSPECIFIED: 0,
  AUTH_TYPE_USER_PASSWORD: 1,
  AUTH_TYPE_GOOGLE: 2,
  AUTH_TYPE_GITHUB: 3
};

goog.object.extend(exports, proto.bucketeer.auth);
