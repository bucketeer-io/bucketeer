// Code generated by MockGen. DO NOT EDIT.
// Source: audit_log.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	domain "github.com/bucketeer-io/bucketeer/pkg/auditlog/domain"
	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	auditlog "github.com/bucketeer-io/bucketeer/proto/auditlog"
)

// MockAuditLogStorage is a mock of AuditLogStorage interface.
type MockAuditLogStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuditLogStorageMockRecorder
}

// MockAuditLogStorageMockRecorder is the mock recorder for MockAuditLogStorage.
type MockAuditLogStorageMockRecorder struct {
	mock *MockAuditLogStorage
}

// NewMockAuditLogStorage creates a new mock instance.
func NewMockAuditLogStorage(ctrl *gomock.Controller) *MockAuditLogStorage {
	mock := &MockAuditLogStorage{ctrl: ctrl}
	mock.recorder = &MockAuditLogStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditLogStorage) EXPECT() *MockAuditLogStorageMockRecorder {
	return m.recorder
}

// CreateAuditLogs mocks base method.
func (m *MockAuditLogStorage) CreateAuditLogs(ctx context.Context, auditLogs []*domain.AuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuditLogs", ctx, auditLogs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuditLogs indicates an expected call of CreateAuditLogs.
func (mr *MockAuditLogStorageMockRecorder) CreateAuditLogs(ctx, auditLogs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuditLogs", reflect.TypeOf((*MockAuditLogStorage)(nil).CreateAuditLogs), ctx, auditLogs)
}

// ListAuditLogs mocks base method.
func (m *MockAuditLogStorage) ListAuditLogs(ctx context.Context, whereParts []mysql.WherePart, orders []*mysql.Order, limit, offset int) ([]*auditlog.AuditLog, int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuditLogs", ctx, whereParts, orders, limit, offset)
	ret0, _ := ret[0].([]*auditlog.AuditLog)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockAuditLogStorageMockRecorder) ListAuditLogs(ctx, whereParts, orders, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockAuditLogStorage)(nil).ListAuditLogs), ctx, whereParts, orders, limit, offset)
}
