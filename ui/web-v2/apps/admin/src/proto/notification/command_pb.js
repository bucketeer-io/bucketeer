// source: proto/notification/command.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_notification_subscription_pb = require('../../proto/notification/subscription_pb.js');
goog.object.extend(proto, proto_notification_subscription_pb);
var proto_notification_recipient_pb = require('../../proto/notification/recipient_pb.js');
goog.object.extend(proto, proto_notification_recipient_pb);
goog.exportSymbol('proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.AddSourceTypesCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.CreateAdminSubscriptionCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.CreateSubscriptionCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.DeleteAdminSubscriptionCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.DeleteSourceTypesCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.DeleteSubscriptionCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.DisableAdminSubscriptionCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.DisableSubscriptionCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.EnableAdminSubscriptionCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.EnableSubscriptionCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.RenameAdminSubscriptionCommand', null, global);
goog.exportSymbol('proto.bucketeer.notification.RenameSubscriptionCommand', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.notification.CreateAdminSubscriptionCommand.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.notification.CreateAdminSubscriptionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.CreateAdminSubscriptionCommand.displayName = 'proto.bucketeer.notification.CreateAdminSubscriptionCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.displayName = 'proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.displayName = 'proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.EnableAdminSubscriptionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.EnableAdminSubscriptionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.EnableAdminSubscriptionCommand.displayName = 'proto.bucketeer.notification.EnableAdminSubscriptionCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.DisableAdminSubscriptionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.DisableAdminSubscriptionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.DisableAdminSubscriptionCommand.displayName = 'proto.bucketeer.notification.DisableAdminSubscriptionCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.DeleteAdminSubscriptionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.DeleteAdminSubscriptionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.DeleteAdminSubscriptionCommand.displayName = 'proto.bucketeer.notification.DeleteAdminSubscriptionCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.RenameAdminSubscriptionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.RenameAdminSubscriptionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.RenameAdminSubscriptionCommand.displayName = 'proto.bucketeer.notification.RenameAdminSubscriptionCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.CreateSubscriptionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.notification.CreateSubscriptionCommand.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.notification.CreateSubscriptionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.CreateSubscriptionCommand.displayName = 'proto.bucketeer.notification.CreateSubscriptionCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.AddSourceTypesCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.notification.AddSourceTypesCommand.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.notification.AddSourceTypesCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.AddSourceTypesCommand.displayName = 'proto.bucketeer.notification.AddSourceTypesCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.DeleteSourceTypesCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.notification.DeleteSourceTypesCommand.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.notification.DeleteSourceTypesCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.DeleteSourceTypesCommand.displayName = 'proto.bucketeer.notification.DeleteSourceTypesCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.EnableSubscriptionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.EnableSubscriptionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.EnableSubscriptionCommand.displayName = 'proto.bucketeer.notification.EnableSubscriptionCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.DisableSubscriptionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.DisableSubscriptionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.DisableSubscriptionCommand.displayName = 'proto.bucketeer.notification.DisableSubscriptionCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.DeleteSubscriptionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.DeleteSubscriptionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.DeleteSubscriptionCommand.displayName = 'proto.bucketeer.notification.DeleteSubscriptionCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.RenameSubscriptionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.RenameSubscriptionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.RenameSubscriptionCommand.displayName = 'proto.bucketeer.notification.RenameSubscriptionCommand';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.CreateAdminSubscriptionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.CreateAdminSubscriptionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceTypesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    recipient: (f = msg.getRecipient()) && proto_notification_recipient_pb.Recipient.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.CreateAdminSubscriptionCommand}
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.CreateAdminSubscriptionCommand;
  return proto.bucketeer.notification.CreateAdminSubscriptionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.CreateAdminSubscriptionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.CreateAdminSubscriptionCommand}
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSourceTypes(values[i]);
      }
      break;
    case 2:
      var value = new proto_notification_recipient_pb.Recipient;
      reader.readMessage(value,proto_notification_recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.CreateAdminSubscriptionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.CreateAdminSubscriptionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_notification_recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated Subscription.SourceType source_types = 1;
 * @return {!Array<!proto.bucketeer.notification.Subscription.SourceType>}
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.getSourceTypesList = function() {
  return /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.bucketeer.notification.Subscription.SourceType>} value
 * @return {!proto.bucketeer.notification.CreateAdminSubscriptionCommand} returns this
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.setSourceTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.bucketeer.notification.Subscription.SourceType} value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.notification.CreateAdminSubscriptionCommand} returns this
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.addSourceTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.notification.CreateAdminSubscriptionCommand} returns this
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.clearSourceTypesList = function() {
  return this.setSourceTypesList([]);
};


/**
 * optional Recipient recipient = 2;
 * @return {?proto.bucketeer.notification.Recipient}
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.getRecipient = function() {
  return /** @type{?proto.bucketeer.notification.Recipient} */ (
    jspb.Message.getWrapperField(this, proto_notification_recipient_pb.Recipient, 2));
};


/**
 * @param {?proto.bucketeer.notification.Recipient|undefined} value
 * @return {!proto.bucketeer.notification.CreateAdminSubscriptionCommand} returns this
*/
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.setRecipient = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.notification.CreateAdminSubscriptionCommand} returns this
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.clearRecipient = function() {
  return this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.notification.CreateAdminSubscriptionCommand} returns this
 */
proto.bucketeer.notification.CreateAdminSubscriptionCommand.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceTypesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand}
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand;
  return proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand}
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSourceTypes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated Subscription.SourceType source_types = 1;
 * @return {!Array<!proto.bucketeer.notification.Subscription.SourceType>}
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.prototype.getSourceTypesList = function() {
  return /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.bucketeer.notification.Subscription.SourceType>} value
 * @return {!proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand} returns this
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.prototype.setSourceTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.bucketeer.notification.Subscription.SourceType} value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand} returns this
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.prototype.addSourceTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand} returns this
 */
proto.bucketeer.notification.AddAdminSubscriptionSourceTypesCommand.prototype.clearSourceTypesList = function() {
  return this.setSourceTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceTypesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand}
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand;
  return proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand}
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSourceTypes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated Subscription.SourceType source_types = 1;
 * @return {!Array<!proto.bucketeer.notification.Subscription.SourceType>}
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.prototype.getSourceTypesList = function() {
  return /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.bucketeer.notification.Subscription.SourceType>} value
 * @return {!proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand} returns this
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.prototype.setSourceTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.bucketeer.notification.Subscription.SourceType} value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand} returns this
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.prototype.addSourceTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand} returns this
 */
proto.bucketeer.notification.DeleteAdminSubscriptionSourceTypesCommand.prototype.clearSourceTypesList = function() {
  return this.setSourceTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.EnableAdminSubscriptionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.EnableAdminSubscriptionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.EnableAdminSubscriptionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.EnableAdminSubscriptionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.EnableAdminSubscriptionCommand}
 */
proto.bucketeer.notification.EnableAdminSubscriptionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.EnableAdminSubscriptionCommand;
  return proto.bucketeer.notification.EnableAdminSubscriptionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.EnableAdminSubscriptionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.EnableAdminSubscriptionCommand}
 */
proto.bucketeer.notification.EnableAdminSubscriptionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.EnableAdminSubscriptionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.EnableAdminSubscriptionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.EnableAdminSubscriptionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.EnableAdminSubscriptionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.DisableAdminSubscriptionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.DisableAdminSubscriptionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.DisableAdminSubscriptionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DisableAdminSubscriptionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.DisableAdminSubscriptionCommand}
 */
proto.bucketeer.notification.DisableAdminSubscriptionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.DisableAdminSubscriptionCommand;
  return proto.bucketeer.notification.DisableAdminSubscriptionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.DisableAdminSubscriptionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.DisableAdminSubscriptionCommand}
 */
proto.bucketeer.notification.DisableAdminSubscriptionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.DisableAdminSubscriptionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.DisableAdminSubscriptionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.DisableAdminSubscriptionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DisableAdminSubscriptionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.DeleteAdminSubscriptionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.DeleteAdminSubscriptionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.DeleteAdminSubscriptionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DeleteAdminSubscriptionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.DeleteAdminSubscriptionCommand}
 */
proto.bucketeer.notification.DeleteAdminSubscriptionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.DeleteAdminSubscriptionCommand;
  return proto.bucketeer.notification.DeleteAdminSubscriptionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.DeleteAdminSubscriptionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.DeleteAdminSubscriptionCommand}
 */
proto.bucketeer.notification.DeleteAdminSubscriptionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.DeleteAdminSubscriptionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.DeleteAdminSubscriptionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.DeleteAdminSubscriptionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DeleteAdminSubscriptionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.RenameAdminSubscriptionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.RenameAdminSubscriptionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.RenameAdminSubscriptionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.RenameAdminSubscriptionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.RenameAdminSubscriptionCommand}
 */
proto.bucketeer.notification.RenameAdminSubscriptionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.RenameAdminSubscriptionCommand;
  return proto.bucketeer.notification.RenameAdminSubscriptionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.RenameAdminSubscriptionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.RenameAdminSubscriptionCommand}
 */
proto.bucketeer.notification.RenameAdminSubscriptionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.RenameAdminSubscriptionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.RenameAdminSubscriptionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.RenameAdminSubscriptionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.RenameAdminSubscriptionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.bucketeer.notification.RenameAdminSubscriptionCommand.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.notification.RenameAdminSubscriptionCommand} returns this
 */
proto.bucketeer.notification.RenameAdminSubscriptionCommand.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.notification.CreateSubscriptionCommand.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.CreateSubscriptionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.CreateSubscriptionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.CreateSubscriptionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceTypesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    recipient: (f = msg.getRecipient()) && proto_notification_recipient_pb.Recipient.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.CreateSubscriptionCommand}
 */
proto.bucketeer.notification.CreateSubscriptionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.CreateSubscriptionCommand;
  return proto.bucketeer.notification.CreateSubscriptionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.CreateSubscriptionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.CreateSubscriptionCommand}
 */
proto.bucketeer.notification.CreateSubscriptionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSourceTypes(values[i]);
      }
      break;
    case 2:
      var value = new proto_notification_recipient_pb.Recipient;
      reader.readMessage(value,proto_notification_recipient_pb.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.CreateSubscriptionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.CreateSubscriptionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.CreateSubscriptionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_notification_recipient_pb.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated Subscription.SourceType source_types = 1;
 * @return {!Array<!proto.bucketeer.notification.Subscription.SourceType>}
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.getSourceTypesList = function() {
  return /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.bucketeer.notification.Subscription.SourceType>} value
 * @return {!proto.bucketeer.notification.CreateSubscriptionCommand} returns this
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.setSourceTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.bucketeer.notification.Subscription.SourceType} value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.notification.CreateSubscriptionCommand} returns this
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.addSourceTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.notification.CreateSubscriptionCommand} returns this
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.clearSourceTypesList = function() {
  return this.setSourceTypesList([]);
};


/**
 * optional Recipient recipient = 2;
 * @return {?proto.bucketeer.notification.Recipient}
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.getRecipient = function() {
  return /** @type{?proto.bucketeer.notification.Recipient} */ (
    jspb.Message.getWrapperField(this, proto_notification_recipient_pb.Recipient, 2));
};


/**
 * @param {?proto.bucketeer.notification.Recipient|undefined} value
 * @return {!proto.bucketeer.notification.CreateSubscriptionCommand} returns this
*/
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.setRecipient = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.notification.CreateSubscriptionCommand} returns this
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.clearRecipient = function() {
  return this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.notification.CreateSubscriptionCommand} returns this
 */
proto.bucketeer.notification.CreateSubscriptionCommand.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.notification.AddSourceTypesCommand.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.AddSourceTypesCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.AddSourceTypesCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.AddSourceTypesCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.AddSourceTypesCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceTypesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.AddSourceTypesCommand}
 */
proto.bucketeer.notification.AddSourceTypesCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.AddSourceTypesCommand;
  return proto.bucketeer.notification.AddSourceTypesCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.AddSourceTypesCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.AddSourceTypesCommand}
 */
proto.bucketeer.notification.AddSourceTypesCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSourceTypes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.AddSourceTypesCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.AddSourceTypesCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.AddSourceTypesCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.AddSourceTypesCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated Subscription.SourceType source_types = 1;
 * @return {!Array<!proto.bucketeer.notification.Subscription.SourceType>}
 */
proto.bucketeer.notification.AddSourceTypesCommand.prototype.getSourceTypesList = function() {
  return /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.bucketeer.notification.Subscription.SourceType>} value
 * @return {!proto.bucketeer.notification.AddSourceTypesCommand} returns this
 */
proto.bucketeer.notification.AddSourceTypesCommand.prototype.setSourceTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.bucketeer.notification.Subscription.SourceType} value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.notification.AddSourceTypesCommand} returns this
 */
proto.bucketeer.notification.AddSourceTypesCommand.prototype.addSourceTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.notification.AddSourceTypesCommand} returns this
 */
proto.bucketeer.notification.AddSourceTypesCommand.prototype.clearSourceTypesList = function() {
  return this.setSourceTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.DeleteSourceTypesCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.DeleteSourceTypesCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceTypesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.DeleteSourceTypesCommand}
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.DeleteSourceTypesCommand;
  return proto.bucketeer.notification.DeleteSourceTypesCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.DeleteSourceTypesCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.DeleteSourceTypesCommand}
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSourceTypes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.DeleteSourceTypesCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.DeleteSourceTypesCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated Subscription.SourceType source_types = 1;
 * @return {!Array<!proto.bucketeer.notification.Subscription.SourceType>}
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.prototype.getSourceTypesList = function() {
  return /** @type {!Array<!proto.bucketeer.notification.Subscription.SourceType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.bucketeer.notification.Subscription.SourceType>} value
 * @return {!proto.bucketeer.notification.DeleteSourceTypesCommand} returns this
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.prototype.setSourceTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.bucketeer.notification.Subscription.SourceType} value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.notification.DeleteSourceTypesCommand} returns this
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.prototype.addSourceTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.notification.DeleteSourceTypesCommand} returns this
 */
proto.bucketeer.notification.DeleteSourceTypesCommand.prototype.clearSourceTypesList = function() {
  return this.setSourceTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.EnableSubscriptionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.EnableSubscriptionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.EnableSubscriptionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.EnableSubscriptionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.EnableSubscriptionCommand}
 */
proto.bucketeer.notification.EnableSubscriptionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.EnableSubscriptionCommand;
  return proto.bucketeer.notification.EnableSubscriptionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.EnableSubscriptionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.EnableSubscriptionCommand}
 */
proto.bucketeer.notification.EnableSubscriptionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.EnableSubscriptionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.EnableSubscriptionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.EnableSubscriptionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.EnableSubscriptionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.DisableSubscriptionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.DisableSubscriptionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.DisableSubscriptionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DisableSubscriptionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.DisableSubscriptionCommand}
 */
proto.bucketeer.notification.DisableSubscriptionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.DisableSubscriptionCommand;
  return proto.bucketeer.notification.DisableSubscriptionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.DisableSubscriptionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.DisableSubscriptionCommand}
 */
proto.bucketeer.notification.DisableSubscriptionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.DisableSubscriptionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.DisableSubscriptionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.DisableSubscriptionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DisableSubscriptionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.DeleteSubscriptionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.DeleteSubscriptionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.DeleteSubscriptionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DeleteSubscriptionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.DeleteSubscriptionCommand}
 */
proto.bucketeer.notification.DeleteSubscriptionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.DeleteSubscriptionCommand;
  return proto.bucketeer.notification.DeleteSubscriptionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.DeleteSubscriptionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.DeleteSubscriptionCommand}
 */
proto.bucketeer.notification.DeleteSubscriptionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.DeleteSubscriptionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.DeleteSubscriptionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.DeleteSubscriptionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.DeleteSubscriptionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.RenameSubscriptionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.RenameSubscriptionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.RenameSubscriptionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.RenameSubscriptionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.RenameSubscriptionCommand}
 */
proto.bucketeer.notification.RenameSubscriptionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.RenameSubscriptionCommand;
  return proto.bucketeer.notification.RenameSubscriptionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.RenameSubscriptionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.RenameSubscriptionCommand}
 */
proto.bucketeer.notification.RenameSubscriptionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.RenameSubscriptionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.RenameSubscriptionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.RenameSubscriptionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.RenameSubscriptionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.bucketeer.notification.RenameSubscriptionCommand.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.notification.RenameSubscriptionCommand} returns this
 */
proto.bucketeer.notification.RenameSubscriptionCommand.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.bucketeer.notification);
