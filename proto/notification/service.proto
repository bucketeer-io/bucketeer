// Copyright 2022 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.notification;
option go_package = "github.com/bucketeer-io/bucketeer/proto/notification";

import "google/protobuf/wrappers.proto";

import "proto/notification/subscription.proto";
import "proto/notification/command.proto";

message GetAdminSubscriptionRequest {
  string id = 1;
}

message GetAdminSubscriptionResponse {
  Subscription subscription = 1;
}

message ListAdminSubscriptionsRequest {
  enum OrderBy {
    DEFAULT = 0;
    NAME = 1;
    CREATED_AT = 2;
    UPDATED_AT = 3;
  }
  enum OrderDirection {
    ASC = 0;
    DESC = 1;
  }
  int64 page_size = 1;
  string cursor = 2;
  repeated Subscription.SourceType source_types = 3;
  OrderBy order_by = 4;
  OrderDirection order_direction = 5;
  string search_keyword = 6;
  google.protobuf.BoolValue disabled = 7;
}

message ListAdminSubscriptionsResponse {
  repeated Subscription subscriptions = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message ListEnabledAdminSubscriptionsRequest {
  int64 page_size = 1;
  string cursor = 2;
  repeated Subscription.SourceType source_types = 3;
}

message ListEnabledAdminSubscriptionsResponse {
  repeated Subscription subscriptions = 1;
  string cursor = 2;
}

message CreateAdminSubscriptionRequest {
  CreateAdminSubscriptionCommand command = 1;
}

message CreateAdminSubscriptionResponse {}

message DeleteAdminSubscriptionRequest {
  string id = 1;
  DeleteAdminSubscriptionCommand command = 2;
}

message DeleteAdminSubscriptionResponse {}

message EnableAdminSubscriptionRequest {
  string id = 1;
  EnableAdminSubscriptionCommand command = 2;
}

message EnableAdminSubscriptionResponse {}

message DisableAdminSubscriptionRequest {
  string id = 1;
  DisableAdminSubscriptionCommand command = 2;
}

message DisableAdminSubscriptionResponse {}

message UpdateAdminSubscriptionRequest {
  string id = 1;
  AddAdminSubscriptionSourceTypesCommand add_source_types_command = 2;
  DeleteAdminSubscriptionSourceTypesCommand delete_source_types_command = 3;
  RenameAdminSubscriptionCommand rename_subscription_command = 4;
}

message UpdateAdminSubscriptionResponse {}

message GetSubscriptionRequest {
  string environment_namespace = 1;
  string id = 2;
}

message GetSubscriptionResponse {
  Subscription subscription = 1;
}

message ListSubscriptionsRequest {
  enum OrderBy {
    DEFAULT = 0;
    NAME = 1;
    CREATED_AT = 2;
    UPDATED_AT = 3;
  }
  enum OrderDirection {
    ASC = 0;
    DESC = 1;
  }
  string environment_namespace = 1;
  int64 page_size = 2;
  string cursor = 3;
  repeated Subscription.SourceType source_types = 4;
  OrderBy order_by = 5;
  OrderDirection order_direction = 6;
  string search_keyword = 7;
  google.protobuf.BoolValue disabled = 8;
}

message ListSubscriptionsResponse {
  repeated Subscription subscriptions = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message ListEnabledSubscriptionsRequest {
  string environment_namespace = 1;
  int64 page_size = 2;
  string cursor = 3;
  repeated Subscription.SourceType source_types = 4;
}

message ListEnabledSubscriptionsResponse {
  repeated Subscription subscriptions = 1;
  string cursor = 2;
}

message CreateSubscriptionRequest {
  string environment_namespace = 1;
  CreateSubscriptionCommand command = 2;
}

message CreateSubscriptionResponse {}

message DeleteSubscriptionRequest {
  string environment_namespace = 1;
  string id = 2;
  DeleteSubscriptionCommand command = 3;
}

message DeleteSubscriptionResponse {}

message EnableSubscriptionRequest {
  string environment_namespace = 1;
  string id = 2;
  EnableSubscriptionCommand command = 3;
}

message EnableSubscriptionResponse {}

message DisableSubscriptionRequest {
  string environment_namespace = 1;
  string id = 2;
  DisableSubscriptionCommand command = 3;
}

message DisableSubscriptionResponse {}

message UpdateSubscriptionRequest {
  string environment_namespace = 1;
  string id = 2;
  AddSourceTypesCommand add_source_types_command = 3;
  DeleteSourceTypesCommand delete_source_types_command = 4;
  RenameSubscriptionCommand rename_subscription_command = 5;
}

message UpdateSubscriptionResponse {}

service NotificationService {
  rpc GetAdminSubscription(GetAdminSubscriptionRequest)
      returns (GetAdminSubscriptionResponse) {}
  rpc ListAdminSubscriptions(ListAdminSubscriptionsRequest)
      returns (ListAdminSubscriptionsResponse) {}
  rpc ListEnabledAdminSubscriptions(ListEnabledAdminSubscriptionsRequest)
      returns (ListEnabledAdminSubscriptionsResponse) {}
  rpc CreateAdminSubscription(CreateAdminSubscriptionRequest)
      returns (CreateAdminSubscriptionResponse) {}
  rpc DeleteAdminSubscription(DeleteAdminSubscriptionRequest)
      returns (DeleteAdminSubscriptionResponse) {}
  rpc EnableAdminSubscription(EnableAdminSubscriptionRequest)
      returns (EnableAdminSubscriptionResponse) {}
  rpc DisableAdminSubscription(DisableAdminSubscriptionRequest)
      returns (DisableAdminSubscriptionResponse) {}
  rpc UpdateAdminSubscription(UpdateAdminSubscriptionRequest)
      returns (UpdateAdminSubscriptionResponse) {}
  rpc GetSubscription(GetSubscriptionRequest)
      returns (GetSubscriptionResponse) {}
  rpc ListSubscriptions(ListSubscriptionsRequest)
      returns (ListSubscriptionsResponse) {}
  rpc ListEnabledSubscriptions(ListEnabledSubscriptionsRequest)
      returns (ListEnabledSubscriptionsResponse) {}
  rpc CreateSubscription(CreateSubscriptionRequest)
      returns (CreateSubscriptionResponse) {}
  rpc DeleteSubscription(DeleteSubscriptionRequest)
      returns (DeleteSubscriptionResponse) {}
  rpc EnableSubscription(EnableSubscriptionRequest)
      returns (EnableSubscriptionResponse) {}
  rpc DisableSubscription(DisableSubscriptionRequest)
      returns (DisableSubscriptionResponse) {}
  rpc UpdateSubscription(UpdateSubscriptionRequest)
      returns (UpdateSubscriptionResponse) {}
}