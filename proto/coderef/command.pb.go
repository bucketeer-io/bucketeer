// Copyright 2024 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: proto/coderef/command.proto

package coderef

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCodeReferenceCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId        string                       `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id"`
	FilePath         string                       `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path"`
	LineNumber       int32                        `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number"`
	CodeSnippet      string                       `protobuf:"bytes,4,opt,name=code_snippet,json=codeSnippet,proto3" json:"code_snippet"`
	ContentHash      string                       `protobuf:"bytes,5,opt,name=content_hash,json=contentHash,proto3" json:"content_hash"`
	Aliases          []string                     `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases"`
	RepositoryName   string                       `protobuf:"bytes,7,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name"`
	RepositoryOwner  string                       `protobuf:"bytes,8,opt,name=repository_owner,json=repositoryOwner,proto3" json:"repository_owner"`
	RepositoryType   CodeReference_RepositoryType `protobuf:"varint,9,opt,name=repository_type,json=repositoryType,proto3,enum=bucketeer.coderef.CodeReference_RepositoryType" json:"repository_type"`
	RepositoryBranch string                       `protobuf:"bytes,10,opt,name=repository_branch,json=repositoryBranch,proto3" json:"repository_branch"`
	CommitHash       string                       `protobuf:"bytes,11,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash"`
	EnvironmentId    string                       `protobuf:"bytes,12,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
}

func (x *CreateCodeReferenceCommand) Reset() {
	*x = CreateCodeReferenceCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCodeReferenceCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCodeReferenceCommand) ProtoMessage() {}

func (x *CreateCodeReferenceCommand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCodeReferenceCommand.ProtoReflect.Descriptor instead.
func (*CreateCodeReferenceCommand) Descriptor() ([]byte, []int) {
	return file_proto_coderef_command_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCodeReferenceCommand) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *CreateCodeReferenceCommand) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CreateCodeReferenceCommand) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *CreateCodeReferenceCommand) GetCodeSnippet() string {
	if x != nil {
		return x.CodeSnippet
	}
	return ""
}

func (x *CreateCodeReferenceCommand) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *CreateCodeReferenceCommand) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *CreateCodeReferenceCommand) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *CreateCodeReferenceCommand) GetRepositoryOwner() string {
	if x != nil {
		return x.RepositoryOwner
	}
	return ""
}

func (x *CreateCodeReferenceCommand) GetRepositoryType() CodeReference_RepositoryType {
	if x != nil {
		return x.RepositoryType
	}
	return CodeReference_REPOSITORY_TYPE_UNSPECIFIED
}

func (x *CreateCodeReferenceCommand) GetRepositoryBranch() string {
	if x != nil {
		return x.RepositoryBranch
	}
	return ""
}

func (x *CreateCodeReferenceCommand) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *CreateCodeReferenceCommand) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type UpdateCodeReferenceCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FilePath         string   `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path"`
	LineNumber       int32    `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number"`
	CodeSnippet      string   `protobuf:"bytes,4,opt,name=code_snippet,json=codeSnippet,proto3" json:"code_snippet"`
	ContentHash      string   `protobuf:"bytes,5,opt,name=content_hash,json=contentHash,proto3" json:"content_hash"`
	Aliases          []string `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases"`
	RepositoryBranch string   `protobuf:"bytes,7,opt,name=repository_branch,json=repositoryBranch,proto3" json:"repository_branch"`
	CommitHash       string   `protobuf:"bytes,8,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash"`
}

func (x *UpdateCodeReferenceCommand) Reset() {
	*x = UpdateCodeReferenceCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCodeReferenceCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCodeReferenceCommand) ProtoMessage() {}

func (x *UpdateCodeReferenceCommand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCodeReferenceCommand.ProtoReflect.Descriptor instead.
func (*UpdateCodeReferenceCommand) Descriptor() ([]byte, []int) {
	return file_proto_coderef_command_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCodeReferenceCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCodeReferenceCommand) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UpdateCodeReferenceCommand) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *UpdateCodeReferenceCommand) GetCodeSnippet() string {
	if x != nil {
		return x.CodeSnippet
	}
	return ""
}

func (x *UpdateCodeReferenceCommand) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *UpdateCodeReferenceCommand) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *UpdateCodeReferenceCommand) GetRepositoryBranch() string {
	if x != nil {
		return x.RepositoryBranch
	}
	return ""
}

func (x *UpdateCodeReferenceCommand) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

type DeleteCodeReferenceCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	EnvironmentId string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
}

func (x *DeleteCodeReferenceCommand) Reset() {
	*x = DeleteCodeReferenceCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCodeReferenceCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCodeReferenceCommand) ProtoMessage() {}

func (x *DeleteCodeReferenceCommand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCodeReferenceCommand.ProtoReflect.Descriptor instead.
func (*DeleteCodeReferenceCommand) Descriptor() ([]byte, []int) {
	return file_proto_coderef_command_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteCodeReferenceCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteCodeReferenceCommand) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

var File_proto_coderef_command_proto protoreflect.FileDescriptor

var file_proto_coderef_command_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66,
	0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x03, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65,
	0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x98, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x53,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_coderef_command_proto_rawDescOnce sync.Once
	file_proto_coderef_command_proto_rawDescData = file_proto_coderef_command_proto_rawDesc
)

func file_proto_coderef_command_proto_rawDescGZIP() []byte {
	file_proto_coderef_command_proto_rawDescOnce.Do(func() {
		file_proto_coderef_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_coderef_command_proto_rawDescData)
	})
	return file_proto_coderef_command_proto_rawDescData
}

var file_proto_coderef_command_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_coderef_command_proto_goTypes = []interface{}{
	(*CreateCodeReferenceCommand)(nil), // 0: bucketeer.coderef.CreateCodeReferenceCommand
	(*UpdateCodeReferenceCommand)(nil), // 1: bucketeer.coderef.UpdateCodeReferenceCommand
	(*DeleteCodeReferenceCommand)(nil), // 2: bucketeer.coderef.DeleteCodeReferenceCommand
	(CodeReference_RepositoryType)(0),  // 3: bucketeer.coderef.CodeReference.RepositoryType
}
var file_proto_coderef_command_proto_depIdxs = []int32{
	3, // 0: bucketeer.coderef.CreateCodeReferenceCommand.repository_type:type_name -> bucketeer.coderef.CodeReference.RepositoryType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_coderef_command_proto_init() }
func file_proto_coderef_command_proto_init() {
	if File_proto_coderef_command_proto != nil {
		return
	}
	file_proto_coderef_code_reference_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_coderef_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCodeReferenceCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCodeReferenceCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCodeReferenceCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_coderef_command_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_coderef_command_proto_goTypes,
		DependencyIndexes: file_proto_coderef_command_proto_depIdxs,
		MessageInfos:      file_proto_coderef_command_proto_msgTypes,
	}.Build()
	File_proto_coderef_command_proto = out.File
	file_proto_coderef_command_proto_rawDesc = nil
	file_proto_coderef_command_proto_goTypes = nil
	file_proto_coderef_command_proto_depIdxs = nil
}
