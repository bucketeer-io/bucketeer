// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWherePart is a mock of WherePart interface.
type MockWherePart struct {
	ctrl     *gomock.Controller
	recorder *MockWherePartMockRecorder
}

// MockWherePartMockRecorder is the mock recorder for MockWherePart.
type MockWherePartMockRecorder struct {
	mock *MockWherePart
}

// NewMockWherePart creates a new mock instance.
func NewMockWherePart(ctrl *gomock.Controller) *MockWherePart {
	mock := &MockWherePart{ctrl: ctrl}
	mock.recorder = &MockWherePartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWherePart) EXPECT() *MockWherePartMockRecorder {
	return m.recorder
}

// SQLString mocks base method.
func (m *MockWherePart) SQLString() (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLString")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SQLString indicates an expected call of SQLString.
func (mr *MockWherePartMockRecorder) SQLString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLString", reflect.TypeOf((*MockWherePart)(nil).SQLString))
}
