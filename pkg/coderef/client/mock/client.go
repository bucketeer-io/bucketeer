// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -package=mock -destination=./mock/client.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"

	coderef "github.com/bucketeer-io/bucketeer/proto/coderef"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CreateCodeReference mocks base method.
func (m *MockClient) CreateCodeReference(ctx context.Context, in *coderef.CreateCodeReferenceRequest, opts ...grpc.CallOption) (*coderef.CreateCodeReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCodeReference", varargs...)
	ret0, _ := ret[0].(*coderef.CreateCodeReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCodeReference indicates an expected call of CreateCodeReference.
func (mr *MockClientMockRecorder) CreateCodeReference(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCodeReference", reflect.TypeOf((*MockClient)(nil).CreateCodeReference), varargs...)
}

// DeleteCodeReference mocks base method.
func (m *MockClient) DeleteCodeReference(ctx context.Context, in *coderef.DeleteCodeReferenceRequest, opts ...grpc.CallOption) (*coderef.DeleteCodeReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCodeReference", varargs...)
	ret0, _ := ret[0].(*coderef.DeleteCodeReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCodeReference indicates an expected call of DeleteCodeReference.
func (mr *MockClientMockRecorder) DeleteCodeReference(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCodeReference", reflect.TypeOf((*MockClient)(nil).DeleteCodeReference), varargs...)
}

// GetCodeReference mocks base method.
func (m *MockClient) GetCodeReference(ctx context.Context, in *coderef.GetCodeReferenceRequest, opts ...grpc.CallOption) (*coderef.GetCodeReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCodeReference", varargs...)
	ret0, _ := ret[0].(*coderef.GetCodeReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeReference indicates an expected call of GetCodeReference.
func (mr *MockClientMockRecorder) GetCodeReference(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeReference", reflect.TypeOf((*MockClient)(nil).GetCodeReference), varargs...)
}

// ListCodeReferences mocks base method.
func (m *MockClient) ListCodeReferences(ctx context.Context, in *coderef.ListCodeReferencesRequest, opts ...grpc.CallOption) (*coderef.ListCodeReferencesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCodeReferences", varargs...)
	ret0, _ := ret[0].(*coderef.ListCodeReferencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCodeReferences indicates an expected call of ListCodeReferences.
func (mr *MockClientMockRecorder) ListCodeReferences(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodeReferences", reflect.TypeOf((*MockClient)(nil).ListCodeReferences), varargs...)
}

// UpdateCodeReference mocks base method.
func (m *MockClient) UpdateCodeReference(ctx context.Context, in *coderef.UpdateCodeReferenceRequest, opts ...grpc.CallOption) (*coderef.UpdateCodeReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCodeReference", varargs...)
	ret0, _ := ret[0].(*coderef.UpdateCodeReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCodeReference indicates an expected call of UpdateCodeReference.
func (mr *MockClientMockRecorder) UpdateCodeReference(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCodeReference", reflect.TypeOf((*MockClient)(nil).UpdateCodeReference), varargs...)
}
