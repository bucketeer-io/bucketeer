// Code generated by MockGen. DO NOT EDIT.
// Source: ops_count.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "github.com/bucketeer-io/bucketeer/pkg/opsevent/domain"
	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	autoops "github.com/bucketeer-io/bucketeer/proto/autoops"
)

// MockOpsCountStorage is a mock of OpsCountStorage interface.
type MockOpsCountStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOpsCountStorageMockRecorder
}

// MockOpsCountStorageMockRecorder is the mock recorder for MockOpsCountStorage.
type MockOpsCountStorageMockRecorder struct {
	mock *MockOpsCountStorage
}

// NewMockOpsCountStorage creates a new mock instance.
func NewMockOpsCountStorage(ctrl *gomock.Controller) *MockOpsCountStorage {
	mock := &MockOpsCountStorage{ctrl: ctrl}
	mock.recorder = &MockOpsCountStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpsCountStorage) EXPECT() *MockOpsCountStorageMockRecorder {
	return m.recorder
}

// ListOpsCounts mocks base method.
func (m *MockOpsCountStorage) ListOpsCounts(ctx context.Context, whereParts []mysql.WherePart, orders []*mysql.Order, limit, offset int) ([]*autoops.OpsCount, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpsCounts", ctx, whereParts, orders, limit, offset)
	ret0, _ := ret[0].([]*autoops.OpsCount)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOpsCounts indicates an expected call of ListOpsCounts.
func (mr *MockOpsCountStorageMockRecorder) ListOpsCounts(ctx, whereParts, orders, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpsCounts", reflect.TypeOf((*MockOpsCountStorage)(nil).ListOpsCounts), ctx, whereParts, orders, limit, offset)
}

// UpsertOpsCount mocks base method.
func (m *MockOpsCountStorage) UpsertOpsCount(ctx context.Context, environmentNamespace string, oc *domain.OpsCount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOpsCount", ctx, environmentNamespace, oc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOpsCount indicates an expected call of UpsertOpsCount.
func (mr *MockOpsCountStorageMockRecorder) UpsertOpsCount(ctx, environmentNamespace, oc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOpsCount", reflect.TypeOf((*MockOpsCountStorage)(nil).UpsertOpsCount), ctx, environmentNamespace, oc)
}
