// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source=user.go -package=mock -destination=./mock/user.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	user "github.com/bucketeer-io/bucketeer/proto/user"
)

// MockUserAttributesCache is a mock of UserAttributesCache interface.
type MockUserAttributesCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserAttributesCacheMockRecorder
}

// MockUserAttributesCacheMockRecorder is the mock recorder for MockUserAttributesCache.
type MockUserAttributesCacheMockRecorder struct {
	mock *MockUserAttributesCache
}

// NewMockUserAttributesCache creates a new mock instance.
func NewMockUserAttributesCache(ctrl *gomock.Controller) *MockUserAttributesCache {
	mock := &MockUserAttributesCache{ctrl: ctrl}
	mock.recorder = &MockUserAttributesCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAttributesCache) EXPECT() *MockUserAttributesCacheMockRecorder {
	return m.recorder
}

// GetUserAttributeKeyAll mocks base method.
func (m *MockUserAttributesCache) GetUserAttributeKeyAll(environmentId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAttributeKeyAll", environmentId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAttributeKeyAll indicates an expected call of GetUserAttributeKeyAll.
func (mr *MockUserAttributesCacheMockRecorder) GetUserAttributeKeyAll(environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAttributeKeyAll", reflect.TypeOf((*MockUserAttributesCache)(nil).GetUserAttributeKeyAll), environmentId)
}

// Put mocks base method.
func (m *MockUserAttributesCache) Put(userAttributes *user.UserAttributes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", userAttributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockUserAttributesCacheMockRecorder) Put(userAttributes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockUserAttributesCache)(nil).Put), userAttributes)
}
