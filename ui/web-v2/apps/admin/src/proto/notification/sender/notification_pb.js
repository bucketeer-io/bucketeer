// source: proto/notification/sender/notification.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_event_domain_event_pb = require('../../../proto/event/domain/event_pb.js');
goog.object.extend(proto, proto_event_domain_event_pb);
var proto_feature_feature_pb = require('../../../proto/feature/feature_pb.js');
goog.object.extend(proto, proto_feature_feature_pb);
var proto_experiment_experiment_pb = require('../../../proto/experiment/experiment_pb.js');
goog.object.extend(proto, proto_experiment_experiment_pb);
goog.exportSymbol('proto.bucketeer.notification.sender.DomainEventNotification', null, global);
goog.exportSymbol('proto.bucketeer.notification.sender.ExperimentRunningNotification', null, global);
goog.exportSymbol('proto.bucketeer.notification.sender.FeatureStaleNotification', null, global);
goog.exportSymbol('proto.bucketeer.notification.sender.MauCountNotification', null, global);
goog.exportSymbol('proto.bucketeer.notification.sender.Notification', null, global);
goog.exportSymbol('proto.bucketeer.notification.sender.Notification.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.sender.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.sender.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.sender.Notification.displayName = 'proto.bucketeer.notification.sender.Notification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.sender.DomainEventNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.sender.DomainEventNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.sender.DomainEventNotification.displayName = 'proto.bucketeer.notification.sender.DomainEventNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.sender.FeatureStaleNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.notification.sender.FeatureStaleNotification.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.notification.sender.FeatureStaleNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.sender.FeatureStaleNotification.displayName = 'proto.bucketeer.notification.sender.FeatureStaleNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bucketeer.notification.sender.ExperimentRunningNotification.repeatedFields_, null);
};
goog.inherits(proto.bucketeer.notification.sender.ExperimentRunningNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.sender.ExperimentRunningNotification.displayName = 'proto.bucketeer.notification.sender.ExperimentRunningNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bucketeer.notification.sender.MauCountNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bucketeer.notification.sender.MauCountNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bucketeer.notification.sender.MauCountNotification.displayName = 'proto.bucketeer.notification.sender.MauCountNotification';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.sender.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.sender.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.sender.Notification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.sender.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    domainEventNotification: (f = msg.getDomainEventNotification()) && proto.bucketeer.notification.sender.DomainEventNotification.toObject(includeInstance, f),
    featureStaleNotification: (f = msg.getFeatureStaleNotification()) && proto.bucketeer.notification.sender.FeatureStaleNotification.toObject(includeInstance, f),
    experimentRunningNotification: (f = msg.getExperimentRunningNotification()) && proto.bucketeer.notification.sender.ExperimentRunningNotification.toObject(includeInstance, f),
    mauCountNotification: (f = msg.getMauCountNotification()) && proto.bucketeer.notification.sender.MauCountNotification.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.sender.Notification}
 */
proto.bucketeer.notification.sender.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.sender.Notification;
  return proto.bucketeer.notification.sender.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.sender.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.sender.Notification}
 */
proto.bucketeer.notification.sender.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bucketeer.notification.sender.Notification.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.bucketeer.notification.sender.DomainEventNotification;
      reader.readMessage(value,proto.bucketeer.notification.sender.DomainEventNotification.deserializeBinaryFromReader);
      msg.setDomainEventNotification(value);
      break;
    case 3:
      var value = new proto.bucketeer.notification.sender.FeatureStaleNotification;
      reader.readMessage(value,proto.bucketeer.notification.sender.FeatureStaleNotification.deserializeBinaryFromReader);
      msg.setFeatureStaleNotification(value);
      break;
    case 4:
      var value = new proto.bucketeer.notification.sender.ExperimentRunningNotification;
      reader.readMessage(value,proto.bucketeer.notification.sender.ExperimentRunningNotification.deserializeBinaryFromReader);
      msg.setExperimentRunningNotification(value);
      break;
    case 5:
      var value = new proto.bucketeer.notification.sender.MauCountNotification;
      reader.readMessage(value,proto.bucketeer.notification.sender.MauCountNotification.deserializeBinaryFromReader);
      msg.setMauCountNotification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.sender.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.sender.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.sender.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.sender.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDomainEventNotification();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bucketeer.notification.sender.DomainEventNotification.serializeBinaryToWriter
    );
  }
  f = message.getFeatureStaleNotification();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bucketeer.notification.sender.FeatureStaleNotification.serializeBinaryToWriter
    );
  }
  f = message.getExperimentRunningNotification();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bucketeer.notification.sender.ExperimentRunningNotification.serializeBinaryToWriter
    );
  }
  f = message.getMauCountNotification();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bucketeer.notification.sender.MauCountNotification.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.bucketeer.notification.sender.Notification.Type = {
  DOMAINEVENT: 0,
  FEATURESTALE: 1,
  EXPERIMENTRUNNING: 2,
  MAUCOUNT: 3
};

/**
 * optional Type type = 1;
 * @return {!proto.bucketeer.notification.sender.Notification.Type}
 */
proto.bucketeer.notification.sender.Notification.prototype.getType = function() {
  return /** @type {!proto.bucketeer.notification.sender.Notification.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bucketeer.notification.sender.Notification.Type} value
 * @return {!proto.bucketeer.notification.sender.Notification} returns this
 */
proto.bucketeer.notification.sender.Notification.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DomainEventNotification domain_event_notification = 2;
 * @return {?proto.bucketeer.notification.sender.DomainEventNotification}
 */
proto.bucketeer.notification.sender.Notification.prototype.getDomainEventNotification = function() {
  return /** @type{?proto.bucketeer.notification.sender.DomainEventNotification} */ (
    jspb.Message.getWrapperField(this, proto.bucketeer.notification.sender.DomainEventNotification, 2));
};


/**
 * @param {?proto.bucketeer.notification.sender.DomainEventNotification|undefined} value
 * @return {!proto.bucketeer.notification.sender.Notification} returns this
*/
proto.bucketeer.notification.sender.Notification.prototype.setDomainEventNotification = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.notification.sender.Notification} returns this
 */
proto.bucketeer.notification.sender.Notification.prototype.clearDomainEventNotification = function() {
  return this.setDomainEventNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.notification.sender.Notification.prototype.hasDomainEventNotification = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FeatureStaleNotification feature_stale_notification = 3;
 * @return {?proto.bucketeer.notification.sender.FeatureStaleNotification}
 */
proto.bucketeer.notification.sender.Notification.prototype.getFeatureStaleNotification = function() {
  return /** @type{?proto.bucketeer.notification.sender.FeatureStaleNotification} */ (
    jspb.Message.getWrapperField(this, proto.bucketeer.notification.sender.FeatureStaleNotification, 3));
};


/**
 * @param {?proto.bucketeer.notification.sender.FeatureStaleNotification|undefined} value
 * @return {!proto.bucketeer.notification.sender.Notification} returns this
*/
proto.bucketeer.notification.sender.Notification.prototype.setFeatureStaleNotification = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.notification.sender.Notification} returns this
 */
proto.bucketeer.notification.sender.Notification.prototype.clearFeatureStaleNotification = function() {
  return this.setFeatureStaleNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.notification.sender.Notification.prototype.hasFeatureStaleNotification = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ExperimentRunningNotification experiment_running_notification = 4;
 * @return {?proto.bucketeer.notification.sender.ExperimentRunningNotification}
 */
proto.bucketeer.notification.sender.Notification.prototype.getExperimentRunningNotification = function() {
  return /** @type{?proto.bucketeer.notification.sender.ExperimentRunningNotification} */ (
    jspb.Message.getWrapperField(this, proto.bucketeer.notification.sender.ExperimentRunningNotification, 4));
};


/**
 * @param {?proto.bucketeer.notification.sender.ExperimentRunningNotification|undefined} value
 * @return {!proto.bucketeer.notification.sender.Notification} returns this
*/
proto.bucketeer.notification.sender.Notification.prototype.setExperimentRunningNotification = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.notification.sender.Notification} returns this
 */
proto.bucketeer.notification.sender.Notification.prototype.clearExperimentRunningNotification = function() {
  return this.setExperimentRunningNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.notification.sender.Notification.prototype.hasExperimentRunningNotification = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MauCountNotification mau_count_notification = 5;
 * @return {?proto.bucketeer.notification.sender.MauCountNotification}
 */
proto.bucketeer.notification.sender.Notification.prototype.getMauCountNotification = function() {
  return /** @type{?proto.bucketeer.notification.sender.MauCountNotification} */ (
    jspb.Message.getWrapperField(this, proto.bucketeer.notification.sender.MauCountNotification, 5));
};


/**
 * @param {?proto.bucketeer.notification.sender.MauCountNotification|undefined} value
 * @return {!proto.bucketeer.notification.sender.Notification} returns this
*/
proto.bucketeer.notification.sender.Notification.prototype.setMauCountNotification = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.notification.sender.Notification} returns this
 */
proto.bucketeer.notification.sender.Notification.prototype.clearMauCountNotification = function() {
  return this.setMauCountNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.notification.sender.Notification.prototype.hasMauCountNotification = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.sender.DomainEventNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.sender.DomainEventNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.sender.DomainEventNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    editor: (f = msg.getEditor()) && proto_event_domain_event_pb.Editor.toObject(includeInstance, f),
    entityType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    entityId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    environmentId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.sender.DomainEventNotification}
 */
proto.bucketeer.notification.sender.DomainEventNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.sender.DomainEventNotification;
  return proto.bucketeer.notification.sender.DomainEventNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.sender.DomainEventNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.sender.DomainEventNotification}
 */
proto.bucketeer.notification.sender.DomainEventNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto_event_domain_event_pb.Editor;
      reader.readMessage(value,proto_event_domain_event_pb.Editor.deserializeBinaryFromReader);
      msg.setEditor(value);
      break;
    case 3:
      var value = /** @type {!proto.bucketeer.event.domain.Event.EntityType} */ (reader.readEnum());
      msg.setEntityType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    case 5:
      var value = /** @type {!proto.bucketeer.event.domain.Event.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.sender.DomainEventNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.sender.DomainEventNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.sender.DomainEventNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEditor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_event_domain_event_pb.Editor.serializeBinaryToWriter
    );
  }
  f = message.getEntityType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getEnvironmentId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional bucketeer.event.domain.Editor editor = 2;
 * @return {?proto.bucketeer.event.domain.Editor}
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.getEditor = function() {
  return /** @type{?proto.bucketeer.event.domain.Editor} */ (
    jspb.Message.getWrapperField(this, proto_event_domain_event_pb.Editor, 2));
};


/**
 * @param {?proto.bucketeer.event.domain.Editor|undefined} value
 * @return {!proto.bucketeer.notification.sender.DomainEventNotification} returns this
*/
proto.bucketeer.notification.sender.DomainEventNotification.prototype.setEditor = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bucketeer.notification.sender.DomainEventNotification} returns this
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.clearEditor = function() {
  return this.setEditor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.hasEditor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bucketeer.event.domain.Event.EntityType entity_type = 3;
 * @return {!proto.bucketeer.event.domain.Event.EntityType}
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.getEntityType = function() {
  return /** @type {!proto.bucketeer.event.domain.Event.EntityType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.bucketeer.event.domain.Event.EntityType} value
 * @return {!proto.bucketeer.notification.sender.DomainEventNotification} returns this
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.setEntityType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string entity_id = 4;
 * @return {string}
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.notification.sender.DomainEventNotification} returns this
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.setEntityId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bucketeer.event.domain.Event.Type type = 5;
 * @return {!proto.bucketeer.event.domain.Event.Type}
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.getType = function() {
  return /** @type {!proto.bucketeer.event.domain.Event.Type} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.bucketeer.event.domain.Event.Type} value
 * @return {!proto.bucketeer.notification.sender.DomainEventNotification} returns this
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string environment_id = 6;
 * @return {string}
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.getEnvironmentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.notification.sender.DomainEventNotification} returns this
 */
proto.bucketeer.notification.sender.DomainEventNotification.prototype.setEnvironmentId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.sender.FeatureStaleNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.sender.FeatureStaleNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto_feature_feature_pb.Feature.toObject, includeInstance),
    environmentId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.sender.FeatureStaleNotification}
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.sender.FeatureStaleNotification;
  return proto.bucketeer.notification.sender.FeatureStaleNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.sender.FeatureStaleNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.sender.FeatureStaleNotification}
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto_feature_feature_pb.Feature;
      reader.readMessage(value,proto_feature_feature_pb.Feature.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.sender.FeatureStaleNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.sender.FeatureStaleNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto_feature_feature_pb.Feature.serializeBinaryToWriter
    );
  }
  f = message.getEnvironmentId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated bucketeer.feature.Feature features = 2;
 * @return {!Array<!proto.bucketeer.feature.Feature>}
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.bucketeer.feature.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_feature_feature_pb.Feature, 2));
};


/**
 * @param {!Array<!proto.bucketeer.feature.Feature>} value
 * @return {!proto.bucketeer.notification.sender.FeatureStaleNotification} returns this
*/
proto.bucketeer.notification.sender.FeatureStaleNotification.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bucketeer.feature.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.feature.Feature}
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bucketeer.feature.Feature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.notification.sender.FeatureStaleNotification} returns this
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * optional string environment_id = 3;
 * @return {string}
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.prototype.getEnvironmentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.notification.sender.FeatureStaleNotification} returns this
 */
proto.bucketeer.notification.sender.FeatureStaleNotification.prototype.setEnvironmentId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.sender.ExperimentRunningNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.sender.ExperimentRunningNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    experimentsList: jspb.Message.toObjectList(msg.getExperimentsList(),
    proto_experiment_experiment_pb.Experiment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.sender.ExperimentRunningNotification}
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.sender.ExperimentRunningNotification;
  return proto.bucketeer.notification.sender.ExperimentRunningNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.sender.ExperimentRunningNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.sender.ExperimentRunningNotification}
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentId(value);
      break;
    case 3:
      var value = new proto_experiment_experiment_pb.Experiment;
      reader.readMessage(value,proto_experiment_experiment_pb.Experiment.deserializeBinaryFromReader);
      msg.addExperiments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.sender.ExperimentRunningNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.sender.ExperimentRunningNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExperimentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto_experiment_experiment_pb.Experiment.serializeBinaryToWriter
    );
  }
};


/**
 * optional string environment_id = 2;
 * @return {string}
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.prototype.getEnvironmentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.notification.sender.ExperimentRunningNotification} returns this
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.prototype.setEnvironmentId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated bucketeer.experiment.Experiment experiments = 3;
 * @return {!Array<!proto.bucketeer.experiment.Experiment>}
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.prototype.getExperimentsList = function() {
  return /** @type{!Array<!proto.bucketeer.experiment.Experiment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_experiment_experiment_pb.Experiment, 3));
};


/**
 * @param {!Array<!proto.bucketeer.experiment.Experiment>} value
 * @return {!proto.bucketeer.notification.sender.ExperimentRunningNotification} returns this
*/
proto.bucketeer.notification.sender.ExperimentRunningNotification.prototype.setExperimentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bucketeer.experiment.Experiment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bucketeer.experiment.Experiment}
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.prototype.addExperiments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bucketeer.experiment.Experiment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bucketeer.notification.sender.ExperimentRunningNotification} returns this
 */
proto.bucketeer.notification.sender.ExperimentRunningNotification.prototype.clearExperimentsList = function() {
  return this.setExperimentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bucketeer.notification.sender.MauCountNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.bucketeer.notification.sender.MauCountNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bucketeer.notification.sender.MauCountNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.sender.MauCountNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    month: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bucketeer.notification.sender.MauCountNotification}
 */
proto.bucketeer.notification.sender.MauCountNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bucketeer.notification.sender.MauCountNotification;
  return proto.bucketeer.notification.sender.MauCountNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bucketeer.notification.sender.MauCountNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bucketeer.notification.sender.MauCountNotification}
 */
proto.bucketeer.notification.sender.MauCountNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEventCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMonth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bucketeer.notification.sender.MauCountNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bucketeer.notification.sender.MauCountNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bucketeer.notification.sender.MauCountNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bucketeer.notification.sender.MauCountNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventCount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserCount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMonth();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string environment_id = 1;
 * @return {string}
 */
proto.bucketeer.notification.sender.MauCountNotification.prototype.getEnvironmentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bucketeer.notification.sender.MauCountNotification} returns this
 */
proto.bucketeer.notification.sender.MauCountNotification.prototype.setEnvironmentId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 event_count = 2;
 * @return {number}
 */
proto.bucketeer.notification.sender.MauCountNotification.prototype.getEventCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.notification.sender.MauCountNotification} returns this
 */
proto.bucketeer.notification.sender.MauCountNotification.prototype.setEventCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 user_count = 3;
 * @return {number}
 */
proto.bucketeer.notification.sender.MauCountNotification.prototype.getUserCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.notification.sender.MauCountNotification} returns this
 */
proto.bucketeer.notification.sender.MauCountNotification.prototype.setUserCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 month = 4;
 * @return {number}
 */
proto.bucketeer.notification.sender.MauCountNotification.prototype.getMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bucketeer.notification.sender.MauCountNotification} returns this
 */
proto.bucketeer.notification.sender.MauCountNotification.prototype.setMonth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.bucketeer.notification.sender);
