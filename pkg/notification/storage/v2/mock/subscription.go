// Code generated by MockGen. DO NOT EDIT.
// Source: subscription.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "github.com/bucketeer-io/bucketeer/pkg/notification/domain"
	mysql "github.com/bucketeer-io/bucketeer/pkg/storage/v2/mysql"
	notification "github.com/bucketeer-io/bucketeer/proto/notification"
)

// MockSubscriptionStorage is a mock of SubscriptionStorage interface.
type MockSubscriptionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionStorageMockRecorder
}

// MockSubscriptionStorageMockRecorder is the mock recorder for MockSubscriptionStorage.
type MockSubscriptionStorageMockRecorder struct {
	mock *MockSubscriptionStorage
}

// NewMockSubscriptionStorage creates a new mock instance.
func NewMockSubscriptionStorage(ctrl *gomock.Controller) *MockSubscriptionStorage {
	mock := &MockSubscriptionStorage{ctrl: ctrl}
	mock.recorder = &MockSubscriptionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionStorage) EXPECT() *MockSubscriptionStorageMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockSubscriptionStorage) CreateSubscription(ctx context.Context, e *domain.Subscription, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, e, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubscriptionStorageMockRecorder) CreateSubscription(ctx, e, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionStorage)(nil).CreateSubscription), ctx, e, environmentNamespace)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionStorage) DeleteSubscription(ctx context.Context, id, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, id, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionStorageMockRecorder) DeleteSubscription(ctx, id, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionStorage)(nil).DeleteSubscription), ctx, id, environmentNamespace)
}

// GetSubscription mocks base method.
func (m *MockSubscriptionStorage) GetSubscription(ctx context.Context, id, environmentNamespace string) (*domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, id, environmentNamespace)
	ret0, _ := ret[0].(*domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockSubscriptionStorageMockRecorder) GetSubscription(ctx, id, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockSubscriptionStorage)(nil).GetSubscription), ctx, id, environmentNamespace)
}

// ListSubscriptions mocks base method.
func (m *MockSubscriptionStorage) ListSubscriptions(ctx context.Context, whereParts []mysql.WherePart, orders []*mysql.Order, limit, offset int) ([]*notification.Subscription, int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", ctx, whereParts, orders, limit, offset)
	ret0, _ := ret[0].([]*notification.Subscription)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockSubscriptionStorageMockRecorder) ListSubscriptions(ctx, whereParts, orders, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockSubscriptionStorage)(nil).ListSubscriptions), ctx, whereParts, orders, limit, offset)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionStorage) UpdateSubscription(ctx context.Context, e *domain.Subscription, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, e, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionStorageMockRecorder) UpdateSubscription(ctx, e, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionStorage)(nil).UpdateSubscription), ctx, e, environmentNamespace)
}
