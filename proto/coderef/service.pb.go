// Copyright 2024 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: proto/coderef/service.proto

package coderef

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListCodeReferencesRequest_OrderBy int32

const (
	ListCodeReferencesRequest_DEFAULT    ListCodeReferencesRequest_OrderBy = 0
	ListCodeReferencesRequest_CREATED_AT ListCodeReferencesRequest_OrderBy = 1
	ListCodeReferencesRequest_UPDATED_AT ListCodeReferencesRequest_OrderBy = 2
)

// Enum value maps for ListCodeReferencesRequest_OrderBy.
var (
	ListCodeReferencesRequest_OrderBy_name = map[int32]string{
		0: "DEFAULT",
		1: "CREATED_AT",
		2: "UPDATED_AT",
	}
	ListCodeReferencesRequest_OrderBy_value = map[string]int32{
		"DEFAULT":    0,
		"CREATED_AT": 1,
		"UPDATED_AT": 2,
	}
)

func (x ListCodeReferencesRequest_OrderBy) Enum() *ListCodeReferencesRequest_OrderBy {
	p := new(ListCodeReferencesRequest_OrderBy)
	*p = x
	return p
}

func (x ListCodeReferencesRequest_OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCodeReferencesRequest_OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_coderef_service_proto_enumTypes[0].Descriptor()
}

func (ListCodeReferencesRequest_OrderBy) Type() protoreflect.EnumType {
	return &file_proto_coderef_service_proto_enumTypes[0]
}

func (x ListCodeReferencesRequest_OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCodeReferencesRequest_OrderBy.Descriptor instead.
func (ListCodeReferencesRequest_OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{2, 0}
}

type ListCodeReferencesRequest_OrderDirection int32

const (
	ListCodeReferencesRequest_ASC  ListCodeReferencesRequest_OrderDirection = 0
	ListCodeReferencesRequest_DESC ListCodeReferencesRequest_OrderDirection = 1
)

// Enum value maps for ListCodeReferencesRequest_OrderDirection.
var (
	ListCodeReferencesRequest_OrderDirection_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	ListCodeReferencesRequest_OrderDirection_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x ListCodeReferencesRequest_OrderDirection) Enum() *ListCodeReferencesRequest_OrderDirection {
	p := new(ListCodeReferencesRequest_OrderDirection)
	*p = x
	return p
}

func (x ListCodeReferencesRequest_OrderDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCodeReferencesRequest_OrderDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_coderef_service_proto_enumTypes[1].Descriptor()
}

func (ListCodeReferencesRequest_OrderDirection) Type() protoreflect.EnumType {
	return &file_proto_coderef_service_proto_enumTypes[1]
}

func (x ListCodeReferencesRequest_OrderDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCodeReferencesRequest_OrderDirection.Descriptor instead.
func (ListCodeReferencesRequest_OrderDirection) EnumDescriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{2, 1}
}

type GetCodeReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	EnvironmentId string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
}

func (x *GetCodeReferenceRequest) Reset() {
	*x = GetCodeReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeReferenceRequest) ProtoMessage() {}

func (x *GetCodeReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetCodeReferenceRequest) Descriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetCodeReferenceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCodeReferenceRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type GetCodeReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeReference *CodeReference `protobuf:"bytes,1,opt,name=code_reference,json=codeReference,proto3" json:"code_reference"`
}

func (x *GetCodeReferenceResponse) Reset() {
	*x = GetCodeReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeReferenceResponse) ProtoMessage() {}

func (x *GetCodeReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetCodeReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetCodeReferenceResponse) GetCodeReference() *CodeReference {
	if x != nil {
		return x.CodeReference
	}
	return nil
}

type ListCodeReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentId    string                                   `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
	FeatureId        string                                   `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id"`
	RepositoryName   string                                   `protobuf:"bytes,3,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name"`
	RepositoryOwner  string                                   `protobuf:"bytes,4,opt,name=repository_owner,json=repositoryOwner,proto3" json:"repository_owner"`
	RepositoryType   CodeReference_RepositoryType             `protobuf:"varint,5,opt,name=repository_type,json=repositoryType,proto3,enum=bucketeer.coderef.CodeReference_RepositoryType" json:"repository_type"`
	RepositoryBranch string                                   `protobuf:"bytes,6,opt,name=repository_branch,json=repositoryBranch,proto3" json:"repository_branch"`
	Cursor           string                                   `protobuf:"bytes,7,opt,name=cursor,proto3" json:"cursor"`
	PageSize         int64                                    `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	OrderBy          ListCodeReferencesRequest_OrderBy        `protobuf:"varint,9,opt,name=order_by,json=orderBy,proto3,enum=bucketeer.coderef.ListCodeReferencesRequest_OrderBy" json:"order_by"`
	OrderDirection   ListCodeReferencesRequest_OrderDirection `protobuf:"varint,10,opt,name=order_direction,json=orderDirection,proto3,enum=bucketeer.coderef.ListCodeReferencesRequest_OrderDirection" json:"order_direction"`
}

func (x *ListCodeReferencesRequest) Reset() {
	*x = ListCodeReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeReferencesRequest) ProtoMessage() {}

func (x *ListCodeReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeReferencesRequest.ProtoReflect.Descriptor instead.
func (*ListCodeReferencesRequest) Descriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListCodeReferencesRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *ListCodeReferencesRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *ListCodeReferencesRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *ListCodeReferencesRequest) GetRepositoryOwner() string {
	if x != nil {
		return x.RepositoryOwner
	}
	return ""
}

func (x *ListCodeReferencesRequest) GetRepositoryType() CodeReference_RepositoryType {
	if x != nil {
		return x.RepositoryType
	}
	return CodeReference_REPOSITORY_TYPE_UNSPECIFIED
}

func (x *ListCodeReferencesRequest) GetRepositoryBranch() string {
	if x != nil {
		return x.RepositoryBranch
	}
	return ""
}

func (x *ListCodeReferencesRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListCodeReferencesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCodeReferencesRequest) GetOrderBy() ListCodeReferencesRequest_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return ListCodeReferencesRequest_DEFAULT
}

func (x *ListCodeReferencesRequest) GetOrderDirection() ListCodeReferencesRequest_OrderDirection {
	if x != nil {
		return x.OrderDirection
	}
	return ListCodeReferencesRequest_ASC
}

type ListCodeReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeReferences []*CodeReference `protobuf:"bytes,1,rep,name=code_references,json=codeReferences,proto3" json:"code_references"`
	Cursor         string           `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor"`
	TotalCount     int64            `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
}

func (x *ListCodeReferencesResponse) Reset() {
	*x = ListCodeReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeReferencesResponse) ProtoMessage() {}

func (x *ListCodeReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeReferencesResponse.ProtoReflect.Descriptor instead.
func (*ListCodeReferencesResponse) Descriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListCodeReferencesResponse) GetCodeReferences() []*CodeReference {
	if x != nil {
		return x.CodeReferences
	}
	return nil
}

func (x *ListCodeReferencesResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListCodeReferencesResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CreateCodeReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId        string                       `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id"`
	EnvironmentId    string                       `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
	FilePath         string                       `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path"`
	LineNumber       int32                        `protobuf:"varint,4,opt,name=line_number,json=lineNumber,proto3" json:"line_number"`
	CodeSnippet      string                       `protobuf:"bytes,5,opt,name=code_snippet,json=codeSnippet,proto3" json:"code_snippet"`
	ContentHash      string                       `protobuf:"bytes,6,opt,name=content_hash,json=contentHash,proto3" json:"content_hash"`
	Aliases          []string                     `protobuf:"bytes,7,rep,name=aliases,proto3" json:"aliases"`
	RepositoryName   string                       `protobuf:"bytes,8,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name"`
	RepositoryOwner  string                       `protobuf:"bytes,9,opt,name=repository_owner,json=repositoryOwner,proto3" json:"repository_owner"`
	RepositoryType   CodeReference_RepositoryType `protobuf:"varint,10,opt,name=repository_type,json=repositoryType,proto3,enum=bucketeer.coderef.CodeReference_RepositoryType" json:"repository_type"`
	RepositoryBranch string                       `protobuf:"bytes,11,opt,name=repository_branch,json=repositoryBranch,proto3" json:"repository_branch"`
	CommitHash       string                       `protobuf:"bytes,12,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash"`
}

func (x *CreateCodeReferenceRequest) Reset() {
	*x = CreateCodeReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCodeReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCodeReferenceRequest) ProtoMessage() {}

func (x *CreateCodeReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCodeReferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateCodeReferenceRequest) Descriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCodeReferenceRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *CreateCodeReferenceRequest) GetCodeSnippet() string {
	if x != nil {
		return x.CodeSnippet
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *CreateCodeReferenceRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetRepositoryOwner() string {
	if x != nil {
		return x.RepositoryOwner
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetRepositoryType() CodeReference_RepositoryType {
	if x != nil {
		return x.RepositoryType
	}
	return CodeReference_REPOSITORY_TYPE_UNSPECIFIED
}

func (x *CreateCodeReferenceRequest) GetRepositoryBranch() string {
	if x != nil {
		return x.RepositoryBranch
	}
	return ""
}

func (x *CreateCodeReferenceRequest) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

type CreateCodeReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeReference *CodeReference `protobuf:"bytes,1,opt,name=code_reference,json=codeReference,proto3" json:"code_reference"`
}

func (x *CreateCodeReferenceResponse) Reset() {
	*x = CreateCodeReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCodeReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCodeReferenceResponse) ProtoMessage() {}

func (x *CreateCodeReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCodeReferenceResponse.ProtoReflect.Descriptor instead.
func (*CreateCodeReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCodeReferenceResponse) GetCodeReference() *CodeReference {
	if x != nil {
		return x.CodeReference
	}
	return nil
}

type UpdateCodeReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	EnvironmentId    string                       `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
	FilePath         string                       `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path"`
	LineNumber       int32                        `protobuf:"varint,4,opt,name=line_number,json=lineNumber,proto3" json:"line_number"`
	CodeSnippet      string                       `protobuf:"bytes,5,opt,name=code_snippet,json=codeSnippet,proto3" json:"code_snippet"`
	ContentHash      string                       `protobuf:"bytes,6,opt,name=content_hash,json=contentHash,proto3" json:"content_hash"`
	Aliases          []string                     `protobuf:"bytes,7,rep,name=aliases,proto3" json:"aliases"`
	RepositoryName   string                       `protobuf:"bytes,8,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name"`
	RepositoryOwner  string                       `protobuf:"bytes,9,opt,name=repository_owner,json=repositoryOwner,proto3" json:"repository_owner"`
	RepositoryType   CodeReference_RepositoryType `protobuf:"varint,10,opt,name=repository_type,json=repositoryType,proto3,enum=bucketeer.coderef.CodeReference_RepositoryType" json:"repository_type"`
	RepositoryBranch string                       `protobuf:"bytes,11,opt,name=repository_branch,json=repositoryBranch,proto3" json:"repository_branch"`
	CommitHash       string                       `protobuf:"bytes,12,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash"`
}

func (x *UpdateCodeReferenceRequest) Reset() {
	*x = UpdateCodeReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCodeReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCodeReferenceRequest) ProtoMessage() {}

func (x *UpdateCodeReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCodeReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateCodeReferenceRequest) Descriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCodeReferenceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *UpdateCodeReferenceRequest) GetCodeSnippet() string {
	if x != nil {
		return x.CodeSnippet
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *UpdateCodeReferenceRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetRepositoryOwner() string {
	if x != nil {
		return x.RepositoryOwner
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetRepositoryType() CodeReference_RepositoryType {
	if x != nil {
		return x.RepositoryType
	}
	return CodeReference_REPOSITORY_TYPE_UNSPECIFIED
}

func (x *UpdateCodeReferenceRequest) GetRepositoryBranch() string {
	if x != nil {
		return x.RepositoryBranch
	}
	return ""
}

func (x *UpdateCodeReferenceRequest) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

type UpdateCodeReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeReference *CodeReference `protobuf:"bytes,1,opt,name=code_reference,json=codeReference,proto3" json:"code_reference"`
}

func (x *UpdateCodeReferenceResponse) Reset() {
	*x = UpdateCodeReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCodeReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCodeReferenceResponse) ProtoMessage() {}

func (x *UpdateCodeReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCodeReferenceResponse.ProtoReflect.Descriptor instead.
func (*UpdateCodeReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCodeReferenceResponse) GetCodeReference() *CodeReference {
	if x != nil {
		return x.CodeReference
	}
	return nil
}

type DeleteCodeReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	EnvironmentId string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id"`
}

func (x *DeleteCodeReferenceRequest) Reset() {
	*x = DeleteCodeReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCodeReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCodeReferenceRequest) ProtoMessage() {}

func (x *DeleteCodeReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCodeReferenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteCodeReferenceRequest) Descriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCodeReferenceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteCodeReferenceRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type DeleteCodeReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCodeReferenceResponse) Reset() {
	*x = DeleteCodeReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coderef_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCodeReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCodeReferenceResponse) ProtoMessage() {}

func (x *DeleteCodeReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coderef_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCodeReferenceResponse.ProtoReflect.Descriptor instead.
func (*DeleteCodeReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_coderef_service_proto_rawDescGZIP(), []int{9}
}

var File_proto_coderef_service_proto protoreflect.FileDescriptor

var file_proto_coderef_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66,
	0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x85, 0x05, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x4f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x64, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x02, 0x22, 0x23,
	0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53,
	0x43, 0x10, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfc, 0x03, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x58, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x66, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xed, 0x03,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x65, 0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x66, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe2, 0x04, 0x0a, 0x14, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65,
	0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65,
	0x66, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x66,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x31,
	0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65,
	0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_coderef_service_proto_rawDescOnce sync.Once
	file_proto_coderef_service_proto_rawDescData = file_proto_coderef_service_proto_rawDesc
)

func file_proto_coderef_service_proto_rawDescGZIP() []byte {
	file_proto_coderef_service_proto_rawDescOnce.Do(func() {
		file_proto_coderef_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_coderef_service_proto_rawDescData)
	})
	return file_proto_coderef_service_proto_rawDescData
}

var file_proto_coderef_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_coderef_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_coderef_service_proto_goTypes = []interface{}{
	(ListCodeReferencesRequest_OrderBy)(0),        // 0: bucketeer.coderef.ListCodeReferencesRequest.OrderBy
	(ListCodeReferencesRequest_OrderDirection)(0), // 1: bucketeer.coderef.ListCodeReferencesRequest.OrderDirection
	(*GetCodeReferenceRequest)(nil),               // 2: bucketeer.coderef.GetCodeReferenceRequest
	(*GetCodeReferenceResponse)(nil),              // 3: bucketeer.coderef.GetCodeReferenceResponse
	(*ListCodeReferencesRequest)(nil),             // 4: bucketeer.coderef.ListCodeReferencesRequest
	(*ListCodeReferencesResponse)(nil),            // 5: bucketeer.coderef.ListCodeReferencesResponse
	(*CreateCodeReferenceRequest)(nil),            // 6: bucketeer.coderef.CreateCodeReferenceRequest
	(*CreateCodeReferenceResponse)(nil),           // 7: bucketeer.coderef.CreateCodeReferenceResponse
	(*UpdateCodeReferenceRequest)(nil),            // 8: bucketeer.coderef.UpdateCodeReferenceRequest
	(*UpdateCodeReferenceResponse)(nil),           // 9: bucketeer.coderef.UpdateCodeReferenceResponse
	(*DeleteCodeReferenceRequest)(nil),            // 10: bucketeer.coderef.DeleteCodeReferenceRequest
	(*DeleteCodeReferenceResponse)(nil),           // 11: bucketeer.coderef.DeleteCodeReferenceResponse
	(*CodeReference)(nil),                         // 12: bucketeer.coderef.CodeReference
	(CodeReference_RepositoryType)(0),             // 13: bucketeer.coderef.CodeReference.RepositoryType
}
var file_proto_coderef_service_proto_depIdxs = []int32{
	12, // 0: bucketeer.coderef.GetCodeReferenceResponse.code_reference:type_name -> bucketeer.coderef.CodeReference
	13, // 1: bucketeer.coderef.ListCodeReferencesRequest.repository_type:type_name -> bucketeer.coderef.CodeReference.RepositoryType
	0,  // 2: bucketeer.coderef.ListCodeReferencesRequest.order_by:type_name -> bucketeer.coderef.ListCodeReferencesRequest.OrderBy
	1,  // 3: bucketeer.coderef.ListCodeReferencesRequest.order_direction:type_name -> bucketeer.coderef.ListCodeReferencesRequest.OrderDirection
	12, // 4: bucketeer.coderef.ListCodeReferencesResponse.code_references:type_name -> bucketeer.coderef.CodeReference
	13, // 5: bucketeer.coderef.CreateCodeReferenceRequest.repository_type:type_name -> bucketeer.coderef.CodeReference.RepositoryType
	12, // 6: bucketeer.coderef.CreateCodeReferenceResponse.code_reference:type_name -> bucketeer.coderef.CodeReference
	13, // 7: bucketeer.coderef.UpdateCodeReferenceRequest.repository_type:type_name -> bucketeer.coderef.CodeReference.RepositoryType
	12, // 8: bucketeer.coderef.UpdateCodeReferenceResponse.code_reference:type_name -> bucketeer.coderef.CodeReference
	2,  // 9: bucketeer.coderef.CodeReferenceService.GetCodeReference:input_type -> bucketeer.coderef.GetCodeReferenceRequest
	4,  // 10: bucketeer.coderef.CodeReferenceService.ListCodeReferences:input_type -> bucketeer.coderef.ListCodeReferencesRequest
	6,  // 11: bucketeer.coderef.CodeReferenceService.CreateCodeReference:input_type -> bucketeer.coderef.CreateCodeReferenceRequest
	8,  // 12: bucketeer.coderef.CodeReferenceService.UpdateCodeReference:input_type -> bucketeer.coderef.UpdateCodeReferenceRequest
	10, // 13: bucketeer.coderef.CodeReferenceService.DeleteCodeReference:input_type -> bucketeer.coderef.DeleteCodeReferenceRequest
	3,  // 14: bucketeer.coderef.CodeReferenceService.GetCodeReference:output_type -> bucketeer.coderef.GetCodeReferenceResponse
	5,  // 15: bucketeer.coderef.CodeReferenceService.ListCodeReferences:output_type -> bucketeer.coderef.ListCodeReferencesResponse
	7,  // 16: bucketeer.coderef.CodeReferenceService.CreateCodeReference:output_type -> bucketeer.coderef.CreateCodeReferenceResponse
	9,  // 17: bucketeer.coderef.CodeReferenceService.UpdateCodeReference:output_type -> bucketeer.coderef.UpdateCodeReferenceResponse
	11, // 18: bucketeer.coderef.CodeReferenceService.DeleteCodeReference:output_type -> bucketeer.coderef.DeleteCodeReferenceResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_coderef_service_proto_init() }
func file_proto_coderef_service_proto_init() {
	if File_proto_coderef_service_proto != nil {
		return
	}
	file_proto_coderef_code_reference_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_coderef_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCodeReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCodeReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCodeReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCodeReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCodeReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coderef_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCodeReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_coderef_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_coderef_service_proto_goTypes,
		DependencyIndexes: file_proto_coderef_service_proto_depIdxs,
		EnumInfos:         file_proto_coderef_service_proto_enumTypes,
		MessageInfos:      file_proto_coderef_service_proto_msgTypes,
	}.Build()
	File_proto_coderef_service_proto = out.File
	file_proto_coderef_service_proto_rawDesc = nil
	file_proto_coderef_service_proto_goTypes = nil
	file_proto_coderef_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CodeReferenceServiceClient is the client API for CodeReferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CodeReferenceServiceClient interface {
	GetCodeReference(ctx context.Context, in *GetCodeReferenceRequest, opts ...grpc.CallOption) (*GetCodeReferenceResponse, error)
	ListCodeReferences(ctx context.Context, in *ListCodeReferencesRequest, opts ...grpc.CallOption) (*ListCodeReferencesResponse, error)
	CreateCodeReference(ctx context.Context, in *CreateCodeReferenceRequest, opts ...grpc.CallOption) (*CreateCodeReferenceResponse, error)
	UpdateCodeReference(ctx context.Context, in *UpdateCodeReferenceRequest, opts ...grpc.CallOption) (*UpdateCodeReferenceResponse, error)
	DeleteCodeReference(ctx context.Context, in *DeleteCodeReferenceRequest, opts ...grpc.CallOption) (*DeleteCodeReferenceResponse, error)
}

type codeReferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeReferenceServiceClient(cc grpc.ClientConnInterface) CodeReferenceServiceClient {
	return &codeReferenceServiceClient{cc}
}

func (c *codeReferenceServiceClient) GetCodeReference(ctx context.Context, in *GetCodeReferenceRequest, opts ...grpc.CallOption) (*GetCodeReferenceResponse, error) {
	out := new(GetCodeReferenceResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.coderef.CodeReferenceService/GetCodeReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeReferenceServiceClient) ListCodeReferences(ctx context.Context, in *ListCodeReferencesRequest, opts ...grpc.CallOption) (*ListCodeReferencesResponse, error) {
	out := new(ListCodeReferencesResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.coderef.CodeReferenceService/ListCodeReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeReferenceServiceClient) CreateCodeReference(ctx context.Context, in *CreateCodeReferenceRequest, opts ...grpc.CallOption) (*CreateCodeReferenceResponse, error) {
	out := new(CreateCodeReferenceResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.coderef.CodeReferenceService/CreateCodeReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeReferenceServiceClient) UpdateCodeReference(ctx context.Context, in *UpdateCodeReferenceRequest, opts ...grpc.CallOption) (*UpdateCodeReferenceResponse, error) {
	out := new(UpdateCodeReferenceResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.coderef.CodeReferenceService/UpdateCodeReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeReferenceServiceClient) DeleteCodeReference(ctx context.Context, in *DeleteCodeReferenceRequest, opts ...grpc.CallOption) (*DeleteCodeReferenceResponse, error) {
	out := new(DeleteCodeReferenceResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.coderef.CodeReferenceService/DeleteCodeReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeReferenceServiceServer is the server API for CodeReferenceService service.
type CodeReferenceServiceServer interface {
	GetCodeReference(context.Context, *GetCodeReferenceRequest) (*GetCodeReferenceResponse, error)
	ListCodeReferences(context.Context, *ListCodeReferencesRequest) (*ListCodeReferencesResponse, error)
	CreateCodeReference(context.Context, *CreateCodeReferenceRequest) (*CreateCodeReferenceResponse, error)
	UpdateCodeReference(context.Context, *UpdateCodeReferenceRequest) (*UpdateCodeReferenceResponse, error)
	DeleteCodeReference(context.Context, *DeleteCodeReferenceRequest) (*DeleteCodeReferenceResponse, error)
}

// UnimplementedCodeReferenceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCodeReferenceServiceServer struct {
}

func (*UnimplementedCodeReferenceServiceServer) GetCodeReference(context.Context, *GetCodeReferenceRequest) (*GetCodeReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeReference not implemented")
}
func (*UnimplementedCodeReferenceServiceServer) ListCodeReferences(context.Context, *ListCodeReferencesRequest) (*ListCodeReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodeReferences not implemented")
}
func (*UnimplementedCodeReferenceServiceServer) CreateCodeReference(context.Context, *CreateCodeReferenceRequest) (*CreateCodeReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCodeReference not implemented")
}
func (*UnimplementedCodeReferenceServiceServer) UpdateCodeReference(context.Context, *UpdateCodeReferenceRequest) (*UpdateCodeReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCodeReference not implemented")
}
func (*UnimplementedCodeReferenceServiceServer) DeleteCodeReference(context.Context, *DeleteCodeReferenceRequest) (*DeleteCodeReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCodeReference not implemented")
}

func RegisterCodeReferenceServiceServer(s *grpc.Server, srv CodeReferenceServiceServer) {
	s.RegisterService(&_CodeReferenceService_serviceDesc, srv)
}

func _CodeReferenceService_GetCodeReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeReferenceServiceServer).GetCodeReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.coderef.CodeReferenceService/GetCodeReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeReferenceServiceServer).GetCodeReference(ctx, req.(*GetCodeReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeReferenceService_ListCodeReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCodeReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeReferenceServiceServer).ListCodeReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.coderef.CodeReferenceService/ListCodeReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeReferenceServiceServer).ListCodeReferences(ctx, req.(*ListCodeReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeReferenceService_CreateCodeReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCodeReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeReferenceServiceServer).CreateCodeReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.coderef.CodeReferenceService/CreateCodeReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeReferenceServiceServer).CreateCodeReference(ctx, req.(*CreateCodeReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeReferenceService_UpdateCodeReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCodeReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeReferenceServiceServer).UpdateCodeReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.coderef.CodeReferenceService/UpdateCodeReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeReferenceServiceServer).UpdateCodeReference(ctx, req.(*UpdateCodeReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeReferenceService_DeleteCodeReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCodeReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeReferenceServiceServer).DeleteCodeReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.coderef.CodeReferenceService/DeleteCodeReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeReferenceServiceServer).DeleteCodeReference(ctx, req.(*DeleteCodeReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CodeReferenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bucketeer.coderef.CodeReferenceService",
	HandlerType: (*CodeReferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCodeReference",
			Handler:    _CodeReferenceService_GetCodeReference_Handler,
		},
		{
			MethodName: "ListCodeReferences",
			Handler:    _CodeReferenceService_ListCodeReferences_Handler,
		},
		{
			MethodName: "CreateCodeReference",
			Handler:    _CodeReferenceService_CreateCodeReference_Handler,
		},
		{
			MethodName: "UpdateCodeReference",
			Handler:    _CodeReferenceService_UpdateCodeReference_Handler,
		},
		{
			MethodName: "DeleteCodeReference",
			Handler:    _CodeReferenceService_DeleteCodeReference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/coderef/service.proto",
}
