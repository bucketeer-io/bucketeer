// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -package=mock -destination=./mock/client.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"

	team "github.com/bucketeer-io/bucketeer/proto/team"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CreateTeam mocks base method.
func (m *MockClient) CreateTeam(ctx context.Context, in *team.CreateTeamRequest, opts ...grpc.CallOption) (*team.CreateTeamResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTeam", varargs...)
	ret0, _ := ret[0].(*team.CreateTeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockClientMockRecorder) CreateTeam(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockClient)(nil).CreateTeam), varargs...)
}

// DeleteTeam mocks base method.
func (m *MockClient) DeleteTeam(ctx context.Context, in *team.DeleteTeamRequest, opts ...grpc.CallOption) (*team.DeleteTeamResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTeam", varargs...)
	ret0, _ := ret[0].(*team.DeleteTeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockClientMockRecorder) DeleteTeam(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockClient)(nil).DeleteTeam), varargs...)
}

// ListTeams mocks base method.
func (m *MockClient) ListTeams(ctx context.Context, in *team.ListTeamsRequest, opts ...grpc.CallOption) (*team.ListTeamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTeams", varargs...)
	ret0, _ := ret[0].(*team.ListTeamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockClientMockRecorder) ListTeams(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockClient)(nil).ListTeams), varargs...)
}
