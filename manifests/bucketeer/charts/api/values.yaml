image:
  repository: ghcr.io/bucketeer-io/bucketeer-api
  pullPolicy: IfNotPresent
fullnameOverride: "api"
namespace: default
env:
  project:
  gcpEnabled: true
  profile: true
  pubsubEmulatorHost:
  goalTopic:
  evaluationTopic:
  userTopic:
  metricsTopic:
  publishNumGoroutines: 200
  publishTimeout: 1m
  redis:
    serverName:
    poolMaxIdle: 25
    poolMaxActive: 25
    addr:
  oldestEventTimestamp:
  furthestEventTimestamp:
  logLevel: info
  port: 9090
  metricsPort: 9002
  featureService: localhost:9001
  accountService: localhost:9001
  pushService: localhost:9001
  codeRefService: localhost:9001
  traceSamplingProbability: 0.0001
affinity: {}
nodeSelector: {}
pdb:
  enabled:
  maxUnavailable: 20%
hpa:
  enabled:
  minReplicas:
  maxReplicas:
  metrics:
    cpu:
      targetAverageUtilization:
tls:
  bucketeerJP:
    secrets:
  service:
    secret:
serviceToken:
  secret:
envoy:
  image:
    repository: ghcr.io/bucketeer-io/bucketeer-envoy
    tag: v1.31.0
    pullPolicy: IfNotPresent
  lbPolicy: LEAST_REQUEST
  descriptor: 
  config:
  port: 9000
  adminPort: 8001
  resources: {}
  circuitBreaker:
    maxPendingRequests: 3500
    maxRequests: 3500
    maxConnections: 3500
service:
  type: ClusterIP
  externalPort: 9000
ingress:
  name: api
  host:
  staticIPName:
  rulePaths:
    - pathType: ImplementationSpecific
      backend:
        service:
          name: api
          port:
            number: 9000
health:
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
    failureThreshold: 5
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
    failureThreshold: 2
resources: {}
serviceAccount:
  annotations: {}
gcpMultiCluster:
  configCluster: false
  enabled: false
  service:
    name: api-multi-cluster-service
  ingress:
    name: api-multi-cluster-ingress
    host:
    staticIPName:
    secretName:
    rulePaths:
      - path: /
        backend:
          serviceName: api-multi-cluster-service
          servicePort: 9000
