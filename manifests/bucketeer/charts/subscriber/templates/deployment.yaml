{{- if eq (include "subscriber.deploy" .) "true" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "subscriber.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "subscriber.name" . }}
    chart: {{ template "subscriber.chart" . }}
    release: {{ template "subscriber.fullname" . }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "subscriber.name" . }}
      release: {{ template "subscriber.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "subscriber.name" . }}
        release: {{ template "subscriber.fullname" . }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/envoy-configmap.yaml") . | sha256sum }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 30 }}
      {{- with .Values.global.image.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      volumes:
        - name: envoy-config
          configMap:
            name: {{ template "subscriber.fullname" . }}-envoy-config
        - name: service-cert-secret
          secret:
            secretName: {{ template "service-cert-secret" . }}
        - name: service-token-secret
          secret:
            secretName: {{ template "service-token-secret" . }}
        - name: subscriber-config
          configMap:
            name: {{ template "subscriber.fullname" . }}-subscribers-config
      {{- if .Values.serviceAccount.annotations }}
      serviceAccountName: {{ template "subscriber.fullname" . }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: ["server"]
          env:
            - name: BIGQUERY_WRITER_EMULATOR_HOST
              value: "{{.Values.env.bigqueryWriterEmulatorHost}}"
            - name: BIGQUERY_QUERIER_EMULATOR_HOST
              value: "{{.Values.env.bigqueryQuerierEmulatorHost}}"
            - name: BUCKETEER_SUBSCRIBER_PROJECT
              value: "{{ .Values.global.pubsub.project }}"
            - name: BUCKETEER_SUBSCRIBER_PROFILE
              value: "{{.Values.env.profile}}"
            - name: BUCKETEER_SUBSCRIBER_GCP_TRACE_ENABLED
              value: "{{.Values.env.gcpEnabled}}"
            - name: PUBSUB_EMULATOR_HOST
              value: "{{ .Values.global.pubsub.emulatorHost }}"
            - name: BUCKETEER_SUBSCRIBER_PUBSUB_TYPE
              value: "{{ .Values.global.pubsub.type }}"
            - name: BUCKETEER_SUBSCRIBER_PUBSUB_REDIS_SERVER_NAME
              value: "{{ .Values.global.pubsub.redis.serverName }}"
            - name: BUCKETEER_SUBSCRIBER_PUBSUB_REDIS_ADDR
              value: "{{ .Values.global.pubsub.redis.addr }}"
            - name: BUCKETEER_SUBSCRIBER_PUBSUB_REDIS_POOL_SIZE
              value: "{{ .Values.global.pubsub.redis.poolSize }}"
            - name: BUCKETEER_SUBSCRIBER_PUBSUB_REDIS_MIN_IDLE
              value: "{{ .Values.global.pubsub.redis.minIdle }}"
            - name: BUCKETEER_SUBSCRIBER_NOTIFICATION_SERVICE
              value: "{{ .Values.env.notificationService }}"
            - name: BUCKETEER_SUBSCRIBER_ENVIRONMENT_SERVICE
              value: "{{ .Values.env.environmentService }}"
            - name: BUCKETEER_SUBSCRIBER_PUSH_SERVICE
              value: "{{ .Values.env.pushService }}"
            - name: BUCKETEER_SUBSCRIBER_AUTO_OPS_SERVICE
              value: "{{ .Values.env.autoOpsService }}"
            - name: BUCKETEER_SUBSCRIBER_EXPERIMENT_SERVICE
              value: "{{ .Values.env.experimentService }}"
            - name: BUCKETEER_SUBSCRIBER_FEATURE_SERVICE
              value: "{{ .Values.env.featureService }}"
            - name: BUCKETEER_SUBSCRIBER_BATCH_SERVICE
              value: "{{ .Values.env.batchService }}"
            - name: BUCKETEER_SUBSCRIBER_EVENT_REFRESH_INTERVAL
              value: "{{ .Values.env.refreshInterval }}"
            - name: BUCKETEER_SUBSCRIBER_MYSQL_USER
              value: "{{ .Values.env.mysqlUser }}"
            - name: BUCKETEER_SUBSCRIBER_MYSQL_PASS
              value: "{{ .Values.env.mysqlPass }}"
            - name: BUCKETEER_SUBSCRIBER_MYSQL_HOST
              value: "{{ .Values.env.mysqlHost }}"
            - name: BUCKETEER_SUBSCRIBER_MYSQL_PORT
              value: "{{ .Values.env.mysqlPort }}"
            - name: BUCKETEER_SUBSCRIBER_MYSQL_DB_NAME
              value: "{{ .Values.env.mysqlDbName }}"
            - name: BUCKETEER_SUBSCRIBER_MYSQL_DB_OPEN_CONNS
              value: "{{ .Values.env.mysqlDbOpenConns }}"
            - name: BUCKETEER_SUBSCRIBER_WEB_URL
              value: "{{ .Values.env.webURL }}"
            - name: BUCKETEER_SUBSCRIBER_LOG_LEVEL
              value: "{{ .Values.env.logLevel }}"
            - name: BUCKETEER_SUBSCRIBER_ENABLE_PPROF
              value: "{{ .Values.env.enablePprof }}"
            - name: BUCKETEER_SUBSCRIBER_PPROF_ADDR
              value: "{{ .Values.env.pprofAddr }}"
            - name: BUCKETEER_SUBSCRIBER_REFRESH_INTERVAL
              value: "{{ .Values.env.refreshInterval }}"
            - name: BUCKETEER_SUBSCRIBER_PORT
              value: "{{ .Values.env.port }}"
            - name: BUCKETEER_SUBSCRIBER_METRICS_PORT
              value: "{{ .Values.env.metricsPort }}"
            - name: BUCKETEER_SUBSCRIBER_SERVICE_TOKEN
              value: /usr/local/service-token/token
            - name: BUCKETEER_SUBSCRIBER_CERT
              value: /usr/local/certs/service/tls.crt
            - name : BUCKETEER_SUBSCRIBER_SUBSCRIBER_CONFIG
              value: /usr/local/conf/subscribers.json
            - name: BUCKETEER_SUBSCRIBER_ON_DEMAND_SUBSCRIBER_CONFIG
              value: /usr/local/conf/onDemandSubscribers.json
            - name: BUCKETEER_SUBSCRIBER_PROCESSORS_CONFIG
              value: /usr/local/conf/processors.json
            - name: BUCKETEER_SUBSCRIBER_ON_DEMAND_PROCESSORS_CONFIG
              value: /usr/local/conf/onDemandProcessors.json
            - name: BUCKETEER_SUBSCRIBER_KEY
              value: /usr/local/certs/service/tls.key
            - name: BUCKETEER_SUBSCRIBER_OAUTH_PUBLIC_KEY
              value: /usr/local/oauth-key/public.pem
            - name: BUCKETEER_SUBSCRIBER_PERSISTENT_REDIS_SERVER_NAME
              value: "{{ .Values.env.persistentRedis.serverName }}"
            - name: BUCKETEER_SUBSCRIBER_PERSISTENT_REDIS_ADDR
              value: "{{ .Values.env.persistentRedis.addr }}"
            - name: BUCKETEER_SUBSCRIBER_PERSISTENT_REDIS_POOL_MAX_IDLE
              value: "{{ .Values.env.persistentRedis.poolMaxIdle }}"
            - name: BUCKETEER_SUBSCRIBER_PERSISTENT_REDIS_POOL_MAX_ACTIVE
              value: "{{ .Values.env.persistentRedis.poolMaxActive }}"
            - name: BUCKETEER_SUBSCRIBER_NON_PERSISTENT_REDIS_SERVER_NAME
              value: "{{ .Values.env.nonPersistentRedis.serverName }}"
            - name: BUCKETEER_SUBSCRIBER_NON_PERSISTENT_REDIS_ADDR
              value: "{{ .Values.env.nonPersistentRedis.addr }}"
            - name: BUCKETEER_SUBSCRIBER_NON_PERSISTENT_REDIS_POOL_MAX_IDLE
              value: "{{ .Values.env.nonPersistentRedis.poolMaxIdle }}"
            - name: BUCKETEER_SUBSCRIBER_NON_PERSISTENT_REDIS_POOL_MAX_ACTIVE
              value: "{{ .Values.env.nonPersistentRedis.poolMaxActive }}"

          volumeMounts:
            - name: service-cert-secret
              mountPath: /usr/local/certs/service
              readOnly: true
            - name: service-token-secret
              mountPath: /usr/local/service-token
              readOnly: true
            - name: subscriber-config
              mountPath: /usr/local/conf
              readOnly: true
          ports:
            - name: service
              containerPort: {{ .Values.env.port }}
            - name: metrics
              containerPort: {{ .Values.env.metricsPort }}
          startupProbe:
            periodSeconds: {{ .Values.health.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.startupProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.startupProbe.timeoutSeconds }}
            httpGet:
              path: /ready
              port: service
              scheme: HTTPS
          livenessProbe:
            initialDelaySeconds: {{ .Values.health.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.livenessProbe.timeoutSeconds }}
            httpGet:
              path: /health
              port: service
              scheme: HTTPS
          readinessProbe:
            initialDelaySeconds: {{ .Values.health.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.readinessProbe.timeoutSeconds }}
            httpGet:
              path: /ready
              port: service
              scheme: HTTPS
          resources:
{{ toYaml .Values.resources | indent 12 }}
        - name: envoy
          image: "{{ .Values.envoy.image.repository }}:{{ .Values.envoy.image.tag }}"
          imagePullPolicy: {{ .Values.envoy.image.pullPolicy }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    admin_port={{ .Values.envoy.adminPort }}
                    max_wait=45
                    sleep_interval=1

                    echo "[preStop] Starting graceful shutdown for Envoy (admin port: ${admin_port})"

                    # 1. Mark pod unready (stop new LB traffic)
                    echo "[preStop] Marking Envoy unhealthy..."
                    wget -q -O- --post-data='{}' "http://localhost:${admin_port}/healthcheck/fail" || echo "[preStop] Warning: failed to mark unhealthy"

                    # 2. Wait until all active inbound requests are finished
                    elapsed=0
                    while [ "$elapsed" -lt "$max_wait" ]; do
                      active_reqs=$(wget -q -O- "http://localhost:${admin_port}/stats" 2>/dev/null \
                        | grep "http.ingress_http.downstream_rq_active" | awk '{print $2}' || echo "0")
                      [ -z "$active_reqs" ] && active_reqs=0

                      if [ "$active_reqs" -eq 0 ]; then
                        echo "[preStop] All active requests drained after ${elapsed}s"
                        break
                      fi

                      echo "[preStop] Waiting for ${active_reqs} active requests..."
                      sleep "$sleep_interval"
                      elapsed=$((elapsed + sleep_interval))
                    done

                    if [ "$elapsed" -ge "$max_wait" ]; then
                      echo "[preStop] Timeout reached (${max_wait}s): ${active_reqs} active requests remain"
                    fi

                    echo "[preStop] Graceful shutdown complete."
                    exit 0
          command: ["envoy"]
          args:
            - "-c"
            - "/usr/local/conf/config.yaml"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: envoy-config
              mountPath: /usr/local/conf/
              readOnly: true
            - name: service-cert-secret
              mountPath: /usr/local/certs/service
              readOnly: true
          ports:
            - name: admin
              containerPort: {{ .Values.envoy.adminPort }}
          startupProbe:
            periodSeconds: {{ .Values.health.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.startupProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.startupProbe.timeoutSeconds }}
            httpGet:
              path: /ready
              port: admin
              scheme: HTTP
          livenessProbe:
            initialDelaySeconds: {{ .Values.health.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.livenessProbe.timeoutSeconds }}
            httpGet:
              path: /ready
              port: admin
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: {{ .Values.health.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.readinessProbe.timeoutSeconds }}
            httpGet:
              path: /ready
              port: admin
              scheme: HTTP
          resources:
{{ toYaml .Values.envoy.resources | indent 12 }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
{{- end }}
