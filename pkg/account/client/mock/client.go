// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"

	account "github.com/bucketeer-io/bucketeer/proto/account"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ChangeAPIKeyName mocks base method.
func (m *MockClient) ChangeAPIKeyName(ctx context.Context, in *account.ChangeAPIKeyNameRequest, opts ...grpc.CallOption) (*account.ChangeAPIKeyNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeAPIKeyName", varargs...)
	ret0, _ := ret[0].(*account.ChangeAPIKeyNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeAPIKeyName indicates an expected call of ChangeAPIKeyName.
func (mr *MockClientMockRecorder) ChangeAPIKeyName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAPIKeyName", reflect.TypeOf((*MockClient)(nil).ChangeAPIKeyName), varargs...)
}

// ChangeAccountRole mocks base method.
func (m *MockClient) ChangeAccountRole(ctx context.Context, in *account.ChangeAccountRoleRequest, opts ...grpc.CallOption) (*account.ChangeAccountRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeAccountRole", varargs...)
	ret0, _ := ret[0].(*account.ChangeAccountRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeAccountRole indicates an expected call of ChangeAccountRole.
func (mr *MockClientMockRecorder) ChangeAccountRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAccountRole", reflect.TypeOf((*MockClient)(nil).ChangeAccountRole), varargs...)
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ConvertAccount mocks base method.
func (m *MockClient) ConvertAccount(ctx context.Context, in *account.ConvertAccountRequest, opts ...grpc.CallOption) (*account.ConvertAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConvertAccount", varargs...)
	ret0, _ := ret[0].(*account.ConvertAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertAccount indicates an expected call of ConvertAccount.
func (mr *MockClientMockRecorder) ConvertAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertAccount", reflect.TypeOf((*MockClient)(nil).ConvertAccount), varargs...)
}

// CreateAPIKey mocks base method.
func (m *MockClient) CreateAPIKey(ctx context.Context, in *account.CreateAPIKeyRequest, opts ...grpc.CallOption) (*account.CreateAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAPIKey", varargs...)
	ret0, _ := ret[0].(*account.CreateAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockClientMockRecorder) CreateAPIKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockClient)(nil).CreateAPIKey), varargs...)
}

// CreateAccount mocks base method.
func (m *MockClient) CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.CreateAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*account.CreateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockClientMockRecorder) CreateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockClient)(nil).CreateAccount), varargs...)
}

// CreateAdminAccount mocks base method.
func (m *MockClient) CreateAdminAccount(ctx context.Context, in *account.CreateAdminAccountRequest, opts ...grpc.CallOption) (*account.CreateAdminAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAdminAccount", varargs...)
	ret0, _ := ret[0].(*account.CreateAdminAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminAccount indicates an expected call of CreateAdminAccount.
func (mr *MockClientMockRecorder) CreateAdminAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminAccount", reflect.TypeOf((*MockClient)(nil).CreateAdminAccount), varargs...)
}

// DisableAPIKey mocks base method.
func (m *MockClient) DisableAPIKey(ctx context.Context, in *account.DisableAPIKeyRequest, opts ...grpc.CallOption) (*account.DisableAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableAPIKey", varargs...)
	ret0, _ := ret[0].(*account.DisableAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAPIKey indicates an expected call of DisableAPIKey.
func (mr *MockClientMockRecorder) DisableAPIKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAPIKey", reflect.TypeOf((*MockClient)(nil).DisableAPIKey), varargs...)
}

// DisableAccount mocks base method.
func (m *MockClient) DisableAccount(ctx context.Context, in *account.DisableAccountRequest, opts ...grpc.CallOption) (*account.DisableAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableAccount", varargs...)
	ret0, _ := ret[0].(*account.DisableAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAccount indicates an expected call of DisableAccount.
func (mr *MockClientMockRecorder) DisableAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAccount", reflect.TypeOf((*MockClient)(nil).DisableAccount), varargs...)
}

// DisableAdminAccount mocks base method.
func (m *MockClient) DisableAdminAccount(ctx context.Context, in *account.DisableAdminAccountRequest, opts ...grpc.CallOption) (*account.DisableAdminAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableAdminAccount", varargs...)
	ret0, _ := ret[0].(*account.DisableAdminAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAdminAccount indicates an expected call of DisableAdminAccount.
func (mr *MockClientMockRecorder) DisableAdminAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAdminAccount", reflect.TypeOf((*MockClient)(nil).DisableAdminAccount), varargs...)
}

// EnableAPIKey mocks base method.
func (m *MockClient) EnableAPIKey(ctx context.Context, in *account.EnableAPIKeyRequest, opts ...grpc.CallOption) (*account.EnableAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableAPIKey", varargs...)
	ret0, _ := ret[0].(*account.EnableAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAPIKey indicates an expected call of EnableAPIKey.
func (mr *MockClientMockRecorder) EnableAPIKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAPIKey", reflect.TypeOf((*MockClient)(nil).EnableAPIKey), varargs...)
}

// EnableAccount mocks base method.
func (m *MockClient) EnableAccount(ctx context.Context, in *account.EnableAccountRequest, opts ...grpc.CallOption) (*account.EnableAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableAccount", varargs...)
	ret0, _ := ret[0].(*account.EnableAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAccount indicates an expected call of EnableAccount.
func (mr *MockClientMockRecorder) EnableAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAccount", reflect.TypeOf((*MockClient)(nil).EnableAccount), varargs...)
}

// EnableAdminAccount mocks base method.
func (m *MockClient) EnableAdminAccount(ctx context.Context, in *account.EnableAdminAccountRequest, opts ...grpc.CallOption) (*account.EnableAdminAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableAdminAccount", varargs...)
	ret0, _ := ret[0].(*account.EnableAdminAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAdminAccount indicates an expected call of EnableAdminAccount.
func (mr *MockClientMockRecorder) EnableAdminAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAdminAccount", reflect.TypeOf((*MockClient)(nil).EnableAdminAccount), varargs...)
}

// GetAPIKey mocks base method.
func (m *MockClient) GetAPIKey(ctx context.Context, in *account.GetAPIKeyRequest, opts ...grpc.CallOption) (*account.GetAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIKey", varargs...)
	ret0, _ := ret[0].(*account.GetAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockClientMockRecorder) GetAPIKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockClient)(nil).GetAPIKey), varargs...)
}

// GetAPIKeyBySearchingAllEnvironments mocks base method.
func (m *MockClient) GetAPIKeyBySearchingAllEnvironments(ctx context.Context, in *account.GetAPIKeyBySearchingAllEnvironmentsRequest, opts ...grpc.CallOption) (*account.GetAPIKeyBySearchingAllEnvironmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIKeyBySearchingAllEnvironments", varargs...)
	ret0, _ := ret[0].(*account.GetAPIKeyBySearchingAllEnvironmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKeyBySearchingAllEnvironments indicates an expected call of GetAPIKeyBySearchingAllEnvironments.
func (mr *MockClientMockRecorder) GetAPIKeyBySearchingAllEnvironments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKeyBySearchingAllEnvironments", reflect.TypeOf((*MockClient)(nil).GetAPIKeyBySearchingAllEnvironments), varargs...)
}

// GetAccount mocks base method.
func (m *MockClient) GetAccount(ctx context.Context, in *account.GetAccountRequest, opts ...grpc.CallOption) (*account.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*account.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockClientMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockClient)(nil).GetAccount), varargs...)
}

// GetAdminAccount mocks base method.
func (m *MockClient) GetAdminAccount(ctx context.Context, in *account.GetAdminAccountRequest, opts ...grpc.CallOption) (*account.GetAdminAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAdminAccount", varargs...)
	ret0, _ := ret[0].(*account.GetAdminAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminAccount indicates an expected call of GetAdminAccount.
func (mr *MockClientMockRecorder) GetAdminAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminAccount", reflect.TypeOf((*MockClient)(nil).GetAdminAccount), varargs...)
}

// GetMe mocks base method.
func (m *MockClient) GetMe(ctx context.Context, in *account.GetMeRequest, opts ...grpc.CallOption) (*account.GetMeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMe", varargs...)
	ret0, _ := ret[0].(*account.GetMeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockClientMockRecorder) GetMe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockClient)(nil).GetMe), varargs...)
}

// GetMeByEmail mocks base method.
func (m *MockClient) GetMeByEmail(ctx context.Context, in *account.GetMeByEmailRequest, opts ...grpc.CallOption) (*account.GetMeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeByEmail", varargs...)
	ret0, _ := ret[0].(*account.GetMeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeByEmail indicates an expected call of GetMeByEmail.
func (mr *MockClientMockRecorder) GetMeByEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeByEmail", reflect.TypeOf((*MockClient)(nil).GetMeByEmail), varargs...)
}

// GetMeByEmailV2 mocks base method.
func (m *MockClient) GetMeByEmailV2(ctx context.Context, in *account.GetMeByEmailV2Request, opts ...grpc.CallOption) (*account.GetMeV2Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeByEmailV2", varargs...)
	ret0, _ := ret[0].(*account.GetMeV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeByEmailV2 indicates an expected call of GetMeByEmailV2.
func (mr *MockClientMockRecorder) GetMeByEmailV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeByEmailV2", reflect.TypeOf((*MockClient)(nil).GetMeByEmailV2), varargs...)
}

// GetMeV2 mocks base method.
func (m *MockClient) GetMeV2(ctx context.Context, in *account.GetMeV2Request, opts ...grpc.CallOption) (*account.GetMeV2Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeV2", varargs...)
	ret0, _ := ret[0].(*account.GetMeV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeV2 indicates an expected call of GetMeV2.
func (mr *MockClientMockRecorder) GetMeV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeV2", reflect.TypeOf((*MockClient)(nil).GetMeV2), varargs...)
}

// ListAPIKeys mocks base method.
func (m *MockClient) ListAPIKeys(ctx context.Context, in *account.ListAPIKeysRequest, opts ...grpc.CallOption) (*account.ListAPIKeysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAPIKeys", varargs...)
	ret0, _ := ret[0].(*account.ListAPIKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeys indicates an expected call of ListAPIKeys.
func (mr *MockClientMockRecorder) ListAPIKeys(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeys", reflect.TypeOf((*MockClient)(nil).ListAPIKeys), varargs...)
}

// ListAccounts mocks base method.
func (m *MockClient) ListAccounts(ctx context.Context, in *account.ListAccountsRequest, opts ...grpc.CallOption) (*account.ListAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccounts", varargs...)
	ret0, _ := ret[0].(*account.ListAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockClientMockRecorder) ListAccounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockClient)(nil).ListAccounts), varargs...)
}

// ListAdminAccounts mocks base method.
func (m *MockClient) ListAdminAccounts(ctx context.Context, in *account.ListAdminAccountsRequest, opts ...grpc.CallOption) (*account.ListAdminAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAdminAccounts", varargs...)
	ret0, _ := ret[0].(*account.ListAdminAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdminAccounts indicates an expected call of ListAdminAccounts.
func (mr *MockClientMockRecorder) ListAdminAccounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdminAccounts", reflect.TypeOf((*MockClient)(nil).ListAdminAccounts), varargs...)
}
