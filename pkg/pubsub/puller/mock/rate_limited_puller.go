// Code generated by MockGen. DO NOT EDIT.
// Source: rate_limited_puller.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	puller "github.com/bucketeer-io/bucketeer/pkg/pubsub/puller"
)

// MockRateLimitedPuller is a mock of RateLimitedPuller interface.
type MockRateLimitedPuller struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitedPullerMockRecorder
}

// MockRateLimitedPullerMockRecorder is the mock recorder for MockRateLimitedPuller.
type MockRateLimitedPullerMockRecorder struct {
	mock *MockRateLimitedPuller
}

// NewMockRateLimitedPuller creates a new mock instance.
func NewMockRateLimitedPuller(ctrl *gomock.Controller) *MockRateLimitedPuller {
	mock := &MockRateLimitedPuller{ctrl: ctrl}
	mock.recorder = &MockRateLimitedPullerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitedPuller) EXPECT() *MockRateLimitedPullerMockRecorder {
	return m.recorder
}

// MessageCh mocks base method.
func (m *MockRateLimitedPuller) MessageCh() <-chan *puller.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageCh")
	ret0, _ := ret[0].(<-chan *puller.Message)
	return ret0
}

// MessageCh indicates an expected call of MessageCh.
func (mr *MockRateLimitedPullerMockRecorder) MessageCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageCh", reflect.TypeOf((*MockRateLimitedPuller)(nil).MessageCh))
}

// Run mocks base method.
func (m *MockRateLimitedPuller) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRateLimitedPullerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRateLimitedPuller)(nil).Run), arg0)
}
