// Copyright 2023 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: proto/eventcounter/service.proto

package eventcounter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetEvaluationTimeseriesCountRequest_TimeRange int32

const (
	GetEvaluationTimeseriesCountRequest_UNKNOWN           GetEvaluationTimeseriesCountRequest_TimeRange = 0
	GetEvaluationTimeseriesCountRequest_TWENTY_FOUR_HOURS GetEvaluationTimeseriesCountRequest_TimeRange = 1
	GetEvaluationTimeseriesCountRequest_SEVEN_DAYS        GetEvaluationTimeseriesCountRequest_TimeRange = 2
	GetEvaluationTimeseriesCountRequest_FOURTEEN_DAYS     GetEvaluationTimeseriesCountRequest_TimeRange = 3
	GetEvaluationTimeseriesCountRequest_THIRTY_DAYS       GetEvaluationTimeseriesCountRequest_TimeRange = 4
)

// Enum value maps for GetEvaluationTimeseriesCountRequest_TimeRange.
var (
	GetEvaluationTimeseriesCountRequest_TimeRange_name = map[int32]string{
		0: "UNKNOWN",
		1: "TWENTY_FOUR_HOURS",
		2: "SEVEN_DAYS",
		3: "FOURTEEN_DAYS",
		4: "THIRTY_DAYS",
	}
	GetEvaluationTimeseriesCountRequest_TimeRange_value = map[string]int32{
		"UNKNOWN":           0,
		"TWENTY_FOUR_HOURS": 1,
		"SEVEN_DAYS":        2,
		"FOURTEEN_DAYS":     3,
		"THIRTY_DAYS":       4,
	}
)

func (x GetEvaluationTimeseriesCountRequest_TimeRange) Enum() *GetEvaluationTimeseriesCountRequest_TimeRange {
	p := new(GetEvaluationTimeseriesCountRequest_TimeRange)
	*p = x
	return p
}

func (x GetEvaluationTimeseriesCountRequest_TimeRange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetEvaluationTimeseriesCountRequest_TimeRange) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_eventcounter_service_proto_enumTypes[0].Descriptor()
}

func (GetEvaluationTimeseriesCountRequest_TimeRange) Type() protoreflect.EnumType {
	return &file_proto_eventcounter_service_proto_enumTypes[0]
}

func (x GetEvaluationTimeseriesCountRequest_TimeRange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetEvaluationTimeseriesCountRequest_TimeRange.Descriptor instead.
func (GetEvaluationTimeseriesCountRequest_TimeRange) EnumDescriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{2, 0}
}

type GetExperimentEvaluationCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentNamespace string   `protobuf:"bytes,1,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	StartAt              int64    `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt                int64    `protobuf:"varint,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	FeatureId            string   `protobuf:"bytes,4,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	FeatureVersion       int32    `protobuf:"varint,5,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	VariationIds         []string `protobuf:"bytes,6,rep,name=variation_ids,json=variationIds,proto3" json:"variation_ids,omitempty"`
}

func (x *GetExperimentEvaluationCountRequest) Reset() {
	*x = GetExperimentEvaluationCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentEvaluationCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentEvaluationCountRequest) ProtoMessage() {}

func (x *GetExperimentEvaluationCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentEvaluationCountRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentEvaluationCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetExperimentEvaluationCountRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *GetExperimentEvaluationCountRequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *GetExperimentEvaluationCountRequest) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *GetExperimentEvaluationCountRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetExperimentEvaluationCountRequest) GetFeatureVersion() int32 {
	if x != nil {
		return x.FeatureVersion
	}
	return 0
}

func (x *GetExperimentEvaluationCountRequest) GetVariationIds() []string {
	if x != nil {
		return x.VariationIds
	}
	return nil
}

type GetExperimentEvaluationCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId       string            `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	FeatureVersion  int32             `protobuf:"varint,2,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	VariationCounts []*VariationCount `protobuf:"bytes,3,rep,name=variation_counts,json=variationCounts,proto3" json:"variation_counts,omitempty"`
}

func (x *GetExperimentEvaluationCountResponse) Reset() {
	*x = GetExperimentEvaluationCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentEvaluationCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentEvaluationCountResponse) ProtoMessage() {}

func (x *GetExperimentEvaluationCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentEvaluationCountResponse.ProtoReflect.Descriptor instead.
func (*GetExperimentEvaluationCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetExperimentEvaluationCountResponse) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetExperimentEvaluationCountResponse) GetFeatureVersion() int32 {
	if x != nil {
		return x.FeatureVersion
	}
	return 0
}

func (x *GetExperimentEvaluationCountResponse) GetVariationCounts() []*VariationCount {
	if x != nil {
		return x.VariationCounts
	}
	return nil
}

type GetEvaluationTimeseriesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentNamespace string                                        `protobuf:"bytes,1,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	FeatureId            string                                        `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	TimeRange            GetEvaluationTimeseriesCountRequest_TimeRange `protobuf:"varint,3,opt,name=time_range,json=timeRange,proto3,enum=bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest_TimeRange" json:"time_range,omitempty"`
}

func (x *GetEvaluationTimeseriesCountRequest) Reset() {
	*x = GetEvaluationTimeseriesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationTimeseriesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationTimeseriesCountRequest) ProtoMessage() {}

func (x *GetEvaluationTimeseriesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationTimeseriesCountRequest.ProtoReflect.Descriptor instead.
func (*GetEvaluationTimeseriesCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetEvaluationTimeseriesCountRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *GetEvaluationTimeseriesCountRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetEvaluationTimeseriesCountRequest) GetTimeRange() GetEvaluationTimeseriesCountRequest_TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return GetEvaluationTimeseriesCountRequest_UNKNOWN
}

type GetEvaluationTimeseriesCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCounts  []*VariationTimeseries `protobuf:"bytes,1,rep,name=user_counts,json=userCounts,proto3" json:"user_counts,omitempty"`
	EventCounts []*VariationTimeseries `protobuf:"bytes,2,rep,name=event_counts,json=eventCounts,proto3" json:"event_counts,omitempty"`
}

func (x *GetEvaluationTimeseriesCountResponse) Reset() {
	*x = GetEvaluationTimeseriesCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationTimeseriesCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationTimeseriesCountResponse) ProtoMessage() {}

func (x *GetEvaluationTimeseriesCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationTimeseriesCountResponse.ProtoReflect.Descriptor instead.
func (*GetEvaluationTimeseriesCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetEvaluationTimeseriesCountResponse) GetUserCounts() []*VariationTimeseries {
	if x != nil {
		return x.UserCounts
	}
	return nil
}

func (x *GetEvaluationTimeseriesCountResponse) GetEventCounts() []*VariationTimeseries {
	if x != nil {
		return x.EventCounts
	}
	return nil
}

type GetExperimentResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentNamespace string `protobuf:"bytes,1,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	ExperimentId         string `protobuf:"bytes,2,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (x *GetExperimentResultRequest) Reset() {
	*x = GetExperimentResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentResultRequest) ProtoMessage() {}

func (x *GetExperimentResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentResultRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentResultRequest) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetExperimentResultRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *GetExperimentResultRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

type GetExperimentResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentResult *ExperimentResult `protobuf:"bytes,1,opt,name=experiment_result,json=experimentResult,proto3" json:"experiment_result,omitempty"`
}

func (x *GetExperimentResultResponse) Reset() {
	*x = GetExperimentResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentResultResponse) ProtoMessage() {}

func (x *GetExperimentResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentResultResponse.ProtoReflect.Descriptor instead.
func (*GetExperimentResultResponse) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetExperimentResultResponse) GetExperimentResult() *ExperimentResult {
	if x != nil {
		return x.ExperimentResult
	}
	return nil
}

type ListExperimentResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId            string                 `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	FeatureVersion       *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	EnvironmentNamespace string                 `protobuf:"bytes,3,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
}

func (x *ListExperimentResultsRequest) Reset() {
	*x = ListExperimentResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExperimentResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExperimentResultsRequest) ProtoMessage() {}

func (x *ListExperimentResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExperimentResultsRequest.ProtoReflect.Descriptor instead.
func (*ListExperimentResultsRequest) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListExperimentResultsRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *ListExperimentResultsRequest) GetFeatureVersion() *wrapperspb.Int32Value {
	if x != nil {
		return x.FeatureVersion
	}
	return nil
}

func (x *ListExperimentResultsRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

type ListExperimentResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]*ExperimentResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListExperimentResultsResponse) Reset() {
	*x = ListExperimentResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExperimentResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExperimentResultsResponse) ProtoMessage() {}

func (x *ListExperimentResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExperimentResultsResponse.ProtoReflect.Descriptor instead.
func (*ListExperimentResultsResponse) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListExperimentResultsResponse) GetResults() map[string]*ExperimentResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetExperimentGoalCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentNamespace string   `protobuf:"bytes,1,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	StartAt              int64    `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt                int64    `protobuf:"varint,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	GoalId               string   `protobuf:"bytes,4,opt,name=goal_id,json=goalId,proto3" json:"goal_id,omitempty"`
	FeatureId            string   `protobuf:"bytes,5,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	FeatureVersion       int32    `protobuf:"varint,6,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	VariationIds         []string `protobuf:"bytes,7,rep,name=variation_ids,json=variationIds,proto3" json:"variation_ids,omitempty"`
}

func (x *GetExperimentGoalCountRequest) Reset() {
	*x = GetExperimentGoalCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentGoalCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentGoalCountRequest) ProtoMessage() {}

func (x *GetExperimentGoalCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentGoalCountRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentGoalCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetExperimentGoalCountRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *GetExperimentGoalCountRequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *GetExperimentGoalCountRequest) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *GetExperimentGoalCountRequest) GetGoalId() string {
	if x != nil {
		return x.GoalId
	}
	return ""
}

func (x *GetExperimentGoalCountRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetExperimentGoalCountRequest) GetFeatureVersion() int32 {
	if x != nil {
		return x.FeatureVersion
	}
	return 0
}

func (x *GetExperimentGoalCountRequest) GetVariationIds() []string {
	if x != nil {
		return x.VariationIds
	}
	return nil
}

type GetExperimentGoalCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalId          string            `protobuf:"bytes,1,opt,name=goal_id,json=goalId,proto3" json:"goal_id,omitempty"`
	VariationCounts []*VariationCount `protobuf:"bytes,2,rep,name=variation_counts,json=variationCounts,proto3" json:"variation_counts,omitempty"`
}

func (x *GetExperimentGoalCountResponse) Reset() {
	*x = GetExperimentGoalCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentGoalCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentGoalCountResponse) ProtoMessage() {}

func (x *GetExperimentGoalCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentGoalCountResponse.ProtoReflect.Descriptor instead.
func (*GetExperimentGoalCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetExperimentGoalCountResponse) GetGoalId() string {
	if x != nil {
		return x.GoalId
	}
	return ""
}

func (x *GetExperimentGoalCountResponse) GetVariationCounts() []*VariationCount {
	if x != nil {
		return x.VariationCounts
	}
	return nil
}

type GetOpsEvaluationUserCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentNamespace string `protobuf:"bytes,1,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	OpsRuleId            string `protobuf:"bytes,2,opt,name=ops_rule_id,json=opsRuleId,proto3" json:"ops_rule_id,omitempty"`
	ClauseId             string `protobuf:"bytes,3,opt,name=clause_id,json=clauseId,proto3" json:"clause_id,omitempty"`
	FeatureId            string `protobuf:"bytes,4,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	FeatureVersion       int32  `protobuf:"varint,5,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	VariationId          string `protobuf:"bytes,6,opt,name=variation_id,json=variationId,proto3" json:"variation_id,omitempty"`
}

func (x *GetOpsEvaluationUserCountRequest) Reset() {
	*x = GetOpsEvaluationUserCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpsEvaluationUserCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpsEvaluationUserCountRequest) ProtoMessage() {}

func (x *GetOpsEvaluationUserCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpsEvaluationUserCountRequest.ProtoReflect.Descriptor instead.
func (*GetOpsEvaluationUserCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetOpsEvaluationUserCountRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *GetOpsEvaluationUserCountRequest) GetOpsRuleId() string {
	if x != nil {
		return x.OpsRuleId
	}
	return ""
}

func (x *GetOpsEvaluationUserCountRequest) GetClauseId() string {
	if x != nil {
		return x.ClauseId
	}
	return ""
}

func (x *GetOpsEvaluationUserCountRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetOpsEvaluationUserCountRequest) GetFeatureVersion() int32 {
	if x != nil {
		return x.FeatureVersion
	}
	return 0
}

func (x *GetOpsEvaluationUserCountRequest) GetVariationId() string {
	if x != nil {
		return x.VariationId
	}
	return ""
}

type GetOpsEvaluationUserCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpsRuleId string `protobuf:"bytes,1,opt,name=ops_rule_id,json=opsRuleId,proto3" json:"ops_rule_id,omitempty"`
	ClauseId  string `protobuf:"bytes,2,opt,name=clause_id,json=clauseId,proto3" json:"clause_id,omitempty"`
	Count     int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetOpsEvaluationUserCountResponse) Reset() {
	*x = GetOpsEvaluationUserCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpsEvaluationUserCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpsEvaluationUserCountResponse) ProtoMessage() {}

func (x *GetOpsEvaluationUserCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpsEvaluationUserCountResponse.ProtoReflect.Descriptor instead.
func (*GetOpsEvaluationUserCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetOpsEvaluationUserCountResponse) GetOpsRuleId() string {
	if x != nil {
		return x.OpsRuleId
	}
	return ""
}

func (x *GetOpsEvaluationUserCountResponse) GetClauseId() string {
	if x != nil {
		return x.ClauseId
	}
	return ""
}

func (x *GetOpsEvaluationUserCountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetOpsGoalUserCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentNamespace string `protobuf:"bytes,1,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	OpsRuleId            string `protobuf:"bytes,2,opt,name=ops_rule_id,json=opsRuleId,proto3" json:"ops_rule_id,omitempty"`
	ClauseId             string `protobuf:"bytes,3,opt,name=clause_id,json=clauseId,proto3" json:"clause_id,omitempty"`
	FeatureId            string `protobuf:"bytes,4,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	FeatureVersion       int32  `protobuf:"varint,5,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	VariationId          string `protobuf:"bytes,6,opt,name=variation_id,json=variationId,proto3" json:"variation_id,omitempty"`
}

func (x *GetOpsGoalUserCountRequest) Reset() {
	*x = GetOpsGoalUserCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpsGoalUserCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpsGoalUserCountRequest) ProtoMessage() {}

func (x *GetOpsGoalUserCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpsGoalUserCountRequest.ProtoReflect.Descriptor instead.
func (*GetOpsGoalUserCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetOpsGoalUserCountRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *GetOpsGoalUserCountRequest) GetOpsRuleId() string {
	if x != nil {
		return x.OpsRuleId
	}
	return ""
}

func (x *GetOpsGoalUserCountRequest) GetClauseId() string {
	if x != nil {
		return x.ClauseId
	}
	return ""
}

func (x *GetOpsGoalUserCountRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetOpsGoalUserCountRequest) GetFeatureVersion() int32 {
	if x != nil {
		return x.FeatureVersion
	}
	return 0
}

func (x *GetOpsGoalUserCountRequest) GetVariationId() string {
	if x != nil {
		return x.VariationId
	}
	return ""
}

type GetOpsGoalUserCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpsRuleId string `protobuf:"bytes,1,opt,name=ops_rule_id,json=opsRuleId,proto3" json:"ops_rule_id,omitempty"`
	ClauseId  string `protobuf:"bytes,2,opt,name=clause_id,json=clauseId,proto3" json:"clause_id,omitempty"`
	Count     int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetOpsGoalUserCountResponse) Reset() {
	*x = GetOpsGoalUserCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpsGoalUserCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpsGoalUserCountResponse) ProtoMessage() {}

func (x *GetOpsGoalUserCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpsGoalUserCountResponse.ProtoReflect.Descriptor instead.
func (*GetOpsGoalUserCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetOpsGoalUserCountResponse) GetOpsRuleId() string {
	if x != nil {
		return x.OpsRuleId
	}
	return ""
}

func (x *GetOpsGoalUserCountResponse) GetClauseId() string {
	if x != nil {
		return x.ClauseId
	}
	return ""
}

func (x *GetOpsGoalUserCountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetMAUCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentNamespace string `protobuf:"bytes,1,opt,name=environment_namespace,json=environmentNamespace,proto3" json:"environment_namespace,omitempty"`
	YearMonth            string `protobuf:"bytes,2,opt,name=year_month,json=yearMonth,proto3" json:"year_month,omitempty"`
}

func (x *GetMAUCountRequest) Reset() {
	*x = GetMAUCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMAUCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMAUCountRequest) ProtoMessage() {}

func (x *GetMAUCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMAUCountRequest.ProtoReflect.Descriptor instead.
func (*GetMAUCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetMAUCountRequest) GetEnvironmentNamespace() string {
	if x != nil {
		return x.EnvironmentNamespace
	}
	return ""
}

func (x *GetMAUCountRequest) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

type GetMAUCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCount int64 `protobuf:"varint,1,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
	UserCount  int64 `protobuf:"varint,2,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
}

func (x *GetMAUCountResponse) Reset() {
	*x = GetMAUCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMAUCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMAUCountResponse) ProtoMessage() {}

func (x *GetMAUCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMAUCountResponse.ProtoReflect.Descriptor instead.
func (*GetMAUCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetMAUCountResponse) GetEventCount() int64 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

func (x *GetMAUCountResponse) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

type SummarizeMAUCountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YearMonth  string `protobuf:"bytes,1,opt,name=year_month,json=yearMonth,proto3" json:"year_month,omitempty"`
	IsFinished bool   `protobuf:"varint,2,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
}

func (x *SummarizeMAUCountsRequest) Reset() {
	*x = SummarizeMAUCountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummarizeMAUCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizeMAUCountsRequest) ProtoMessage() {}

func (x *SummarizeMAUCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizeMAUCountsRequest.ProtoReflect.Descriptor instead.
func (*SummarizeMAUCountsRequest) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{16}
}

func (x *SummarizeMAUCountsRequest) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

func (x *SummarizeMAUCountsRequest) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

type SummarizeMAUCountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SummarizeMAUCountsResponse) Reset() {
	*x = SummarizeMAUCountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_eventcounter_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummarizeMAUCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizeMAUCountsResponse) ProtoMessage() {}

func (x *SummarizeMAUCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_eventcounter_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizeMAUCountsResponse.ProtoReflect.Descriptor instead.
func (*SummarizeMAUCountsResponse) Descriptor() ([]byte, []int) {
	return file_proto_eventcounter_service_proto_rawDescGZIP(), []int{17}
}

var File_proto_eventcounter_service_proto protoreflect.FileDescriptor

var file_proto_eventcounter_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x22, 0xc1, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x64, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x63, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x57, 0x45, 0x4e, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x55, 0x52,
	0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x56, 0x45,
	0x4e, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4f, 0x55, 0x52,
	0x54, 0x45, 0x45, 0x4e, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x48, 0x49, 0x52, 0x54, 0x59, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x04, 0x22, 0xc4, 0x01, 0x0a,
	0x24, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0x76, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xe3, 0x01, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x64, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8c, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6f,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6f, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x22, 0xff, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x73, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x70,
	0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x70, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x76, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x73, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x70, 0x73, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x73, 0x47, 0x6f, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x6f, 0x70, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x73,
	0x47, 0x6f, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x70, 0x73, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d,
	0x41, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x22, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x41, 0x55, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x19, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x4d, 0x41, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x65, 0x61, 0x72,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x7a, 0x65, 0x4d, 0x41, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xea, 0x09, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x32, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65,
	0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x35, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x41, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x41, 0x55, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x41, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x12, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x4d, 0x41, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x31, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x7a, 0x65, 0x4d, 0x41, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x4d, 0x41, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x73, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x73, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x73, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x73, 0x47, 0x6f, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65,
	0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x73, 0x47, 0x6f, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x73, 0x47, 0x6f, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_eventcounter_service_proto_rawDescOnce sync.Once
	file_proto_eventcounter_service_proto_rawDescData = file_proto_eventcounter_service_proto_rawDesc
)

func file_proto_eventcounter_service_proto_rawDescGZIP() []byte {
	file_proto_eventcounter_service_proto_rawDescOnce.Do(func() {
		file_proto_eventcounter_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_eventcounter_service_proto_rawDescData)
	})
	return file_proto_eventcounter_service_proto_rawDescData
}

var file_proto_eventcounter_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_eventcounter_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_proto_eventcounter_service_proto_goTypes = []interface{}{
	(GetEvaluationTimeseriesCountRequest_TimeRange)(0), // 0: bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.TimeRange
	(*GetExperimentEvaluationCountRequest)(nil),        // 1: bucketeer.eventcounter.GetExperimentEvaluationCountRequest
	(*GetExperimentEvaluationCountResponse)(nil),       // 2: bucketeer.eventcounter.GetExperimentEvaluationCountResponse
	(*GetEvaluationTimeseriesCountRequest)(nil),        // 3: bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest
	(*GetEvaluationTimeseriesCountResponse)(nil),       // 4: bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse
	(*GetExperimentResultRequest)(nil),                 // 5: bucketeer.eventcounter.GetExperimentResultRequest
	(*GetExperimentResultResponse)(nil),                // 6: bucketeer.eventcounter.GetExperimentResultResponse
	(*ListExperimentResultsRequest)(nil),               // 7: bucketeer.eventcounter.ListExperimentResultsRequest
	(*ListExperimentResultsResponse)(nil),              // 8: bucketeer.eventcounter.ListExperimentResultsResponse
	(*GetExperimentGoalCountRequest)(nil),              // 9: bucketeer.eventcounter.GetExperimentGoalCountRequest
	(*GetExperimentGoalCountResponse)(nil),             // 10: bucketeer.eventcounter.GetExperimentGoalCountResponse
	(*GetOpsEvaluationUserCountRequest)(nil),           // 11: bucketeer.eventcounter.GetOpsEvaluationUserCountRequest
	(*GetOpsEvaluationUserCountResponse)(nil),          // 12: bucketeer.eventcounter.GetOpsEvaluationUserCountResponse
	(*GetOpsGoalUserCountRequest)(nil),                 // 13: bucketeer.eventcounter.GetOpsGoalUserCountRequest
	(*GetOpsGoalUserCountResponse)(nil),                // 14: bucketeer.eventcounter.GetOpsGoalUserCountResponse
	(*GetMAUCountRequest)(nil),                         // 15: bucketeer.eventcounter.GetMAUCountRequest
	(*GetMAUCountResponse)(nil),                        // 16: bucketeer.eventcounter.GetMAUCountResponse
	(*SummarizeMAUCountsRequest)(nil),                  // 17: bucketeer.eventcounter.SummarizeMAUCountsRequest
	(*SummarizeMAUCountsResponse)(nil),                 // 18: bucketeer.eventcounter.SummarizeMAUCountsResponse
	nil,                                                // 19: bucketeer.eventcounter.ListExperimentResultsResponse.ResultsEntry
	(*VariationCount)(nil),                             // 20: bucketeer.eventcounter.VariationCount
	(*VariationTimeseries)(nil),                        // 21: bucketeer.eventcounter.VariationTimeseries
	(*ExperimentResult)(nil),                           // 22: bucketeer.eventcounter.ExperimentResult
	(*wrapperspb.Int32Value)(nil),                      // 23: google.protobuf.Int32Value
}
var file_proto_eventcounter_service_proto_depIdxs = []int32{
	20, // 0: bucketeer.eventcounter.GetExperimentEvaluationCountResponse.variation_counts:type_name -> bucketeer.eventcounter.VariationCount
	0,  // 1: bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.time_range:type_name -> bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest.TimeRange
	21, // 2: bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.user_counts:type_name -> bucketeer.eventcounter.VariationTimeseries
	21, // 3: bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse.event_counts:type_name -> bucketeer.eventcounter.VariationTimeseries
	22, // 4: bucketeer.eventcounter.GetExperimentResultResponse.experiment_result:type_name -> bucketeer.eventcounter.ExperimentResult
	23, // 5: bucketeer.eventcounter.ListExperimentResultsRequest.feature_version:type_name -> google.protobuf.Int32Value
	19, // 6: bucketeer.eventcounter.ListExperimentResultsResponse.results:type_name -> bucketeer.eventcounter.ListExperimentResultsResponse.ResultsEntry
	20, // 7: bucketeer.eventcounter.GetExperimentGoalCountResponse.variation_counts:type_name -> bucketeer.eventcounter.VariationCount
	22, // 8: bucketeer.eventcounter.ListExperimentResultsResponse.ResultsEntry.value:type_name -> bucketeer.eventcounter.ExperimentResult
	1,  // 9: bucketeer.eventcounter.EventCounterService.GetExperimentEvaluationCount:input_type -> bucketeer.eventcounter.GetExperimentEvaluationCountRequest
	3,  // 10: bucketeer.eventcounter.EventCounterService.GetEvaluationTimeseriesCount:input_type -> bucketeer.eventcounter.GetEvaluationTimeseriesCountRequest
	5,  // 11: bucketeer.eventcounter.EventCounterService.GetExperimentResult:input_type -> bucketeer.eventcounter.GetExperimentResultRequest
	7,  // 12: bucketeer.eventcounter.EventCounterService.ListExperimentResults:input_type -> bucketeer.eventcounter.ListExperimentResultsRequest
	9,  // 13: bucketeer.eventcounter.EventCounterService.GetExperimentGoalCount:input_type -> bucketeer.eventcounter.GetExperimentGoalCountRequest
	15, // 14: bucketeer.eventcounter.EventCounterService.GetMAUCount:input_type -> bucketeer.eventcounter.GetMAUCountRequest
	17, // 15: bucketeer.eventcounter.EventCounterService.SummarizeMAUCounts:input_type -> bucketeer.eventcounter.SummarizeMAUCountsRequest
	11, // 16: bucketeer.eventcounter.EventCounterService.GetOpsEvaluationUserCount:input_type -> bucketeer.eventcounter.GetOpsEvaluationUserCountRequest
	13, // 17: bucketeer.eventcounter.EventCounterService.GetOpsGoalUserCount:input_type -> bucketeer.eventcounter.GetOpsGoalUserCountRequest
	2,  // 18: bucketeer.eventcounter.EventCounterService.GetExperimentEvaluationCount:output_type -> bucketeer.eventcounter.GetExperimentEvaluationCountResponse
	4,  // 19: bucketeer.eventcounter.EventCounterService.GetEvaluationTimeseriesCount:output_type -> bucketeer.eventcounter.GetEvaluationTimeseriesCountResponse
	6,  // 20: bucketeer.eventcounter.EventCounterService.GetExperimentResult:output_type -> bucketeer.eventcounter.GetExperimentResultResponse
	8,  // 21: bucketeer.eventcounter.EventCounterService.ListExperimentResults:output_type -> bucketeer.eventcounter.ListExperimentResultsResponse
	10, // 22: bucketeer.eventcounter.EventCounterService.GetExperimentGoalCount:output_type -> bucketeer.eventcounter.GetExperimentGoalCountResponse
	16, // 23: bucketeer.eventcounter.EventCounterService.GetMAUCount:output_type -> bucketeer.eventcounter.GetMAUCountResponse
	18, // 24: bucketeer.eventcounter.EventCounterService.SummarizeMAUCounts:output_type -> bucketeer.eventcounter.SummarizeMAUCountsResponse
	12, // 25: bucketeer.eventcounter.EventCounterService.GetOpsEvaluationUserCount:output_type -> bucketeer.eventcounter.GetOpsEvaluationUserCountResponse
	14, // 26: bucketeer.eventcounter.EventCounterService.GetOpsGoalUserCount:output_type -> bucketeer.eventcounter.GetOpsGoalUserCountResponse
	18, // [18:27] is the sub-list for method output_type
	9,  // [9:18] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_eventcounter_service_proto_init() }
func file_proto_eventcounter_service_proto_init() {
	if File_proto_eventcounter_service_proto != nil {
		return
	}
	file_proto_eventcounter_experiment_result_proto_init()
	file_proto_eventcounter_timeseries_proto_init()
	file_proto_eventcounter_variation_count_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_eventcounter_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentEvaluationCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentEvaluationCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvaluationTimeseriesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvaluationTimeseriesCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExperimentResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExperimentResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentGoalCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentGoalCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpsEvaluationUserCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpsEvaluationUserCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpsGoalUserCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpsGoalUserCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMAUCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMAUCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummarizeMAUCountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_eventcounter_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummarizeMAUCountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_eventcounter_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_eventcounter_service_proto_goTypes,
		DependencyIndexes: file_proto_eventcounter_service_proto_depIdxs,
		EnumInfos:         file_proto_eventcounter_service_proto_enumTypes,
		MessageInfos:      file_proto_eventcounter_service_proto_msgTypes,
	}.Build()
	File_proto_eventcounter_service_proto = out.File
	file_proto_eventcounter_service_proto_rawDesc = nil
	file_proto_eventcounter_service_proto_goTypes = nil
	file_proto_eventcounter_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventCounterServiceClient is the client API for EventCounterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventCounterServiceClient interface {
	GetExperimentEvaluationCount(ctx context.Context, in *GetExperimentEvaluationCountRequest, opts ...grpc.CallOption) (*GetExperimentEvaluationCountResponse, error)
	GetEvaluationTimeseriesCount(ctx context.Context, in *GetEvaluationTimeseriesCountRequest, opts ...grpc.CallOption) (*GetEvaluationTimeseriesCountResponse, error)
	GetExperimentResult(ctx context.Context, in *GetExperimentResultRequest, opts ...grpc.CallOption) (*GetExperimentResultResponse, error)
	ListExperimentResults(ctx context.Context, in *ListExperimentResultsRequest, opts ...grpc.CallOption) (*ListExperimentResultsResponse, error)
	GetExperimentGoalCount(ctx context.Context, in *GetExperimentGoalCountRequest, opts ...grpc.CallOption) (*GetExperimentGoalCountResponse, error)
	GetMAUCount(ctx context.Context, in *GetMAUCountRequest, opts ...grpc.CallOption) (*GetMAUCountResponse, error)
	SummarizeMAUCounts(ctx context.Context, in *SummarizeMAUCountsRequest, opts ...grpc.CallOption) (*SummarizeMAUCountsResponse, error)
	GetOpsEvaluationUserCount(ctx context.Context, in *GetOpsEvaluationUserCountRequest, opts ...grpc.CallOption) (*GetOpsEvaluationUserCountResponse, error)
	GetOpsGoalUserCount(ctx context.Context, in *GetOpsGoalUserCountRequest, opts ...grpc.CallOption) (*GetOpsGoalUserCountResponse, error)
}

type eventCounterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventCounterServiceClient(cc grpc.ClientConnInterface) EventCounterServiceClient {
	return &eventCounterServiceClient{cc}
}

func (c *eventCounterServiceClient) GetExperimentEvaluationCount(ctx context.Context, in *GetExperimentEvaluationCountRequest, opts ...grpc.CallOption) (*GetExperimentEvaluationCountResponse, error) {
	out := new(GetExperimentEvaluationCountResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.eventcounter.EventCounterService/GetExperimentEvaluationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCounterServiceClient) GetEvaluationTimeseriesCount(ctx context.Context, in *GetEvaluationTimeseriesCountRequest, opts ...grpc.CallOption) (*GetEvaluationTimeseriesCountResponse, error) {
	out := new(GetEvaluationTimeseriesCountResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.eventcounter.EventCounterService/GetEvaluationTimeseriesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCounterServiceClient) GetExperimentResult(ctx context.Context, in *GetExperimentResultRequest, opts ...grpc.CallOption) (*GetExperimentResultResponse, error) {
	out := new(GetExperimentResultResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.eventcounter.EventCounterService/GetExperimentResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCounterServiceClient) ListExperimentResults(ctx context.Context, in *ListExperimentResultsRequest, opts ...grpc.CallOption) (*ListExperimentResultsResponse, error) {
	out := new(ListExperimentResultsResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.eventcounter.EventCounterService/ListExperimentResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCounterServiceClient) GetExperimentGoalCount(ctx context.Context, in *GetExperimentGoalCountRequest, opts ...grpc.CallOption) (*GetExperimentGoalCountResponse, error) {
	out := new(GetExperimentGoalCountResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.eventcounter.EventCounterService/GetExperimentGoalCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCounterServiceClient) GetMAUCount(ctx context.Context, in *GetMAUCountRequest, opts ...grpc.CallOption) (*GetMAUCountResponse, error) {
	out := new(GetMAUCountResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.eventcounter.EventCounterService/GetMAUCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCounterServiceClient) SummarizeMAUCounts(ctx context.Context, in *SummarizeMAUCountsRequest, opts ...grpc.CallOption) (*SummarizeMAUCountsResponse, error) {
	out := new(SummarizeMAUCountsResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.eventcounter.EventCounterService/SummarizeMAUCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCounterServiceClient) GetOpsEvaluationUserCount(ctx context.Context, in *GetOpsEvaluationUserCountRequest, opts ...grpc.CallOption) (*GetOpsEvaluationUserCountResponse, error) {
	out := new(GetOpsEvaluationUserCountResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.eventcounter.EventCounterService/GetOpsEvaluationUserCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCounterServiceClient) GetOpsGoalUserCount(ctx context.Context, in *GetOpsGoalUserCountRequest, opts ...grpc.CallOption) (*GetOpsGoalUserCountResponse, error) {
	out := new(GetOpsGoalUserCountResponse)
	err := c.cc.Invoke(ctx, "/bucketeer.eventcounter.EventCounterService/GetOpsGoalUserCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventCounterServiceServer is the server API for EventCounterService service.
type EventCounterServiceServer interface {
	GetExperimentEvaluationCount(context.Context, *GetExperimentEvaluationCountRequest) (*GetExperimentEvaluationCountResponse, error)
	GetEvaluationTimeseriesCount(context.Context, *GetEvaluationTimeseriesCountRequest) (*GetEvaluationTimeseriesCountResponse, error)
	GetExperimentResult(context.Context, *GetExperimentResultRequest) (*GetExperimentResultResponse, error)
	ListExperimentResults(context.Context, *ListExperimentResultsRequest) (*ListExperimentResultsResponse, error)
	GetExperimentGoalCount(context.Context, *GetExperimentGoalCountRequest) (*GetExperimentGoalCountResponse, error)
	GetMAUCount(context.Context, *GetMAUCountRequest) (*GetMAUCountResponse, error)
	SummarizeMAUCounts(context.Context, *SummarizeMAUCountsRequest) (*SummarizeMAUCountsResponse, error)
	GetOpsEvaluationUserCount(context.Context, *GetOpsEvaluationUserCountRequest) (*GetOpsEvaluationUserCountResponse, error)
	GetOpsGoalUserCount(context.Context, *GetOpsGoalUserCountRequest) (*GetOpsGoalUserCountResponse, error)
}

// UnimplementedEventCounterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventCounterServiceServer struct {
}

func (*UnimplementedEventCounterServiceServer) GetExperimentEvaluationCount(context.Context, *GetExperimentEvaluationCountRequest) (*GetExperimentEvaluationCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentEvaluationCount not implemented")
}
func (*UnimplementedEventCounterServiceServer) GetEvaluationTimeseriesCount(context.Context, *GetEvaluationTimeseriesCountRequest) (*GetEvaluationTimeseriesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationTimeseriesCount not implemented")
}
func (*UnimplementedEventCounterServiceServer) GetExperimentResult(context.Context, *GetExperimentResultRequest) (*GetExperimentResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentResult not implemented")
}
func (*UnimplementedEventCounterServiceServer) ListExperimentResults(context.Context, *ListExperimentResultsRequest) (*ListExperimentResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExperimentResults not implemented")
}
func (*UnimplementedEventCounterServiceServer) GetExperimentGoalCount(context.Context, *GetExperimentGoalCountRequest) (*GetExperimentGoalCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentGoalCount not implemented")
}
func (*UnimplementedEventCounterServiceServer) GetMAUCount(context.Context, *GetMAUCountRequest) (*GetMAUCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMAUCount not implemented")
}
func (*UnimplementedEventCounterServiceServer) SummarizeMAUCounts(context.Context, *SummarizeMAUCountsRequest) (*SummarizeMAUCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SummarizeMAUCounts not implemented")
}
func (*UnimplementedEventCounterServiceServer) GetOpsEvaluationUserCount(context.Context, *GetOpsEvaluationUserCountRequest) (*GetOpsEvaluationUserCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpsEvaluationUserCount not implemented")
}
func (*UnimplementedEventCounterServiceServer) GetOpsGoalUserCount(context.Context, *GetOpsGoalUserCountRequest) (*GetOpsGoalUserCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpsGoalUserCount not implemented")
}

func RegisterEventCounterServiceServer(s *grpc.Server, srv EventCounterServiceServer) {
	s.RegisterService(&_EventCounterService_serviceDesc, srv)
}

func _EventCounterService_GetExperimentEvaluationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentEvaluationCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCounterServiceServer).GetExperimentEvaluationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.eventcounter.EventCounterService/GetExperimentEvaluationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCounterServiceServer).GetExperimentEvaluationCount(ctx, req.(*GetExperimentEvaluationCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventCounterService_GetEvaluationTimeseriesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationTimeseriesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCounterServiceServer).GetEvaluationTimeseriesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.eventcounter.EventCounterService/GetEvaluationTimeseriesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCounterServiceServer).GetEvaluationTimeseriesCount(ctx, req.(*GetEvaluationTimeseriesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventCounterService_GetExperimentResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCounterServiceServer).GetExperimentResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.eventcounter.EventCounterService/GetExperimentResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCounterServiceServer).GetExperimentResult(ctx, req.(*GetExperimentResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventCounterService_ListExperimentResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExperimentResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCounterServiceServer).ListExperimentResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.eventcounter.EventCounterService/ListExperimentResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCounterServiceServer).ListExperimentResults(ctx, req.(*ListExperimentResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventCounterService_GetExperimentGoalCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentGoalCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCounterServiceServer).GetExperimentGoalCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.eventcounter.EventCounterService/GetExperimentGoalCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCounterServiceServer).GetExperimentGoalCount(ctx, req.(*GetExperimentGoalCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventCounterService_GetMAUCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMAUCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCounterServiceServer).GetMAUCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.eventcounter.EventCounterService/GetMAUCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCounterServiceServer).GetMAUCount(ctx, req.(*GetMAUCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventCounterService_SummarizeMAUCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizeMAUCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCounterServiceServer).SummarizeMAUCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.eventcounter.EventCounterService/SummarizeMAUCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCounterServiceServer).SummarizeMAUCounts(ctx, req.(*SummarizeMAUCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventCounterService_GetOpsEvaluationUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpsEvaluationUserCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCounterServiceServer).GetOpsEvaluationUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.eventcounter.EventCounterService/GetOpsEvaluationUserCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCounterServiceServer).GetOpsEvaluationUserCount(ctx, req.(*GetOpsEvaluationUserCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventCounterService_GetOpsGoalUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpsGoalUserCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCounterServiceServer).GetOpsGoalUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucketeer.eventcounter.EventCounterService/GetOpsGoalUserCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCounterServiceServer).GetOpsGoalUserCount(ctx, req.(*GetOpsGoalUserCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventCounterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bucketeer.eventcounter.EventCounterService",
	HandlerType: (*EventCounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExperimentEvaluationCount",
			Handler:    _EventCounterService_GetExperimentEvaluationCount_Handler,
		},
		{
			MethodName: "GetEvaluationTimeseriesCount",
			Handler:    _EventCounterService_GetEvaluationTimeseriesCount_Handler,
		},
		{
			MethodName: "GetExperimentResult",
			Handler:    _EventCounterService_GetExperimentResult_Handler,
		},
		{
			MethodName: "ListExperimentResults",
			Handler:    _EventCounterService_ListExperimentResults_Handler,
		},
		{
			MethodName: "GetExperimentGoalCount",
			Handler:    _EventCounterService_GetExperimentGoalCount_Handler,
		},
		{
			MethodName: "GetMAUCount",
			Handler:    _EventCounterService_GetMAUCount_Handler,
		},
		{
			MethodName: "SummarizeMAUCounts",
			Handler:    _EventCounterService_SummarizeMAUCounts_Handler,
		},
		{
			MethodName: "GetOpsEvaluationUserCount",
			Handler:    _EventCounterService_GetOpsEvaluationUserCount_Handler,
		},
		{
			MethodName: "GetOpsGoalUserCount",
			Handler:    _EventCounterService_GetOpsGoalUserCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/eventcounter/service.proto",
}
