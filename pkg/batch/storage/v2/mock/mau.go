// Copyright 2024 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: mau.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	service "github.com/bucketeer-io/bucketeer/proto/event/service"
)

// MockMAUStorage is a mock of MAUStorage interface.
type MockMAUStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMAUStorageMockRecorder
}

// MockMAUStorageMockRecorder is the mock recorder for MockMAUStorage.
type MockMAUStorageMockRecorder struct {
	mock *MockMAUStorage
}

// NewMockMAUStorage creates a new mock instance.
func NewMockMAUStorage(ctrl *gomock.Controller) *MockMAUStorage {
	mock := &MockMAUStorage{ctrl: ctrl}
	mock.recorder = &MockMAUStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMAUStorage) EXPECT() *MockMAUStorageMockRecorder {
	return m.recorder
}

// UpsertMAU mocks base method.
func (m *MockMAUStorage) UpsertMAU(ctx context.Context, event *service.UserEvent, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMAU", ctx, event, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMAU indicates an expected call of UpsertMAU.
func (mr *MockMAUStorageMockRecorder) UpsertMAU(ctx, event, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMAU", reflect.TypeOf((*MockMAUStorage)(nil).UpsertMAU), ctx, event, environmentNamespace)
}

// UpsertMAUs mocks base method.
func (m *MockMAUStorage) UpsertMAUs(ctx context.Context, events []*service.UserEvent, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMAUs", ctx, events, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMAUs indicates an expected call of UpsertMAUs.
func (mr *MockMAUStorageMockRecorder) UpsertMAUs(ctx, events, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMAUs", reflect.TypeOf((*MockMAUStorage)(nil).UpsertMAUs), ctx, events, environmentNamespace)
}
