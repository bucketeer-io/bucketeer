apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "notification.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "notification.name" . }}
    chart: {{ template "notification.chart" . }}
    release: {{ template "notification.fullname" . }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "notification.name" . }}
      release: {{ template "notification.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "notification.name" . }}
        release: {{ template "notification.fullname" . }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/envoy-configmap.yaml") . | sha256sum }}
    spec:
      {{- with .Values.global.image.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      volumes:
        - name: envoy-config
          configMap:
            name: {{ template "notification.fullname" . }}-envoy-config
        - name: service-cert-secret
          secret:
            secretName: {{ template "service-cert-secret" . }}
        - name: oauth-key-secret
          secret:
            secretName: {{ template "oauth-key-secret" . }}
        - name: service-token-secret
          secret:
            secretName: {{ template "service-token-secret" . }} 
      serviceAccountName: {{ template "notification.name" . }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: ["server"]
          env:
            - name: BUCKETEER_NOTIFICATION_PROJECT
              value: "{{ .Values.env.project }}"
            - name: BUCKETEER_NOTIFICATION_MYSQL_USER
              value: "{{ .Values.env.mysqlUser }}"
            - name: BUCKETEER_NOTIFICATION_MYSQL_PASS
              value: "{{ .Values.env.mysqlPass }}"
            - name: BUCKETEER_NOTIFICATION_MYSQL_HOST
              value: "{{ .Values.env.mysqlHost }}"
            - name: BUCKETEER_NOTIFICATION_MYSQL_PORT
              value: "{{ .Values.env.mysqlPort }}"
            - name: BUCKETEER_NOTIFICATION_MYSQL_DB_NAME
              value: "{{ .Values.env.mysqlDbName }}"
            - name: BUCKETEER_NOTIFICATION_DOMAIN_EVENT_TOPIC
              value: "{{ .Values.env.domainEventTopic }}"
            - name: BUCKETEER_NOTIFICATION_ACCOUNT_SERVICE
              value: "{{ .Values.env.accountService }}"
            - name: BUCKETEER_NOTIFICATION_PORT
              value: "{{ .Values.env.port }}"
            - name: BUCKETEER_NOTIFICATION_METRICS_PORT
              value: "{{ .Values.env.metricsPort }}"
            - name: BUCKETEER_NOTIFICATION_LOG_LEVEL
              value: "{{ .Values.env.logLevel }}"
            - name: BUCKETEER_NOTIFICATION_OAUTH_CLIENT_ID
              value: "{{ .Values.oauth.clientId }}"
            - name: BUCKETEER_NOTIFICATION_OAUTH_ISSUER
              value: "{{ .Values.oauth.issuer }}"
            - name: BUCKETEER_NOTIFICATION_OAUTH_KEY
              value: /usr/local/oauth-key/public.pem
            - name: BUCKETEER_NOTIFICATION_CERT
              value: /usr/local/certs/service/tls.crt
            - name: BUCKETEER_NOTIFICATION_KEY
              value: /usr/local/certs/service/tls.key
            - name: BUCKETEER_NOTIFICATION_SERVICE_TOKEN
              value: /usr/local/service-token/token
          volumeMounts:
            - name: service-cert-secret
              mountPath: /usr/local/certs/service
              readOnly: true
            - name: oauth-key-secret
              mountPath: /usr/local/oauth-key
              readOnly: true
            - name: service-token-secret
              mountPath: /usr/local/service-token
              readOnly: true
          ports:
            - name: service
              containerPort: {{ .Values.env.port }}
            - name: metrics
              containerPort: {{ .Values.env.metricsPort }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.health.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.periodSeconds }}
            failureThreshold: {{ .Values.health.failureThreshold }}
            httpGet:
              path: /health
              port: service
              scheme: HTTPS
          readinessProbe:
            initialDelaySeconds: {{ .Values.health.initialDelaySeconds }}
            httpGet:
              path: /health
              port: service
              scheme: HTTPS
          resources:
{{ toYaml .Values.resources | indent 12 }}
        - name: envoy
          image: "{{ .Values.envoy.image.repository }}:{{ .Values.envoy.image.tag }}"
          imagePullPolicy: {{ .Values.envoy.image.pullPolicy }}
          lifecycle:
            preStop:
              exec:
                command:
                  - "/bin/sh"
                  - "-c"
                  - "while [ $(netstat -plunt | grep tcp | grep -v envoy | wc -l) -ne 0 ]; do sleep 1; done;"
          command: ["envoy"]
          args:
            - "-c"
            - "/usr/local/conf/config.yaml"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: envoy-config
              mountPath: /usr/local/conf/
              readOnly: true
            - name: service-cert-secret
              mountPath: /usr/local/certs/service
              readOnly: true
          ports:
            - name: envoy
              containerPort: {{ .Values.envoy.port }}
            - name: admin
              containerPort: {{ .Values.envoy.adminPort }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.health.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.periodSeconds }}
            failureThreshold: {{ .Values.health.failureThreshold }}
            httpGet:
              path: /health
              port: envoy
              scheme: HTTPS
          readinessProbe:
            initialDelaySeconds: {{ .Values.health.initialDelaySeconds }}
            httpGet:
              path: /health
              port: envoy
              scheme: HTTPS
          resources:
{{ toYaml .Values.envoy.resources | indent 12 }}
  strategy:
    type: RollingUpdate
