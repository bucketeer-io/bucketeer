apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "api.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "api.name" . }}
    chart: {{ template "api.chart" . }}
    release: {{ template "api.fullname" . }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "api.name" . }}
      release: {{ template "api.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "api.name" . }}
        release: {{ template "api.fullname" . }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/envoy-configmap.yaml") . | sha256sum }}
    spec:
      # Ensure pod has sufficient time for graceful shutdown before SIGKILL
      # This matches GCP Spot VM termination window (30s) and allows:
      # - 3s for K8s to detect pod is not ready
      # - 20s for application graceful shutdown
      # - 7s safety margin
      terminationGracePeriodSeconds: 30
      {{- with .Values.global.image.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      volumes:
        - name: envoy-config
          configMap:
            name: {{ template "api.fullname" . }}-envoy-config
        - name: service-cert-secret
          secret:
            secretName: {{ template "service-cert-secret" . }}
        - name: service-token-secret
          secret:
            secretName: {{ template "service-token-secret" . }}
      {{- if .Values.serviceAccount.annotations }}
      serviceAccountName: {{ template "api.fullname" . }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: ["server"]
          env:
            - name: BUCKETEER_API_PROFILE
              value: "{{.Values.env.profile}}"
            - name: BUCKETEER_API_GCP_TRACE_ENABLED
              value: "{{.Values.env.gcpEnabled}}"
            - name: BUCKETEER_API_PROJECT
              value: "{{ .Values.global.pubsub.project }}"
            - name: PUBSUB_EMULATOR_HOST
              value: "{{ .Values.global.pubsub.emulatorHost }}"
            - name: BUCKETEER_API_GOAL_TOPIC
              value: "{{ .Values.env.goalTopic }}"
            - name: BUCKETEER_API_EVALUATION_TOPIC
              value: "{{ .Values.env.evaluationTopic }}"
            - name: BUCKETEER_API_USER_TOPIC
              value: "{{ .Values.env.userTopic }}"
            - name: BUCKETEER_API_METRICS_TOPIC
              value: "{{ .Values.env.metricsTopic }}"
            - name: BUCKETEER_API_PUBLISH_NUM_GOROUTINES
              value: "{{ .Values.env.publishNumGoroutines }}"
            - name: BUCKETEER_API_PUBLISH_TIMEOUT
              value: "{{ .Values.env.publishTimeout }}"
            - name: BUCKETEER_API_REDIS_SERVER_NAME
              value: "{{ .Values.env.redis.serverName }}"
            - name: BUCKETEER_API_REDIS_ADDR
              value: "{{ .Values.env.redis.addr }}"
            - name: BUCKETEER_API_REDIS_POOL_MAX_IDLE
              value: "{{ .Values.env.redis.poolMaxIdle }}"
            - name: BUCKETEER_API_REDIS_POOL_MAX_ACTIVE
              value: "{{ .Values.env.redis.poolMaxActive }}"
            - name: BUCKETEER_API_PUBSUB_REDIS_PARTITION_COUNT
              value: "{{ .Values.global.pubsub.redis.partitionCount }}"
            - name: BUCKETEER_API_OLDEST_EVENT_TIMESTAMP
              value: "{{ .Values.env.oldestEventTimestamp }}"
            - name: BUCKETEER_API_FURTHEST_EVENT_TIMESTAMP
              value: "{{ .Values.env.furthestEventTimestamp }}"
            - name: BUCKETEER_API_FEATURE_SERVICE
              value: "{{ .Values.env.featureService }}"
            - name: BUCKETEER_API_ACCOUNT_SERVICE
              value: "{{ .Values.env.accountService }}"
            - name: BUCKETEER_API_PUSH_SERVICE
              value: "{{ .Values.env.pushService }}"
            - name: BUCKETEER_API_CODE_REF_SERVICE
              value: "{{ .Values.env.codeRefService }}"
            - name: BUCKETEER_API_AUDIT_LOG_SERVICE
              value: "{{ .Values.env.auditLogService }}"
            - name: BUCKETEER_API_TAG_SERVICE
              value: "{{ .Values.env.tagService }}"
            - name: BUCKETEER_API_TEAM_SERVICE
              value: "{{ .Values.env.teamService }}"
            - name: BUCKETEER_API_NOTIFICATION_SERVICE
              value: "{{ .Values.env.notificationService }}"
            - name: BUCKETEER_API_EXPERIMENT_SERVICE
              value: "{{ .Values.env.experimentService }}"
            - name: BUCKETEER_API_EVENT_COUNTER_SERVICE
              value: "{{ .Values.env.eventCounterService }}"
            - name: BUCKETEER_API_ENVIRONMENT_SERVICE
              value: "{{ .Values.env.environmentService }}"
            - name: BUCKETEER_API_GRPC_GATEWAY_PORT
              value: "{{ .Values.env.grpcGatewayPort }}"
            - name: BUCKETEER_API_PORT
              value: "{{ .Values.env.port }}"
            - name: BUCKETEER_API_METRICS_PORT
              value: "{{ .Values.env.metricsPort }}"
            - name: BUCKETEER_API_LOG_LEVEL
              value: "{{ .Values.env.logLevel }}"
            - name: BUCKETEER_API_ENABLE_PPROF
              value: "{{ .Values.env.enablePprof }}"
            - name: BUCKETEER_API_PPROF_ADDR
              value: "{{ .Values.env.pprofAddr }}"
            - name: BUCKETEER_API_TRACE_SAMPLING_PROBABILITY
              value: "{{ .Values.env.traceSamplingProbability }}"
            - name: BUCKETEER_API_PUBSUB_TYPE
              value: "{{ .Values.global.pubsub.type }}"
            - name: BUCKETEER_API_PUBSUB_REDIS_SERVER_NAME
              value: "{{ .Values.global.pubsub.redis.serverName }}"
            - name: BUCKETEER_API_PUBSUB_REDIS_ADDR
              value: "{{ .Values.global.pubsub.redis.addr }}"
            - name: BUCKETEER_API_PUBSUB_REDIS_POOL_SIZE
              value: "{{ .Values.global.pubsub.redis.poolSize }}"
            - name: BUCKETEER_API_PUBSUB_REDIS_MIN_IDLE
              value: "{{ .Values.global.pubsub.redis.minIdle }}"
            - name: BUCKETEER_API_SERVICE_TOKEN
              value: /usr/local/service-token/token
            - name: BUCKETEER_API_CERT
              value: /usr/local/certs/service/tls.crt
            - name: BUCKETEER_API_KEY
              value: /usr/local/certs/service/tls.key
          volumeMounts:
            - name: service-cert-secret
              mountPath: /usr/local/certs/service
              readOnly: true
            - name: service-token-secret
              mountPath: /usr/local/service-token
              readOnly: true
          ports:
            - name: service
              containerPort: {{ .Values.env.port }}
            - name: metrics
              containerPort: {{ .Values.env.metricsPort }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.health.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.livenessProbe.timeoutSeconds }}
            httpGet:
              path: /health
              port: service
              scheme: HTTPS
          readinessProbe:
            initialDelaySeconds: {{ .Values.health.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.readinessProbe.timeoutSeconds }}
            httpGet:
              path: /health
              port: service
              scheme: HTTPS
          resources:
{{ toYaml .Values.resources | indent 12 }}
        - name: envoy
          image: "{{ .Values.envoy.image.repository }}:{{ .Values.envoy.image.tag }}"
          imagePullPolicy: {{ .Values.envoy.image.pullPolicy }}
          lifecycle:
            preStop:
              exec:
                command:
                  - "/bin/sh"
                  - "-c"
                  - |
                    # Fail Envoy health check immediately
                    wget -O- --post-data='{}' http://localhost:$ENVOY_ADMIN_PORT/healthcheck/fail

                    # Wait for API to signal ready for shutdown (max 22s)
                    # This is coordinated with the app's 20s shutdown timeout.
                    # Envoy must wait LONGER than the app timeout to ensure it doesn't
                    # start draining while the app is still processing requests.
                    timeout=22
                    while [ $timeout -gt 0 ]; do
                      if wget -q -O- --no-check-certificate https://localhost:9090/internal/shutdown-ready 2>/dev/null | grep -q "ready"; then
                        echo "API ready for shutdown, draining connections..."
                        break
                      fi
                      sleep 1
                      timeout=$((timeout-1))
                    done

                    # Additional drain time for remaining connections
                    sleep 3
          command: ["envoy"]
          args:
            - "-c"
            - "/usr/local/conf/config.yaml"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ENVOY_ADMIN_PORT
              value: "{{ .Values.envoy.adminPort }}"
            # Forces Envoy free up unused memory
            - name: TCMALLOC_RELEASE_RATE
              value: "100.0"
          volumeMounts:
            - name: envoy-config
              mountPath: /usr/local/conf
              readOnly: true
            - name: service-cert-secret
              mountPath: /usr/local/certs/service
              readOnly: true
          ports:
            - name: envoy
              containerPort: {{ .Values.envoy.port }}
            - name: admin
              containerPort: {{ .Values.envoy.adminPort }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.health.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.livenessProbe.failureThreshold }}
            httpGet:
              path: /ready
              port: admin
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: {{ .Values.health.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.readinessProbe.failureThreshold }}
            httpGet:
              path: /ready
              port: admin
              scheme: HTTP
          resources:
{{ toYaml .Values.envoy.resources | indent 12 }}
  strategy:
    type: RollingUpdate
