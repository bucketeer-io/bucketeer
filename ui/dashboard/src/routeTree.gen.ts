/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AuthCallbackImport } from './routes/auth.callback'
import { Route as EnvUrlCodeSettingsImport } from './routes/$envUrlCode/settings'
import { Route as EnvUrlCodeFeaturesImport } from './routes/$envUrlCode/features'
import { Route as EnvUrlCodeenvImport } from './routes/$envUrlCode/__env'

// Create Virtual Routes

const EnvUrlCodeImport = createFileRoute('/$envUrlCode')()

// Create/Update Routes

const EnvUrlCodeRoute = EnvUrlCodeImport.update({
  id: '/$envUrlCode',
  path: '/$envUrlCode',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackRoute = AuthCallbackImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRoute,
} as any)

const EnvUrlCodeSettingsRoute = EnvUrlCodeSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => EnvUrlCodeRoute,
} as any)

const EnvUrlCodeFeaturesRoute = EnvUrlCodeFeaturesImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => EnvUrlCodeRoute,
} as any)

const EnvUrlCodeenvRoute = EnvUrlCodeenvImport.update({
  id: '/__env',
  getParentRoute: () => EnvUrlCodeRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$envUrlCode': {
      id: '/$envUrlCode'
      path: '/$envUrlCode'
      fullPath: '/$envUrlCode'
      preLoaderRoute: typeof EnvUrlCodeImport
      parentRoute: typeof rootRoute
    }
    '/$envUrlCode/__env': {
      id: '/$envUrlCode/__env'
      path: '/$envUrlCode'
      fullPath: '/$envUrlCode'
      preLoaderRoute: typeof EnvUrlCodeenvImport
      parentRoute: typeof EnvUrlCodeRoute
    }
    '/$envUrlCode/features': {
      id: '/$envUrlCode/features'
      path: '/features'
      fullPath: '/$envUrlCode/features'
      preLoaderRoute: typeof EnvUrlCodeFeaturesImport
      parentRoute: typeof EnvUrlCodeImport
    }
    '/$envUrlCode/settings': {
      id: '/$envUrlCode/settings'
      path: '/settings'
      fullPath: '/$envUrlCode/settings'
      preLoaderRoute: typeof EnvUrlCodeSettingsImport
      parentRoute: typeof EnvUrlCodeImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface EnvUrlCodeRouteChildren {
  EnvUrlCodeenvRoute: typeof EnvUrlCodeenvRoute
  EnvUrlCodeFeaturesRoute: typeof EnvUrlCodeFeaturesRoute
  EnvUrlCodeSettingsRoute: typeof EnvUrlCodeSettingsRoute
}

const EnvUrlCodeRouteChildren: EnvUrlCodeRouteChildren = {
  EnvUrlCodeenvRoute: EnvUrlCodeenvRoute,
  EnvUrlCodeFeaturesRoute: EnvUrlCodeFeaturesRoute,
  EnvUrlCodeSettingsRoute: EnvUrlCodeSettingsRoute,
}

const EnvUrlCodeRouteWithChildren = EnvUrlCodeRoute._addFileChildren(
  EnvUrlCodeRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$envUrlCode': typeof EnvUrlCodeenvRoute
  '/$envUrlCode/features': typeof EnvUrlCodeFeaturesRoute
  '/$envUrlCode/settings': typeof EnvUrlCodeSettingsRoute
  '/auth/callback': typeof AuthCallbackRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$envUrlCode': typeof EnvUrlCodeenvRoute
  '/$envUrlCode/features': typeof EnvUrlCodeFeaturesRoute
  '/$envUrlCode/settings': typeof EnvUrlCodeSettingsRoute
  '/auth/callback': typeof AuthCallbackRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$envUrlCode': typeof EnvUrlCodeRouteWithChildren
  '/$envUrlCode/__env': typeof EnvUrlCodeenvRoute
  '/$envUrlCode/features': typeof EnvUrlCodeFeaturesRoute
  '/$envUrlCode/settings': typeof EnvUrlCodeSettingsRoute
  '/auth/callback': typeof AuthCallbackRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$envUrlCode'
    | '/$envUrlCode/features'
    | '/$envUrlCode/settings'
    | '/auth/callback'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$envUrlCode'
    | '/$envUrlCode/features'
    | '/$envUrlCode/settings'
    | '/auth/callback'
  id:
    | '__root__'
    | '/'
    | '/$envUrlCode'
    | '/$envUrlCode/__env'
    | '/$envUrlCode/features'
    | '/$envUrlCode/settings'
    | '/auth/callback'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EnvUrlCodeRoute: typeof EnvUrlCodeRouteWithChildren
  AuthCallbackRoute: typeof AuthCallbackRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EnvUrlCodeRoute: EnvUrlCodeRouteWithChildren,
  AuthCallbackRoute: AuthCallbackRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$envUrlCode",
        "/auth/callback"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$envUrlCode": {
      "filePath": "$envUrlCode",
      "children": [
        "/$envUrlCode/__env",
        "/$envUrlCode/features",
        "/$envUrlCode/settings"
      ]
    },
    "/$envUrlCode/__env": {
      "filePath": "$envUrlCode/__env.tsx",
      "parent": "/$envUrlCode"
    },
    "/$envUrlCode/features": {
      "filePath": "$envUrlCode/features.tsx",
      "parent": "/$envUrlCode"
    },
    "/$envUrlCode/settings": {
      "filePath": "$envUrlCode/settings.tsx",
      "parent": "/$envUrlCode"
    },
    "/auth/callback": {
      "filePath": "auth.callback.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
