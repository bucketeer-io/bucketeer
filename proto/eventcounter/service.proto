// Copyright 2025 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.eventcounter;
option go_package = "github.com/bucketeer-io/bucketeer/proto/eventcounter";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/wrappers.proto";

import "proto/eventcounter/experiment_result.proto";
import "proto/eventcounter/timeseries.proto";
import "proto/eventcounter/variation_count.proto";

message GetExperimentEvaluationCountRequest {
  reserved 1;
  int64 start_at = 2 [(google.api.field_behavior) = REQUIRED];
  int64 end_at = 3 [(google.api.field_behavior) = REQUIRED];
  string feature_id = 4 [(google.api.field_behavior) = REQUIRED];
  int32 feature_version = 5;
  repeated string variation_ids = 6;
  string environment_id = 7 [(google.api.field_behavior) = REQUIRED];
}

message GetExperimentEvaluationCountResponse {
  string feature_id = 1;
  int32 feature_version = 2;
  repeated VariationCount variation_counts = 3;
}

message GetEvaluationTimeseriesCountRequest {
  enum TimeRange {
    UNKNOWN = 0;
    TWENTY_FOUR_HOURS = 1;
    SEVEN_DAYS = 2;
    FOURTEEN_DAYS = 3;
    THIRTY_DAYS = 4;
  }
  reserved 1;
  string feature_id = 2 [(google.api.field_behavior) = REQUIRED];
  TimeRange time_range = 3 [(google.api.field_behavior) = REQUIRED];
  string environment_id = 4 [(google.api.field_behavior) = REQUIRED];
}

message GetEvaluationTimeseriesCountResponse {
  repeated VariationTimeseries user_counts = 1;
  repeated VariationTimeseries event_counts = 2;
}

message GetExperimentResultRequest {
  reserved 1;
  string experiment_id = 2 [(google.api.field_behavior) = REQUIRED];
  string environment_id = 3 [(google.api.field_behavior) = REQUIRED];
}

message GetExperimentResultResponse {
  ExperimentResult experiment_result = 1;
}

message ListExperimentResultsRequest {
  string feature_id = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Int32Value feature_version = 2;
  reserved 3;
  string environment_id = 4 [(google.api.field_behavior) = REQUIRED];
}

message ListExperimentResultsResponse {
  map<string, ExperimentResult> results = 1;
}

message GetExperimentGoalCountRequest {
  reserved 1;
  int64 start_at = 2 [(google.api.field_behavior) = REQUIRED];
  int64 end_at = 3 [(google.api.field_behavior) = REQUIRED];
  string goal_id = 4 [(google.api.field_behavior) = REQUIRED];
  string feature_id = 5 [(google.api.field_behavior) = REQUIRED];
  int32 feature_version = 6;
  repeated string variation_ids = 7;
  string environment_id = 8 [(google.api.field_behavior) = REQUIRED];
}

message GetExperimentGoalCountResponse {
  string goal_id = 1;
  repeated VariationCount variation_counts = 2;
}

message GetOpsEvaluationUserCountRequest {
  reserved 1;
  string ops_rule_id = 2 [(google.api.field_behavior) = REQUIRED];
  string clause_id = 3 [(google.api.field_behavior) = REQUIRED];
  string feature_id = 4 [(google.api.field_behavior) = REQUIRED];
  int32 feature_version = 5 [(google.api.field_behavior) = REQUIRED];
  string variation_id = 6 [(google.api.field_behavior) = REQUIRED];
  string environment_id = 7 [(google.api.field_behavior) = REQUIRED];
}

message GetOpsEvaluationUserCountResponse {
  string ops_rule_id = 1;
  string clause_id = 2;
  int64 count = 3;
}

message GetOpsGoalUserCountRequest {
  reserved 1;
  string ops_rule_id = 2 [(google.api.field_behavior) = REQUIRED];
  string clause_id = 3 [(google.api.field_behavior) = REQUIRED];
  string feature_id = 4 [(google.api.field_behavior) = REQUIRED];
  int32 feature_version = 5 [(google.api.field_behavior) = REQUIRED];
  string variation_id = 6 [(google.api.field_behavior) = REQUIRED];
  string environment_id = 7 [(google.api.field_behavior) = REQUIRED];
}

message GetOpsGoalUserCountResponse {
  string ops_rule_id = 1;
  string clause_id = 2;
  int64 count = 3;
}

message GetMAUCountRequest {
  reserved 1;
  string year_month = 2 [(google.api.field_behavior) = REQUIRED];
  string environment_id = 3 [(google.api.field_behavior) = REQUIRED];
}

message GetMAUCountResponse {
  int64 event_count = 1;
  int64 user_count = 2;
}

message SummarizeMAUCountsRequest {
  string year_month = 1 [(google.api.field_behavior) = REQUIRED];
  bool is_finished = 2;
}

message SummarizeMAUCountsResponse {}

service EventCounterService {
  rpc GetExperimentEvaluationCount(GetExperimentEvaluationCountRequest)
      returns (GetExperimentEvaluationCountResponse) {
    option (google.api.http) = {
      get: "/v1/experiment_evaluation_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Experiment Evaluation Count"
      description: "Get an experiment evaluation count"
      tags: "experiment_evaluation_count"
      operation_id: "web.v1.event_counter.experiment_evaluation_count.get"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the requested resource is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }

  rpc GetEvaluationTimeseriesCount(GetEvaluationTimeseriesCountRequest)
      returns (GetEvaluationTimeseriesCountResponse) {
    option (google.api.http) = {
      get: "/v1/evaluation_timeseries_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Evaluation Timeseries Count"
      description: "Get an evaluation timeseries count"
      tags: "evaluation_timeseries_count"
      operation_id: "web.v1.event_counter.evaluation_timeseries_count.get"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the requested resource is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }

  rpc GetExperimentResult(GetExperimentResultRequest)
      returns (GetExperimentResultResponse) {
    option (google.api.http) = {
      get: "/v1/experiment_result"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Experiment Result"
      description: "Get an experiment result"
      tags: "experiment_result"
      operation_id: "web.v1.event_counter.experiment_result.get"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the requested resource is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }

  rpc ListExperimentResults(ListExperimentResultsRequest)
      returns (ListExperimentResultsResponse) {
    option (google.api.http) = {
      get: "/v1/experiment_results"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Experiment Results"
      description: "List experiment results"
      tags: "experiment_result"
      operation_id: "web.v1.event_counter.experiment_result.list"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the requested resource is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }

  rpc GetExperimentGoalCount(GetExperimentGoalCountRequest)
      returns (GetExperimentGoalCountResponse) {
    option (google.api.http) = {
      get: "/v1/experiment_goal_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Experiment Goal Count"
      description: "Get an experiment goal count"
      tags: "experiment_goal_count"
      operation_id: "web.v1.event_counter.experiment_goal_count.get"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the requested resource is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }

  rpc GetMAUCount(GetMAUCountRequest) returns (GetMAUCountResponse) {
    option (google.api.http) = {
      get: "/v1/mau_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get MAU Count"
      description: "Get MAU count"
      tags: "mau_count"
      operation_id: "web.v1.event_counter.mau_count.get"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the requested resource is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }

  rpc SummarizeMAUCounts(SummarizeMAUCountsRequest)
      returns (SummarizeMAUCountsResponse) {
    option (google.api.http) = {
      get: "/v1/summarize_mau_counts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Summarize MAU Counts"
      description: "Summarize MAU counts"
      tags: "mau_count"
      operation_id: "web.v1.event_counter.summarize_mau_counts.get"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the requested resource is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }

  rpc GetOpsEvaluationUserCount(GetOpsEvaluationUserCountRequest)
      returns (GetOpsEvaluationUserCountResponse) {
    option (google.api.http) = {
      get: "/v1/ops_evaluation_user_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Ops Evaluation User Count"
      description: "Get an ops evaluation user count"
      tags: "ops_evaluation_user_count"
      operation_id: "web.v1.event_counter.ops_evaluation_user_count.get"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the requested resource is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }

  rpc GetOpsGoalUserCount(GetOpsGoalUserCountRequest)
      returns (GetOpsGoalUserCountResponse) {
    option (google.api.http) = {
      get: "/v1/ops_goal_user_count"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Ops Goal User Count"
      description: "Get an ops goal user count"
      tags: "ops_goal_user_count"
      operation_id: "web.v1.event_counter.ops_goal_user_count.get"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the requested resource is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }
}
