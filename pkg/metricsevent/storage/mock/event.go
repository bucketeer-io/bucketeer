// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// SaveGetEvaluationLatencyMetricsEvent mocks base method.
func (m *MockStorage) SaveGetEvaluationLatencyMetricsEvent(arg0, arg1 string, arg2 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveGetEvaluationLatencyMetricsEvent", arg0, arg1, arg2)
}

// SaveGetEvaluationLatencyMetricsEvent indicates an expected call of SaveGetEvaluationLatencyMetricsEvent.
func (mr *MockStorageMockRecorder) SaveGetEvaluationLatencyMetricsEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGetEvaluationLatencyMetricsEvent", reflect.TypeOf((*MockStorage)(nil).SaveGetEvaluationLatencyMetricsEvent), arg0, arg1, arg2)
}

// SaveGetEvaluationSizeMetricsEvent mocks base method.
func (m *MockStorage) SaveGetEvaluationSizeMetricsEvent(arg0, arg1 string, arg2 int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveGetEvaluationSizeMetricsEvent", arg0, arg1, arg2)
}

// SaveGetEvaluationSizeMetricsEvent indicates an expected call of SaveGetEvaluationSizeMetricsEvent.
func (mr *MockStorageMockRecorder) SaveGetEvaluationSizeMetricsEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGetEvaluationSizeMetricsEvent", reflect.TypeOf((*MockStorage)(nil).SaveGetEvaluationSizeMetricsEvent), arg0, arg1, arg2)
}

// SaveInternalErrorCountMetricsEvent mocks base method.
func (m *MockStorage) SaveInternalErrorCountMetricsEvent(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveInternalErrorCountMetricsEvent", arg0)
}

// SaveInternalErrorCountMetricsEvent indicates an expected call of SaveInternalErrorCountMetricsEvent.
func (mr *MockStorageMockRecorder) SaveInternalErrorCountMetricsEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInternalErrorCountMetricsEvent", reflect.TypeOf((*MockStorage)(nil).SaveInternalErrorCountMetricsEvent), arg0)
}

// SaveTimeoutErrorCountMetricsEvent mocks base method.
func (m *MockStorage) SaveTimeoutErrorCountMetricsEvent(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveTimeoutErrorCountMetricsEvent", arg0)
}

// SaveTimeoutErrorCountMetricsEvent indicates an expected call of SaveTimeoutErrorCountMetricsEvent.
func (mr *MockStorageMockRecorder) SaveTimeoutErrorCountMetricsEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTimeoutErrorCountMetricsEvent", reflect.TypeOf((*MockStorage)(nil).SaveTimeoutErrorCountMetricsEvent), arg0)
}
