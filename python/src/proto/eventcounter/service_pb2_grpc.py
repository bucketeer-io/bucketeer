# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto.eventcounter import service_pb2 as proto_dot_eventcounter_dot_service__pb2


class EventCounterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetExperimentEvaluationCount = channel.unary_unary(
                '/bucketeer.eventcounter.EventCounterService/GetExperimentEvaluationCount',
                request_serializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentEvaluationCountRequest.SerializeToString,
                response_deserializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentEvaluationCountResponse.FromString,
                )
        self.GetEvaluationTimeseriesCount = channel.unary_unary(
                '/bucketeer.eventcounter.EventCounterService/GetEvaluationTimeseriesCount',
                request_serializer=proto_dot_eventcounter_dot_service__pb2.GetEvaluationTimeseriesCountRequest.SerializeToString,
                response_deserializer=proto_dot_eventcounter_dot_service__pb2.GetEvaluationTimeseriesCountResponse.FromString,
                )
        self.GetExperimentResult = channel.unary_unary(
                '/bucketeer.eventcounter.EventCounterService/GetExperimentResult',
                request_serializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentResultRequest.SerializeToString,
                response_deserializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentResultResponse.FromString,
                )
        self.ListExperimentResults = channel.unary_unary(
                '/bucketeer.eventcounter.EventCounterService/ListExperimentResults',
                request_serializer=proto_dot_eventcounter_dot_service__pb2.ListExperimentResultsRequest.SerializeToString,
                response_deserializer=proto_dot_eventcounter_dot_service__pb2.ListExperimentResultsResponse.FromString,
                )
        self.GetExperimentGoalCount = channel.unary_unary(
                '/bucketeer.eventcounter.EventCounterService/GetExperimentGoalCount',
                request_serializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentGoalCountRequest.SerializeToString,
                response_deserializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentGoalCountResponse.FromString,
                )
        self.GetMAUCount = channel.unary_unary(
                '/bucketeer.eventcounter.EventCounterService/GetMAUCount',
                request_serializer=proto_dot_eventcounter_dot_service__pb2.GetMAUCountRequest.SerializeToString,
                response_deserializer=proto_dot_eventcounter_dot_service__pb2.GetMAUCountResponse.FromString,
                )
        self.GetOpsEvaluationUserCount = channel.unary_unary(
                '/bucketeer.eventcounter.EventCounterService/GetOpsEvaluationUserCount',
                request_serializer=proto_dot_eventcounter_dot_service__pb2.GetOpsEvaluationUserCountRequest.SerializeToString,
                response_deserializer=proto_dot_eventcounter_dot_service__pb2.GetOpsEvaluationUserCountResponse.FromString,
                )
        self.GetOpsGoalUserCount = channel.unary_unary(
                '/bucketeer.eventcounter.EventCounterService/GetOpsGoalUserCount',
                request_serializer=proto_dot_eventcounter_dot_service__pb2.GetOpsGoalUserCountRequest.SerializeToString,
                response_deserializer=proto_dot_eventcounter_dot_service__pb2.GetOpsGoalUserCountResponse.FromString,
                )


class EventCounterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetExperimentEvaluationCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEvaluationTimeseriesCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListExperimentResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentGoalCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMAUCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOpsEvaluationUserCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOpsGoalUserCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventCounterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetExperimentEvaluationCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentEvaluationCount,
                    request_deserializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentEvaluationCountRequest.FromString,
                    response_serializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentEvaluationCountResponse.SerializeToString,
            ),
            'GetEvaluationTimeseriesCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEvaluationTimeseriesCount,
                    request_deserializer=proto_dot_eventcounter_dot_service__pb2.GetEvaluationTimeseriesCountRequest.FromString,
                    response_serializer=proto_dot_eventcounter_dot_service__pb2.GetEvaluationTimeseriesCountResponse.SerializeToString,
            ),
            'GetExperimentResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentResult,
                    request_deserializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentResultRequest.FromString,
                    response_serializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentResultResponse.SerializeToString,
            ),
            'ListExperimentResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ListExperimentResults,
                    request_deserializer=proto_dot_eventcounter_dot_service__pb2.ListExperimentResultsRequest.FromString,
                    response_serializer=proto_dot_eventcounter_dot_service__pb2.ListExperimentResultsResponse.SerializeToString,
            ),
            'GetExperimentGoalCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentGoalCount,
                    request_deserializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentGoalCountRequest.FromString,
                    response_serializer=proto_dot_eventcounter_dot_service__pb2.GetExperimentGoalCountResponse.SerializeToString,
            ),
            'GetMAUCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMAUCount,
                    request_deserializer=proto_dot_eventcounter_dot_service__pb2.GetMAUCountRequest.FromString,
                    response_serializer=proto_dot_eventcounter_dot_service__pb2.GetMAUCountResponse.SerializeToString,
            ),
            'GetOpsEvaluationUserCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOpsEvaluationUserCount,
                    request_deserializer=proto_dot_eventcounter_dot_service__pb2.GetOpsEvaluationUserCountRequest.FromString,
                    response_serializer=proto_dot_eventcounter_dot_service__pb2.GetOpsEvaluationUserCountResponse.SerializeToString,
            ),
            'GetOpsGoalUserCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOpsGoalUserCount,
                    request_deserializer=proto_dot_eventcounter_dot_service__pb2.GetOpsGoalUserCountRequest.FromString,
                    response_serializer=proto_dot_eventcounter_dot_service__pb2.GetOpsGoalUserCountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bucketeer.eventcounter.EventCounterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventCounterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetExperimentEvaluationCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bucketeer.eventcounter.EventCounterService/GetExperimentEvaluationCount',
            proto_dot_eventcounter_dot_service__pb2.GetExperimentEvaluationCountRequest.SerializeToString,
            proto_dot_eventcounter_dot_service__pb2.GetExperimentEvaluationCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEvaluationTimeseriesCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bucketeer.eventcounter.EventCounterService/GetEvaluationTimeseriesCount',
            proto_dot_eventcounter_dot_service__pb2.GetEvaluationTimeseriesCountRequest.SerializeToString,
            proto_dot_eventcounter_dot_service__pb2.GetEvaluationTimeseriesCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperimentResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bucketeer.eventcounter.EventCounterService/GetExperimentResult',
            proto_dot_eventcounter_dot_service__pb2.GetExperimentResultRequest.SerializeToString,
            proto_dot_eventcounter_dot_service__pb2.GetExperimentResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListExperimentResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bucketeer.eventcounter.EventCounterService/ListExperimentResults',
            proto_dot_eventcounter_dot_service__pb2.ListExperimentResultsRequest.SerializeToString,
            proto_dot_eventcounter_dot_service__pb2.ListExperimentResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperimentGoalCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bucketeer.eventcounter.EventCounterService/GetExperimentGoalCount',
            proto_dot_eventcounter_dot_service__pb2.GetExperimentGoalCountRequest.SerializeToString,
            proto_dot_eventcounter_dot_service__pb2.GetExperimentGoalCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMAUCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bucketeer.eventcounter.EventCounterService/GetMAUCount',
            proto_dot_eventcounter_dot_service__pb2.GetMAUCountRequest.SerializeToString,
            proto_dot_eventcounter_dot_service__pb2.GetMAUCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOpsEvaluationUserCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bucketeer.eventcounter.EventCounterService/GetOpsEvaluationUserCount',
            proto_dot_eventcounter_dot_service__pb2.GetOpsEvaluationUserCountRequest.SerializeToString,
            proto_dot_eventcounter_dot_service__pb2.GetOpsEvaluationUserCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOpsGoalUserCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bucketeer.eventcounter.EventCounterService/GetOpsGoalUserCount',
            proto_dot_eventcounter_dot_service__pb2.GetOpsGoalUserCountRequest.SerializeToString,
            proto_dot_eventcounter_dot_service__pb2.GetOpsGoalUserCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
