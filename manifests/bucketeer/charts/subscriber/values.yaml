image:
  repository: ghcr.io/bucketeer-io/bucketeer-subscriber
  pullPolicy: IfNotPresent

namespace: default
fullnameOverride: "subscriber"

env:
  project:
  profile: true
  demoSiteEnabled: false
  gcpEnabled: true
  enablePprof: false
  pprofAddr: 127.0.0.1:6060
  mysqlUser:
  mysqlPass:
  mysqlHost:
  mysqlPort:
  mysqlDbName:
  mysqlDbOpenConns: 50
  bigqueryQuerierEmulatorHost:
  bigqueryWriterEmulatorHost:
  pubsubEmulatorHost:
  notificationService: localhost:9001
  environmentService: localhost:9001
  pushService: localhost:9001
  autoOpsService: localhost:9001
  experimentService: localhost:9001
  featureService: localhost:9001
  batchService: localhost:9001
  webURL:
  logLevel: info
  port: 9090
  metricsPort: 9002
  refreshInterval: 10m
  # redis settings
  persistentRedis:
    serverName:
    addr:
    poolMaxIdle: 25
    poolMaxActive: 25
  nonPersistentRedis:
    serverName:
    addr:
    poolMaxIdle: 25
    poolMaxActive: 25

affinity: {}

nodeSelector: {}

pdb:
  enabled:
  maxUnavailable: 50%
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 10%
    maxSurge: 1

hpa:
  enabled:
  minReplicas:
  maxReplicas:
  metrics:
    cpu:
      targetAverageUtilization:

envoy:
  image:
    repository: envoyproxy/envoy
    tag: v1.34.1
    pullPolicy: IfNotPresent
  lbPolicy: LEAST_REQUEST
  config:
  adminPort: 8001
  resources: {}

tls:
  service:
    secret:
    cert:
    key:

serviceToken:
  secret:

service:
  type: ClusterIP
  clusterIP: None

gcpMultiCluster:
  configCluster: false
  enabled: false

terminationGracePeriodSeconds: 60
health:
  startupProbe:
    periodSeconds: 3
    failureThreshold: 20
    timeoutSeconds: 5
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 15
    failureThreshold: 8
    timeoutSeconds: 5
  readinessProbe:
    initialDelaySeconds: 15
    periodSeconds: 3
    failureThreshold: 1
    timeoutSeconds: 5

resources: {}

serviceAccount:
  annotations: {}

subscribers:
  # This is the processor's name. It must match the same name defined in the
  # pkg/subscriber/processor/processors.go
  auditLogPersister:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 1000
    pullerMaxOutstandingBytes: 1000000000
    maxMps: 50
    workerNum: 1
  domainEventInformer:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 1000
    pullerMaxOutstandingBytes: 1000000000
    maxMps: 50
    workerNum: 1
  evaluationCountEventPersister:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 1000
    pullerMaxOutstandingBytes: 1000000000
    maxMps: 50
    workerNum: 1
  metricsEventPersister:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 1000
    pullerMaxOutstandingBytes: 1000000000
    maxMps: 50
    workerNum: 1
  pushSender:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 500
    pullerMaxOutstandingBytes: 50000000
    maxMps: 100
    workerNum: 1
  segmentUserPersister:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 1000
    pullerMaxOutstandingBytes: 1000000000
    maxMps: 50
    workerNum: 1
  userEventPersister:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 10
    pullerMaxOutstandingMessages: 10000
    pullerMaxOutstandingBytes: 100000000
    maxMps: 1000
    workerNum: 5
  demoOrganizationCreationNotifier:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 1000
    pullerMaxOutstandingBytes: 1000000000
    maxMps: 50
    workerNum: 1

onDemandSubscribers:
  evaluationCountEventDWHPersister:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 1000
    pullerMaxOutstandingBytes: 100000000
    maxMps: 100
    workerNum: 1
    checkInterval: 10
  evaluationCountEventOPSPersister:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 1000
    pullerMaxOutstandingBytes: 100000000
    maxMps: 100
    workerNum: 1
    checkInterval: 10
  goalCountEventDWHPersister:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 1000
    pullerMaxOutstandingBytes: 100000000
    maxMps: 100
    workerNum: 1
    checkInterval: 10
  goalCountEventOPSPersister:
    pubSubType: google
    project:
    topic:
    subscription:
    pullerNumGoroutines: 5
    pullerMaxOutstandingMessages: 1000
    pullerMaxOutstandingBytes: 100000000
    maxMps: 100
    workerNum: 1
    checkInterval: 10

# This configuration is used for add custom params to Processors
processors:
  # This is the processor's name. It must match the same name defined in the
  # pkg/subscriber/processor/processors.go
  auditLogPersister:
    flushSize: 100
    flushInterval: 10
    flushTimeout: 10
  evaluationCountEventPersister:
    flushSize: 100
    flushInterval: 10
    writeCacheInterval: 10
    userAttributeKeyTtl: 604800 # 7 days
  segmentUserPersister:
    domainEventProject:
    domainEventTopic:
    flushSize: 100
    flushInterval: 10
    # PubSub configuration
    pubSubType: google
    redisServerName: ""
    redisAddr: ""
    redisPoolSize: 25
    redisMinIdle: 25
    redisPartitionCount: 16
    project: ""
  userEventPersister:
    flushSize: 200
    flushInterval: 5
  demoOrganizationCreationNotifier:
    notifier:
      slack:
        webhookURL: ""

onDemandProcessors:
  evaluationCountEventDWHPersister:
    flushSize: 100
    flushInterval: 10
    flushTimeout: 10
    # Data warehouse configuration will be injected from global settings by Helm template
    dataWarehouse:
      type: ""
      batchSize: 0
      timezone: ""
      mysql:
        useMainConnection: false
        host: ""
        port: 0
        user: ""
        password: ""
        database: ""
      bigquery:
        project: ""
        dataset: ""
        location: ""
  goalCountEventOPSPersister:
    flushSize: 100
    flushInterval: 10
    flushTimeout: 10
  evaluationCountEventOPSPersister:
    flushSize: 100
    flushInterval: 10
    flushTimeout: 10
  goalCountEventDWHPersister:
    flushSize: 100
    flushInterval: 10
    flushTimeout: 10
    # Data warehouse configuration will be injected from global settings by Helm template
    dataWarehouse:
      type: ""
      batchSize: 0
      timezone: ""
      mysql:
        useMainConnection: false
        host: ""
        port: 0
        user: ""
        password: ""
        database: ""
      bigquery:
        project: ""
        dataset: ""
        location: ""
