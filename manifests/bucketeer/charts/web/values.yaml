image:
  repository: ghcr.io/bucketeer-io/bucketeer-web
  pullPolicy: IfNotPresent
fullnameOverride: "web"
namespace: default
env:
  cloudService:
  profile: true
  bucketeerTestEnabled:
  demoSiteEnabled: false
  gcpEnabled: true
  enablePprof: false
  pprofAddr: 127.0.0.1:6060
  bigqueryQuerierEmulatorHost:
  pubsubEmulatorHost:
  project:
  pubSubType: google
  pubSubRedisAddr:
  pubSubRedisPoolSize:
  pubSubRedisMinIdle:
  mysqlUser:
  mysqlPass:
  mysqlHost:
  mysqlPort: 3306
  mysqlDbName:
  persistentRedis:
    serverName:
    addr:
    poolMaxIdle: 25
    poolMaxActive: 25
  nonPersistentRedis:
    serverName:
    addr:
    poolMaxIdle: 25
    poolMaxActive: 25
  bigQueryDataSet:
  bigQueryDataLocation:
  domainTopic:
  bulkSegmentUsersReceivedTopic:
  accountService: localhost:9001
  authService: localhost:9001
  batchService: localhost:9001
  environmentService: localhost:9001
  experimentService: localhost:9001
  featureService: localhost:9001
  autoOpsService: localhost:9001
  grpcGatewayPort: 9089
  healthCheckServicePort: 8000
  accountServicePort: 9091
  authServicePort: 9092
  auditLogServicePort: 9093
  autoOpsServicePort: 9094
  environmentServicePort: 9095
  eventCounterServicePort: 9096
  experimentServicePort: 9097
  featureServicePort: 9098
  notificationServicePort: 9100
  pushServicePort: 9101
  webConsoleServicePort: 9102
  dashboardServicePort: 9103
  tagServicePort: 9104
  coderefServicePort: 9105
  unifiedGatewayPort: 9106
  metricsPort: 9002
  timezone: UTC
  emailFilter:
  logLevel: info
  googleTagManagerId:
  apiEndpoint:
affinity: {}
nodeSelector: {}
pdb:
  enabled:
  maxUnavailable: 50%
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 10%
    maxSurge: 1
hpa:
  enabled:
  minReplicas:
  maxReplicas:
  metrics:
    cpu:
      targetAverageUtilization:
tls:
  service:
    secret:
  bucketeerJP:
    secrets:
serviceToken:
  secret:
oauth:
  key:
    secret:
  issuer:
  audience: bucketeer
  google:
    issuer:
    clientId:
    clientSecret:
    redirectUrls:
  demoSignIn:
    enabled:
    email:
    password:
    organizationId:
    organizationOwnerEmail:
    projectId:
    environmentId:
    isSystemAdmin:
webhook:
  baseURL:
  kmsResourceName:
envoy:
  image:
    repository: envoyproxy/envoy
    tag: v1.34.1
    pullPolicy: IfNotPresent
  lbPolicy: LEAST_REQUEST
  config:
  grpcPort: 9000
  httpPort: 9003
  adminPort: 8001
  resources: {}
service:
  type: ClusterIP
  grpcPort: 9000
  httpPort: 9003
health:
  startupProbe:
    periodSeconds: 3
    failureThreshold: 10
    timeoutSeconds: 5
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 15
    failureThreshold: 8
    timeoutSeconds: 5
  readinessProbe:
    initialDelaySeconds: 15
    periodSeconds: 3
    failureThreshold: 1
    timeoutSeconds: 5
resources: {}
serviceAccount:
  annotations: {}
ingress:
  name: web
  host:
  staticIPName:
  rulePaths:
    - pathType: ImplementationSpecific
      backend:
        service:
          name: web
          port:
            number: 9003
gcpMultiCluster:
  configCluster: false
  enabled: false
  service:
    name: web-multi-cluster-service
  ingress:
    name: web-multi-cluster-ingress
    host:
    staticIPName:
    tls:
      secrets:
    rulePaths:
      - path: /
        backend:
          serviceName: web-multi-cluster-service
          servicePort: 9003
terminationGracePeriodSeconds: 60
