// Copyright 2025 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.auditlog;
option go_package = "github.com/bucketeer-io/bucketeer/v2/proto/auditlog";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/wrappers.proto";

import "proto/auditlog/auditlog.proto";

message GetAuditLogRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  string environment_id = 2 [(google.api.field_behavior) = REQUIRED];
}

message GetAuditLogResponse {
  AuditLog audit_log = 1;
}

message ListAuditLogsRequest {
  enum OrderBy {
    DEFAULT = 0;
    TIMESTAMP = 1;
  }
  enum OrderDirection {
    DESC = 0;
    ASC = 1;
  }
  // Page size for pagination. If not set, 0, or exceeds 200, defaults to 200.
  // Maximum allowed value is 200.
  int64 page_size = 1;
  string cursor = 2;
  reserved 3;
  OrderBy order_by = 4;
  OrderDirection order_direction = 5;
  string search_keyword = 6;
  int64 from = 7;
  int64 to = 8;
  google.protobuf.Int32Value entity_type = 9;
  string environment_id = 10;
}

message ListAuditLogsResponse {
  repeated AuditLog audit_logs = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message ListAdminAuditLogsRequest {
  enum OrderBy {
    DEFAULT = 0;
    TIMESTAMP = 1;
  }
  enum OrderDirection {
    DESC = 0;
    ASC = 1;
  }
  // Page size for pagination. If not set, 0, or exceeds 200, defaults to 200.
  // Maximum allowed value is 200.
  int64 page_size = 1;
  string cursor = 2;
  OrderBy order_by = 3;
  OrderDirection order_direction = 4;
  string search_keyword = 5;
  int64 from = 6;
  int64 to = 7;
  google.protobuf.Int32Value entity_type = 8;
}

message ListAdminAuditLogsResponse {
  repeated AuditLog audit_logs = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message ListFeatureHistoryRequest {
  enum OrderBy {
    DEFAULT = 0;
    TIMESTAMP = 1;
  }
  enum OrderDirection {
    DESC = 0;
    ASC = 1;
  }
  string feature_id = 1 [(google.api.field_behavior) = REQUIRED];
  // Page size for pagination. If not set, 0, or exceeds 200, defaults to 200.
  // Maximum allowed value is 200.
  int64 page_size = 2;
  string cursor = 3;
  reserved 4;
  OrderBy order_by = 5;
  OrderDirection order_direction = 6;
  string search_keyword = 7;
  int64 from = 8;
  int64 to = 9;
  string environment_id = 10;
}

message ListFeatureHistoryResponse {
  repeated AuditLog audit_logs = 1;
  string cursor = 2;
  int64 total_count = 3;
}

service AuditLogService {
  rpc GetAuditLog(GetAuditLogRequest) returns (GetAuditLogResponse) {
    option (google.api.http) = {
      get: "/v1/audit_log"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Audit Log"
      description: "Get an audit log details"
      tags: "audit_log"
      operation_id: "web.v1.audit_log.get"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Returned when the requested resource is not found."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "not found", "details": [] }'
          }
        }
      }
    };
  }
  rpc ListAuditLogs(ListAuditLogsRequest) returns (ListAuditLogsResponse) {
    option (google.api.http) = {
      get: "/v1/audit_logs"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Audit Logs"
      description: "List audit logs"
      tags: "audit_log"
      operation_id: "web.v1.audit_log.list"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc ListAdminAuditLogs(ListAdminAuditLogsRequest)
      returns (ListAdminAuditLogsResponse) {
    option (google.api.http) = {
      get: "/v1/admin_audit_logs"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Admin Audit Logs"
      description: "List admin audit logs"
      tags: "audit_log"
      operation_id: "web.v1.audit_log.admin.list"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
  rpc ListFeatureHistory(ListFeatureHistoryRequest)
      returns (ListFeatureHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/feature_history"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Feature History"
      description: "List feature history"
      tags: "audit_log"
      operation_id: "web.v1.audit_log.feature_history.list"
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
    };
  }
}
