// Code generated by MockGen. DO NOT EDIT.
// Source: experiments.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	experiment "github.com/bucketeer-io/bucketeer/proto/experiment"
)

// MockExperimentsCache is a mock of ExperimentsCache interface.
type MockExperimentsCache struct {
	ctrl     *gomock.Controller
	recorder *MockExperimentsCacheMockRecorder
}

// MockExperimentsCacheMockRecorder is the mock recorder for MockExperimentsCache.
type MockExperimentsCacheMockRecorder struct {
	mock *MockExperimentsCache
}

// NewMockExperimentsCache creates a new mock instance.
func NewMockExperimentsCache(ctrl *gomock.Controller) *MockExperimentsCache {
	mock := &MockExperimentsCache{ctrl: ctrl}
	mock.recorder = &MockExperimentsCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExperimentsCache) EXPECT() *MockExperimentsCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockExperimentsCache) Get(environmentNamespace string) (*experiment.Experiments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", environmentNamespace)
	ret0, _ := ret[0].(*experiment.Experiments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExperimentsCacheMockRecorder) Get(environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExperimentsCache)(nil).Get), environmentNamespace)
}

// Put mocks base method.
func (m *MockExperimentsCache) Put(experiments *experiment.Experiments, environmentNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", experiments, environmentNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockExperimentsCacheMockRecorder) Put(experiments, environmentNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockExperimentsCache)(nil).Put), experiments, environmentNamespace)
}
