// Copyright 2024 The Bucketeer Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package bucketeer.environment;
option go_package = "github.com/bucketeer-io/bucketeer/proto/environment";

import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/environment/environment.proto";
import "proto/environment/project.proto";
import "proto/environment/organization.proto";
import "proto/environment/command.proto";

message GetEnvironmentV2Request {
  string id = 1;
}

message GetEnvironmentV2Response {
  EnvironmentV2 environment = 1;
}

message ListEnvironmentsV2Request {
  enum OrderBy {
    DEFAULT = 0;
    ID = 1;
    NAME = 2;
    URL_CODE = 3;
    CREATED_AT = 4;
    UPDATED_AT = 5;
  }
  enum OrderDirection {
    ASC = 0;
    DESC = 1;
  }
  int64 page_size = 1;
  string cursor = 2;
  OrderBy order_by = 3;
  OrderDirection order_direction = 4;
  string project_id = 5;
  google.protobuf.BoolValue archived = 6;
  string search_keyword = 7;
  string organization_id = 8;
}

message ListEnvironmentsV2Response {
  repeated EnvironmentV2 environments = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message CreateEnvironmentV2Request {
  CreateEnvironmentV2Command command = 1;
}

message CreateEnvironmentV2Response {
  EnvironmentV2 environment = 1;
}

message UpdateEnvironmentV2Request {
  string id = 1;
  RenameEnvironmentV2Command rename_command = 2;
  ChangeDescriptionEnvironmentV2Command change_description_command = 3;
  ChangeRequireCommentCommand change_require_comment_command = 4;
}

message UpdateEnvironmentV2Response {}

message ArchiveEnvironmentV2Request {
  string id = 1;
  ArchiveEnvironmentV2Command command = 2;
}

message ArchiveEnvironmentV2Response {}

message UnarchiveEnvironmentV2Request {
  string id = 1;
  UnarchiveEnvironmentV2Command command = 2;
}

message UnarchiveEnvironmentV2Response {}

message GetProjectRequest {
  string id = 1;
}

message GetProjectResponse {
  Project project = 1;
}

message ListProjectsRequest {
  enum OrderBy {
    DEFAULT = 0;
    ID = 1;
    CREATED_AT = 2;
    UPDATED_AT = 3;
    NAME = 4;
    URL_CODE = 5;
  }
  enum OrderDirection {
    ASC = 0;
    DESC = 1;
  }
  int64 page_size = 1;
  string cursor = 2;
  OrderBy order_by = 3;
  OrderDirection order_direction = 4;
  string search_keyword = 5;
  google.protobuf.BoolValue disabled = 6;
  repeated string organization_ids = 7;
}

message ListProjectsResponse {
  repeated Project projects = 1;
  string cursor = 2;
  int64 total_count = 3;
}
message CreateProjectRequest {
  CreateProjectCommand command = 1;
}

message CreateProjectResponse {
  Project project = 1;
}

message CreateTrialProjectRequest {
  CreateTrialProjectCommand command = 1;
}

message CreateTrialProjectResponse {}

message UpdateProjectRequest {
  string id = 1;
  ChangeDescriptionProjectCommand change_description_command = 2;
  RenameProjectCommand rename_command = 3;
}

message UpdateProjectResponse {}

message EnableProjectRequest {
  string id = 1;
  EnableProjectCommand command = 2;
}

message EnableProjectResponse {}

message DisableProjectRequest {
  string id = 1;
  DisableProjectCommand command = 2;
}

message DisableProjectResponse {}

message ConvertTrialProjectRequest {
  string id = 1;
  ConvertTrialProjectCommand command = 2;
}

message ConvertTrialProjectResponse {}

message GetOrganizationRequest {
  string id = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message ListOrganizationsRequest {
  enum OrderBy {
    DEFAULT = 0;
    ID = 1;
    CREATED_AT = 2;
    UPDATED_AT = 3;
    NAME = 4;
    URL_CODE = 5;
  }
  enum OrderDirection {
    ASC = 0;
    DESC = 1;
  }
  int64 page_size = 1;
  string cursor = 2;
  OrderBy order_by = 3;
  OrderDirection order_direction = 4;
  string search_keyword = 5;
  google.protobuf.BoolValue disabled = 6;
  google.protobuf.BoolValue archived = 7;
}

message ListOrganizationsResponse {
  repeated Organization Organizations = 1;
  string cursor = 2;
  int64 total_count = 3;
}

message CreateOrganizationRequest {
  CreateOrganizationCommand command = 1;
}

message CreateOrganizationResponse {
  Organization Organization = 1;
}

message UpdateOrganizationRequest {
  string id = 1;
  ChangeNameOrganizationCommand rename_command = 2;
  ChangeDescriptionOrganizationCommand change_description_command = 3;
}

message UpdateOrganizationResponse {}

message EnableOrganizationRequest {
  string id = 1;
  EnableOrganizationCommand command = 2;
}

message EnableOrganizationResponse {}

message DisableOrganizationRequest {
  string id = 1;
  DisableOrganizationCommand command = 2;
}

message DisableOrganizationResponse {}

message ArchiveOrganizationRequest {
  string id = 1;
  ArchiveOrganizationCommand command = 2;
}

message ArchiveOrganizationResponse {}

message UnarchiveOrganizationRequest {
  string id = 1;
  UnarchiveOrganizationCommand command = 2;
}

message UnarchiveOrganizationResponse {}

message ConvertTrialOrganizationRequest {
  string id = 1;
  ConvertTrialOrganizationCommand command = 2;
}

message ConvertTrialOrganizationResponse {}

service EnvironmentService {
  rpc GetEnvironmentV2(GetEnvironmentV2Request)
      returns (GetEnvironmentV2Response) {
    option (google.api.http) = {
      post: "/v1/environment/get_environment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get",
      description: "Get an environment. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Environment",
      operation_id: "web.v1.environment.get_environment",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc ListEnvironmentsV2(ListEnvironmentsV2Request)
      returns (ListEnvironmentsV2Response) {
    option (google.api.http) = {
      post: "/v1/environment/list_environments"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "List environments. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Environment",
      operation_id: "web.v1.environment.list_environments",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc CreateEnvironmentV2(CreateEnvironmentV2Request)
      returns (CreateEnvironmentV2Response) {
    option (google.api.http) = {
      post: "/v1/environment/create_environment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create an environment. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Environment",
      operation_id: "web.v1.environment.create_environment",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc UpdateEnvironmentV2(UpdateEnvironmentV2Request)
      returns (UpdateEnvironmentV2Response) {
    option (google.api.http) = {
      post: "/v1/environment/update_environment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update",
      description: "Update an environment. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Environment",
      operation_id: "web.v1.environment.update_environment",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc ArchiveEnvironmentV2(ArchiveEnvironmentV2Request)
      returns (ArchiveEnvironmentV2Response) {
    option (google.api.http) = {
      post: "/v1/environment/archive_environment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Archive",
      description: "Archive an environment. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Environment",
      operation_id: "web.v1.environment.archive_environment",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc UnarchiveEnvironmentV2(UnarchiveEnvironmentV2Request)
      returns (UnarchiveEnvironmentV2Response) {
    option (google.api.http) = {
      post: "/v1/environment/unarchive_environment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Unarchive",
      description: "Unarchive an environment. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Environment",
      operation_id: "web.v1.environment.unarchive_environment",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }

  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      post: "/v1/environment/get_project"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get",
      description: "Get a project. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Project",
      operation_id: "web.v1.environment.get_project",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      post: "/v1/environment/list_projects"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "List projects. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Project",
      operation_id: "web.v1.environment.list_projects",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post: "/v1/environment/create_project"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create a project. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Project",
      operation_id: "web.v1.environment.create_project",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc CreateTrialProject(CreateTrialProjectRequest)
      returns (CreateTrialProjectResponse) {
    option (google.api.http) = {
      post: "/v1/environment/create_trial_project"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Trial",
      description: "Create a trial project. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Project",
      operation_id: "web.v1.environment.create_trial_project",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      post: "/v1/environment/update_project"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update",
      description: "Update a project. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Project",
      operation_id: "web.v1.environment.update_project",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc EnableProject(EnableProjectRequest) returns (EnableProjectResponse) {
    option (google.api.http) = {
      post: "/v1/environment/enable_project"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Enable",
      description: "Enable a project. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Project",
      operation_id: "web.v1.environment.enable_project",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc DisableProject(DisableProjectRequest) returns (DisableProjectResponse) {
    option (google.api.http) = {
      post: "/v1/environment/disable_project"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Disable",
      description: "Disable a project. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Project",
      operation_id: "web.v1.environment.disable_project",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc ConvertTrialProject(ConvertTrialProjectRequest)
      returns (ConvertTrialProjectResponse) {
    option (google.api.http) = {
      post: "/v1/environment/convert_trial_project"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Convert Trial",
      description: "Convert a trial project. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Project",
      operation_id: "web.v1.environment.convert_trial_project",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }

  rpc GetOrganization(GetOrganizationRequest)
      returns (GetOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/environment/get_organization"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get",
      description: "Get an organization. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Organization",
      operation_id: "web.v1.environment.get_organization",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc ListOrganizations(ListOrganizationsRequest)
      returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      post: "/v1/environment/list_organizations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List",
      description: "List organizations. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Organization",
      operation_id: "web.v1.environment.list_organizations",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc CreateOrganization(CreateOrganizationRequest)
      returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/environment/create_organization"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create",
      description: "Create an organization. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Organization",
      operation_id: "web.v1.environment.create_organization",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc UpdateOrganization(UpdateOrganizationRequest)
      returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/environment/update_organization"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update",
      description: "Update an organization. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Organization",
      operation_id: "web.v1.environment.update_organization",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc EnableOrganization(EnableOrganizationRequest)
      returns (EnableOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/environment/enable_organization"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Enable",
      description: "Enable an organization. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Organization",
      operation_id: "web.v1.environment.enable_organization",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc DisableOrganization(DisableOrganizationRequest)
      returns (DisableOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/environment/disable_organization"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Disable",
      description: "Disable an organization. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Organization",
      operation_id: "web.v1.environment.disable_organization",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc ArchiveOrganization(ArchiveOrganizationRequest)
      returns (ArchiveOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/environment/archive_organization"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Archive",
      description: "Archive an organization. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Organization",
      operation_id: "web.v1.environment.archive_organization",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc UnarchiveOrganization(UnarchiveOrganizationRequest)
      returns (UnarchiveOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/environment/unarchive_organization"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Unarchive",
      description: "Unarchive an organization. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Organization",
      operation_id: "web.v1.environment.unarchive_organization",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
  rpc ConvertTrialOrganization(ConvertTrialOrganizationRequest)
      returns (ConvertTrialOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/environment/convert_trial_organization"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Convert Trial",
      description: "Convert a trial organization to a paid one. To call this API, you need an `SYSTEM_ADMIN` role.",
      tags: "Organization",
      operation_id: "web.v1.environment.convert_trial_organization",
      responses: {
        key: "400"
        value: {
          description: "Returned for bad requests that may have failed validation."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }'
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Request could not be authenticated (authentication required)."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 16, "message": "not authenticated", "details": [] }'
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Request does not have permission to access the resource."
          schema: { json_schema: { ref: ".google.rpc.Status" } }
          examples: {
            key: "application/json"
            value: '{ "code": 7, "message": "not authorized", "details": [] }'
          }
        }
      }
    };
  }
}
